[build-system]
requires = ["flit_core >=3.3,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "hikari-tanjun"
version = "2.0.1a1"
description = "A flexible command framework designed to extend Hikari."
readme = "README.md"
requires-python = ">=3.9.0,<3.12"
license = {file = "LICENSE"}
authors = [ {name = "Faster Speeding", email="lucina@lmbyrne.dev"} ]
keywords= ["hikari"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    # "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Communications :: Chat",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed"
]
dependencies = ["hikari~=2.0.0.dev102"]

[project.optional-dependencies]
docs = ["pdoc~=8.0.0"]
flake8 = [
    "flake8==3.9.2",

    # Flake8 plugins
    # Ref: https://github.com/DmytroLitvinov/awesome-flake8-extensions

    "flake8-bandit~=2.1.2",             # runs bandit
    "flake8-black==0.2.3",              # runs black
    "flake8-broken-line==0.3.0",        # forbey "\" linebreaks
    "flake8-builtins==1.5.3",           # builtin shadowing checks
    "flake8-coding==1.3.2",             # coding magic-comment detection
    "flake8-comprehensions==3.6.1",     # comprehension checks
    "flake8-deprecated==1.3",           # deprecated call checks
    "flake8-docstrings==1.6.0",         # pydocstyle support
    "flake8-executable==2.1.1",         # shebangs
    "flake8-fixme==1.1.1",              # "fix me" counter
    "flake8-functions==0.0.6",          # function linting
    "flake8-html==0.4.1",               # html output
    "flake8-if-statements==0.1.0",      # condition linting
    "flake8-isort==4.0.0",              # runs isort
    "flake8-mutable==1.2.0",            # mutable default argument detection
    "flake8-pep3101==1.3.0",            # new-style format strings only
    "flake8-print==4.0.0",              # complain about print statements in code
    "flake8-printf-formatting==1.1.2",  # forbey printf-style python2 string formatting
    "flake8-pytest-style==1.5.0",       # pytest checks
    "flake8-raise==0.0.5",              # exception raising linting
    # This seems to lead to more false-posities then it's wroth.
    # "flake8-use-fstring==1.1"         # format string checking
]
lint = ["codespell~=2.1.0"]
publish = ["flit~=3.3"]
reformat = ["black~=21.7b0", "isort==5.9.3"]
tests = ["pytest==6.2.5", "pytest-asyncio==0.15.1", "pytest-cov==2.12.1"]

[project.urls]
    homepage = "https://github.com/FasterSpeeding/Tanjun"
    repository = "https://github.com/FasterSpeeding/Tanjun"
    documentation = "https://fasterspeeding.github.io/Tanjun/"
    changelog = "https://github.com/FasterSpeeding/tanjun/blob/master/CHANGELOG.md"

[tool.flit.module]
name = "tanjun"

[tool.black]
line-length     = 120
target-version  = ["py39"]
include         = ".*pyi?$"

[tool.coverage.run]
concurrency = ["multiprocessing"]
parallel = true
branch = true
timid = false
source = ["tanjun"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "^\\s*\\.\\.\\.$",
    "^\\s*@abc.abstractmethod$",
    "^if typing.TYPE_CHECKING:$"
]

[tool.isort]
profile = "black"
force_single_line = true

[tool.pyright]
include = ["examples", "tanjun", "noxfile.py", "tests"]

pythonVersion = "3.9"
typeCheckingMode = "strict"
reportCallInDefaultInitializer = "none"
reportImplicitStringConcatenation = "none"
reportMissingImports = "error"
reportMissingModuleSource = "error"
reportMissingTypeStubs = "error"
reportUnusedCallResult = "none"
reportUnknownParameterType = "error"

reportUninitializedInstanceVariable = "warning" # Seems to lead to false-positives when inheriance and
                                                # _ properties are involved
reportIncompatibleMethodOverride = "warning"    # This relies on ordering for key-word only arguments 
                                                # which is more annoying than it's worth
reportUnknownMemberType = "warning"             # This messes with instance checking generic objects
reportUnknownArgumentType = "warning"           # Pretty much the same as reportUnknownMemberType
reportImportCycles = "warning"                  # This isn't necessarily an issue if it's type checking only.
reportUnknownVariableType = "warning"           # Lotta false-positives, might fix/change later.

[tool.pytest.ini_options]
testpaths = ["tests"]
required_plugins = ["pytest-asyncio"]
