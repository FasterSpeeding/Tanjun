{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tanjun # A flexible command framework designed to extend Hikari. Installation # You can install Tanjun from PyPI using the following command in any Python 3.9 or above environment. python -m pip install -U hikari-tanjun Quick Usage # For usage see the documentation and the examples or tutorials and articles and the usage guide . Community Resources # An alternative implementation of command signature parsing for slash commands (which relies more on documentation parsing) can be found at https://github.com/thesadru/tanchi . Redis based implementations of the async cache dependency can be found in hikari-sake >=v1.0.1a1 (exposed by sake.redis.ResourceClient.add_to_tanjun ). Support # Hikari's support guild provides for support for Tanjun. Contributing # Before contributing you should read through the contributing guidelines and the code of conduct","title":"Home"},{"location":"#tanjun","text":"A flexible command framework designed to extend Hikari.","title":"Tanjun"},{"location":"#installation","text":"You can install Tanjun from PyPI using the following command in any Python 3.9 or above environment. python -m pip install -U hikari-tanjun","title":"Installation"},{"location":"#quick-usage","text":"For usage see the documentation and the examples or tutorials and articles and the usage guide .","title":"Quick Usage"},{"location":"#community-resources","text":"An alternative implementation of command signature parsing for slash commands (which relies more on documentation parsing) can be found at https://github.com/thesadru/tanchi . Redis based implementations of the async cache dependency can be found in hikari-sake >=v1.0.1a1 (exposed by sake.redis.ResourceClient.add_to_tanjun ).","title":"Community Resources"},{"location":"#support","text":"Hikari's support guild provides for support for Tanjun.","title":"Support"},{"location":"#contributing","text":"Before contributing you should read through the contributing guidelines and the code of conduct","title":"Contributing"},{"location":"changelog/","text":"Changelog # All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased # Added # Slash command specific tanjun.annotations.InteractionChannel and tanjun.annotations.InteractionMember types for annotation parsing. Exposed non-decorator version of with_annotated_args at tanjun.annotations.parse_annotated_args . This comes with the added functionality of letting you directly pass slash command option descriptions to the callback via the descriptions argument (instead of putting strings in annotations). Changed # tanjun.annotations.with_annotated_args will now raise if a slash command-specific type is used for a required message command parameter. 2.10.0a1 - 2022-11-24 # Added # Support for message commands to tanjun.annotations.TheseChannels . allowed_types field to tanjun.conversion.ToChannel to allow narrowing the allowed channel types for a message command option. Support for toggleable case-insensitive message command name handling. Fixed # The hot reloader will no-longer retry to reload a module being targeted through a system path ( pathlib.Path ) after one of its unloaders raises or finding out it has no unloaders. Allow passing hikari.GuildThreadChannel derived types (+ hikari.InteractionChannel ) to TheseChannels , and to the types field of with_channel_slash_option and SlashCommand.add_channel_option . The spacing in triggering_name is now properly normalised for message commands in groups to ensure only 1 space. This also fixes cases where names were being smashed together without any spaces. The hot reloader trying to declare commands multiple times. Actually set the attached component for commands within slash-command groups. Process converters attached to commands within slash-command groups to log for client misconfiguration. 2.9.0a1 - 2022-11-08 # Added # Added bot_managed argument to Client.from_gateway_bot for automatically starting the client when the linked REST bot starts. This defaults to False for backwards compatibility. Thread support (including a SfCache[hikari.GuildThreadChannel] concept). Changed # Bumped the minimum Hikari version to 2.0.0.dev112 . SfCache[hikari.GuildChannel] is now SfCache[hikari.PermissibleGuildChannel] . Allow None to be passed for attachment and attachments to edit response methods. Fixed # The ToChannel / to_channel converter now correctly uses the registered async channel cache if set. Removed # The project metadata dunder attributes from tanjun . importlib.metadata should be used to get this metadata instead. replace_attachments argument from the relevant context edit response methods. For more information see https://github.com/hikari-py/hikari/releases/tag/2.0.0.dev112 . 2.8.1a1 - 2022-10-24 # Changed # No longer ignore delete_after for ephemeral responses. 2.8.0a1 - 2022-10-16 # Added # Support for specifying min_length and max_length for slash command string options. Support for specifying min_length and max_length for message command parsing options with either no converters or converters which result in a collections.abc.Sized compatible value. Support for specifying the length of a string argument in annotation command declaration through tanjun.annotations.Length . AutocompleteContext.triggering_name which acts like Context.triggering_name . Support for localising check responses for application command contexts, and slash command + context menu declarations (names and descriptions). More information on how this works can be found in localisation . Changed # Bumped the minimum Hikari version to 2.0.0.dev111 . Bumped the minimum Alluka version to 0.1.2 . tanjun.dependencies.HotReloader.add_to_client now returns None . Fixed # Make tanjun.commands.slash.SlashCommandGroup.as_sub_command 's typing more flexible to allow decorating other command objects. tanjun.context.slash.SlashContext.triggering_name now returns the full triggering command name for sub-commands instead of just the top level command's name. Optimise tanjun.checks.OwnPermissionCheck to use context.app_permissions instead of calculating the bot's permissions for context menu command calls. Removed # The generic value field from BaseConverter . 2.7.0a1 - 2022-09-24 # Added # Support for marking positional message arguments as optional when using annotation parsing. tanjun.annotations.Default for setting the default for an argument while leaving the actual parameter required. Changed # tanjun.annotations.Flag will no longer unset any previously set aliases. Deprecated # tanjun.annotations.Flag.default and the default argument for tanjun.annotations.Flag. init . tanjun.annotations.Default should be used instead. Fixed # Don't ignore parameter annotations when the top-level type-hint is a union. 2.6.3a1 - 2022-09-17 # Added # follow_wrapped parameter to Component.with_command . MessageCommandGroup.as_sub_command , MessageCommandGroup.as_sub_group , SlashCommandGroup.as_sub_command and SlashCommandGroup.make_sub_group shorthand methods for creating sub-command and sub-command-groups directly on groups. Client.set_interaction_accepts for configuring which interaction types a client should listen for and execute. Changed # Client.set_message_accepts now raises a RuntimeError if called while the client is running to ensure consistent behaviour. Removed # The broken add_injector argument from tanjun.clients.Client.add_component . 2.6.2a1 - 2022-09-05 # Added # tanjun.abc.Client.load_directory and tanjun.abc.Client.load_directory_async for loading all the modules in a directory. path properties to tanjun.errors.FailedModuleLoad and tanjun.errors.FailedModuleUnload to indicate which module failed to load/unload. tanjun.errors.FailedModuleImport specialisation of tanjun.errors.FailedModuleLoad for differentiating between the two cases when necessary. 2.6.1a1 - 2022-08-29 # Added # follow_wrapped argument to the with check and with limiter decorators to allow for applying the limiter/check to all the commands in a decorator chain (in a similar fashion to how with_parsed_annotations behaves. Hot module reloading as a bot development aid. Changed # tanjun.ModuleMissingUnloaders is now raised by client.unload_modules , client.reload_modules and client.reload_modules_async when the stored module has no unloaders instead of tanjun.ModuleMissingLoaders . hikari.api.special_endpoints.CommandBuilder can also be included in the list passed to Client.declare_application_commands 's first arg now. Changed # Moved permissions functions to tanjun.permissions while keeping deprecated aliases in the now deprecated module tanjun.utilities . Fixed # Inherit the global states for default_member_permissions and is_dm_enabled in declare_application_command . 2.5.4a1 - 2022-08-11 # Added # V2 application permissions and dms_enabled config to slash and menu commands. Signature name validation for command options. wrapped_command properties to tanjun.SlashCommand , tanjun.MessageCommand and tanjun.MenuCommand for interospecting wrapped commands. key argument to the add_{}_slash_option methods and with_{}_slash_option functions to allow the argument's name in the callback's signature to be different from the option's declared name. Signature type-hint based command option declaration for both message and slash commands. More information about this can be found in tanjun.annotations . Allow multiple events to be passed to Client.with_listener / Component.with_listener in one call. Changed # If no events are passed to Client.with_listener / Component.with_listener it will now try to infer the event type(s) from the callback's type-hints. Fixed # Slash command parent command tracking. 2.5.3a1 - 2022-07-04 # Added # Support for sending attachments with Context.respond , CommandError and SlashContext.create_initial_response . Changed # Allow as_loader and as_unloader to be used as decorators while passing keyword-arguments. Bumped minimum Hikari version to 2.0.0.dev109 . Fixed # Allow for implicitly passing an embed or component as content when creating the initial response for an application command as a REST server to match the documented behaviour. The \"all_checks\" check failing on calls with DI. 2.5.2a1 - 2022-05-16 # Added # error option to the standard checks and limiters to allow setting a callback which generates a custom error. AbstractSchedule.force_stop which immediately stops the tasks without waiting and is sync. Changed # The cooldown limiter now uses Discord's timestamp format in its default error messages. AbstractCooldownManager.check_cooldown now returns a datetime.datetime instead of a float . halt_execution now takes priority over error_message when configuring checks. The REST strategies for interaction handling now cancel the response future if the execution task ends before it's set to avoid dangling waiting tasks. Command interaction handling now cancels auto-deferral if the command execution task finishes before a response is given. AbstractSchedule.stop is now async. Fixed # Some edge cases where closing schedule(s) may lead to futures being erroneously cancelled. 2.5.1a1 - 2022-05-02 # Added # A send method to CommandError which can be overridden to customise its response behaviour. Support for other create message arguments to CommandError . Changed # Renamed CommandError.message to .content . Fixed # Allowed a type of bool (not a literal) to be passed to ensure_result typing wise. Some edge cases in the weekly schedule increment handling logic. Long running delete_after and command execution tasks will no-longer be cancelled by GC. Removed # default_permission options for slash commands as command permissions V2 broke and deprecated this. AutocompleteOption as a lot of the promises this makes aren't realistic. AutocompleteContext.options and AutocompleteContext.focused now use hikari.AutocompleteInteractionOption . 2.5.0a1 - 2022-04-11 # Added # Time based async scheduler. Changed # Bumped minimum hikari version to 2.0.0.dev108. Use None as the default for max_value and min_value in parsing.py . The interval schedule no-longer calls its main callback when it's started. Fixed # The interval schedule now explicitly prints tracebacks instead of leaving them to asyncio's handler; this avoids relying on Asyncio detail which would wait until the Event is gc'ed to print the traceback. Removed # AbstractSchedule.iteration_count (note, this property still exists on IntervalSchedule ). 2.4.3a1 - 2022-03-12 # Added # Slash command \"attachment\" options. 2.4.2a1 - 2022-03-04 # Fixed # Add weakref slot to BaseConverter to improve standard converter compatibility with Alluka. Type compatibility with InteractionMessageBuilder when making the initial response as a REST bot. No longer duplicate embeds on slash create initial response for REST bots. has_responded is now only set to True for slash command contexts after the create_initial_response passes, avoiding issues where error logic calling ctx.respond after a call to create_initial_response failed would try to create a followup and 404. Further resolve Paths in module loading logic: User relative paths ( ~ ) can now be passed. It now normalises path (so separators), avoiding the same path but with different separators being registered multiple times. It now normalises symlinks, avoiding the same module being registered multiple times through different symlinks. 2.4.1a1 - 2022-02-25 # Added # Alluka's dependency injection interface(s) have been upgraded to the standard Client interface and Context interfaces. Standard message converter. Changed # Coroutine is now used instead of Awaitable for callback signature return types to account for refactors made to DI logic in Alluka. The dependency injection implementation has been moved to https://github.com/FasterSpeeding/Alluka and any new DI features may be indicated there rather than on Tanjun's (Note, DI is still supported) changelog. Callbacks with invalid dependency injection declarations (are declaring a positional-only argument as needing DI) now won't error until they're called with DI. Fixed # Duplication detection while checking for commands with overlapping names on declare. Relaxed menu command name validation to allow special characters and mixed cases. Removed # tanjun.injecting.TypeDescriptor and tanjun.injecting.CallbackDescriptor as these couldn't be kept through the Alluka refactor. needs_injection attributes. Deprecated # tanjun.injecting now only consists of deprecated aliases to Alluka types, with the only tanjun.inject and tanjun.injected being left as not deprecated for the sake of ease of use. 2.4.0a1 - 2022-02-11 # Added # ephemeral keyword-argument to SlashContext 's create_initial_response , create_follow_up and defer methods as a shorthand for including 1 << 6 in the passed flags. Context menu command support. Slash command autocomplete support. shard is now a property on all contexts. Changed # ShlexParser no-longer treats ' as a quote. Command objects can now be passed directly to SlashCommand.__init__ and MessageCommand.__init__ . The search snowflake conversion functions now return lists of snowflakes instead of iterators. tanjun.components has been split into a directory of the same name with the structure tanjun.components.slash , tanjun.components.message , tanjun.components.base and tanjun.components.menu . tanjun.commands has been split into a directory of the same name with the structure tanjun.commands.slash , tanjun.commands.message , tanjun.commands.base and tanjun.commands.menu . Bumped the minimum hikari version to hikari~=2.0.0.dev106 . Fixed # False-positive cache warnings from the standard converters. Mishandled edge cases for to_color. Mishandling of greedy arguments as reported by #200 2.3.1a1 - 2022-01-27 # Added # SlashContext.boolean , SlashContext.float , SlashContext.integer , SlashContext.snowflake and SlashContext.string methods as short hands for asserting the option type and ensuring type safety. A MessageParser standard abc. Client.set_metadata , Component.set_metadata and ExecutableCommand.set_metadata fluent methods to allow for chaining metadata setting. Complementary Client.load_modules_async and Client.reload_modules_async methods which execute blocking file access operations in asyncio's threadpool executor. The module load, unload and reload methods now raise FailedModuleLoad and FailedModuleUnload to relay errors raised by the target module or its (un)loaders. max_value and min_value options for message command option parser options and arguments. Changed # SlashContext.value now returns hikari.Snowflake for object IDs. reload_modules will now try to rollback a module if it failed to load before raising and avoid trying to reload a module all together if no loaders or unloaders are found. Fixed # Context.get_channel no longer raises an assertion error if the cache returns None . Schedules are now stopped if they are removed from a component while active. Schedules will no-longer raise a RuntimeError while closing a component if they were stopped before before hand. 2.3.0a1 - 2022-01-13 # Added # Scheduled callback interface and interval implementation to the standard component implementation. always_defer option to slash commands (not including groups). tanjun.MessageCommand is now callable like tanjun.SlashCommand . MessageContext.respond is now typed as allowing bool for the reply argument. min_value and max_value option for int and float slash command options. Changed # Bumped the minimum hikari version to hikari~=2.0.0.dev105. delete_after is now ignored for ephemeral responses instead of leading to a 404. Renamed the standard conversion classes to fit the naming convention To{Type} (while leaving the old names in as deprecated aliases) + added them to doc coverage/ conversion.__all__ by their new names. Fixed # The client level ephemeral default is now respected for REST-based slash command execution. The client now waits until a component has been closed before \"unbinding\" it when the component is removed from an active client. This should fix previous behaviour where trying to remove a component from an active client would lead to an error being raised. Removed # Redundant checks, hooks and metadata keyword-arguments from the standard MessageCommand , MessageCommandGroup , SlashCommandGroup and SlashCommand implementations' __init__ s; these should be set using methods/decorators. Redundant hook and check keyword-arguments from the standard Client impl; these should be set using methods. The use of star imports in tanjun.__init__ and tanjun.dependencies.__init__ meaning that now only the documented types and attributes for these modules (whatever's in the __all__ ) may be accessed directly on them now. tanjun.MessageContext , tanjun.SlashContext and tanjun.Context are no-longer exported on the top level as in most cases their abc equivalent should be used. 2.2.3a1 - 2022-01-06 # Added # The interface for a generic (type-based) asynchronous cache dependency. While this doesn't introduce any new implementation(s), this interface has been integrated into Tanjun (based on Hikari types) in places which are currently making cache/REST calls and can be used to better integrate 3rd-party caches with Tanjun. Redis based implementations of this for the types found in Hikari's gateway cache interface can be found in hikari-sake >=v1.0.1a1 (exposed by RedisResource.add_to_tanjun ). Removed # BaseConverter.convert in-favour of having each standard converter directly implement __call__ . tanjun.conversion.InjectableConverter . InjectionContext.get_type_special_case in favour of a get_type_dependency method which tries the context's client before returning the special case if registered. 2.2.2a1 - 2021-12-26 # Added # Type based dependency injection now has ergonomic Union support. This means that for inject(type=Union[A, B, C]) / inject(type=A | B | C) the dependency injector will try to find registered type injectors for A , B then C after trying to find a dependency injector for the literal Union. Type based dependency injection now has support for defaults through unions with None and Optional . This means that, for inject(type=Union[A, B, None]) / inject(type=A | B | None) and inject(type=Optional[A]) , if no registered implementations are found for the relevant types then None will be injected for the relevant argument. Changed # Message command parser arguments are now passed by keyword instead of positionally. Cooldown checks can now run without a present AbstractOwners implementation. Fixed # The cooldown manager now increments the internal counter after checking for cooldown rather than before. The old behaviour resulted in the last valid call to a bucket being ratelimited therefore essentially making the real-world limit limit-1 . 2.2.1a1 - 2021-11-30 # Added # Concurrency limiter dependency (in a similar style to cooldowns). disable_bucket method to the in-memory concurrency and cooldown manager impls. any_checks / with_any_checks and all_checks / with_all_checks functions for more garnular check flow control. any_checks passes if any of the provided checks pass and all_checks passes if all the provided checks pass while both ensure the checks are run sequentially rather than concurrently. as_slash_command , as_message_command and as_message_command_group now support decorating Command instances. Changed # cached_inject and cache_callback now both accept float and int seconds for expire_after . Owners.__init__ now accepts float and int seconds for expire_after . Renamed tanjun.dependencies.owners.OwnerCheck and tanjun.dependencies.owners.AbstractOwnerCheck to Owners and AbstractOwners respectively. InMemoryConcurrencyLimiter.set_bucket 's parameters are now positional only. Updated application command name and option name checking to allow for all unicode \\w characters rather than just ASCII. @with_parser now errors if a parser is already set. with_option and with_argument command parser decorators now implicitly set shlex parser if not set. Removed # TanjunWarning and StateWarning . 2.2.0a1 - 2021-11-23 # Added # Upgraded is_alive attribute to the Client abstract interface. Upgraded clear_application_commands , declare_global_commands , declare_slash_command and declare_slash_commands to the Client abstract interface. Client.dispatch_client_callback and ClientCallbackNames to the abstract interface. Client and Component are now bound to a specific event loop with said loop being exposed by a loop property. BaseSlashCommand.tracked_command . Upgraded load_modules , unload_modules and reload_modules to the Client abstract interface. Component.make_loader shorthand method for making a module loader and unloader for a component. tanjun.abc.ClientLoader to make loaders more standard and easier to custom implement. Command cooldowns. Changed # Renamed Client.clear_commands to Client.clear_application_commands . Renamed declare_slash_command and declare_slash_commands to declare_application_command and declare_application_commands respectively. Renamed Client.detect_commands to Client.load_from_scope . Restructured LoadableProtocol for re-use in Client.load_from_scope and rename to ComponentLoader . Fixed # Don't include the \"tracked command ID\" in slash command group builders as this leads to mis-matching ID errors while declaring. Removed # BaseSlashCommand.tracked_command_id is no-longer used in command builders and cannot passed to as_slash_command , slash_command_group , SlashCommand.__init__ and SlashCommandGroup.__init__ as command_id anymore. load_from_attributes behaviour from the standard Component implementation. 2.1.4a1 - 2021-11-15 # Added # injecting.SelfInjectingCallback and tanjun.as_self_injecting to let users make a callback self-injecting by linking it to a client instance. This should make it easier to use Tanjun's dependency injection externally. Dependency injection support for hook callbacks. voice property to Context and Client. Component.detect_commands for auto-loading commands from the current scope. delete_after option to context response methods. expires_at property to SlashContext. Changed # Hooks can now contain multiple callbacks per hook type. load_from_attributes now defaults to False in Component.__init__ . Fixed # SlashContext.respond trying to edit in the initial response instead of create a follow up if a deferred initial response was deleted. Removed # injecting.BaseInjectableCallback and other private extensions of this as these cases could easily be achieved with SelfInjectingCallback and CallbackDescriptor . 2.1.3a1 - 2021-11-02 # Added # tanjun.dependencies.inject_lc(Type) which is a shorthand for tanjun.injected(callback=tanjun.make_lc_resolver(Type)) . tanjun.dependencies.cached_inject(...) which is a shorthand for tanjun.injected(callback=tanjun.cache_callback(...)) . tanjun.inject which is identical to tanjun.injecting.injected but does not replace it. Changed # Added USE_EXTERNAL_STICKERS to DM permissions. Client.listeners now returns a sequence of callbacks rather than descriptors. Fixed # Removed cache_callback from injecting.pyi. Some bodged logging calls in declare_slash_commands which weren't providing the right amont of format args. Options not being sorted for slash commands within a command group. Stop shlex from treating stuff after a # as a comment. 2.1.2a1 - 2021-10-15 # Added # Client.iter_commands , Client.iter_message_commands and Client.iter_slash_commands . Ephemeral default is now applicable at a client and component level with it defaulting to None on components, this will propagate down from the client to the command being executed with each level having the option to override its state or leave it as is. OwnerCheck now relies on a standard dependency (which can easily be overridden) for its actual logic. Changed # SlashCommand's ephemeral default now defaults to None indicating that the parent entity's state should be used. Check functions such as nsfw_check , sfw_check , dm_check , guild_check have been replaced with check classes (NsfwCheck, SfwCheck, DmCheck, GuildCheck). Renamed ApplicationOwnerCheck to OwnerCheck . Renamed OwnPermissionsCheck to OwnPermissionCheck . Moved cache_callback from tanjun.injecting to tanjun.dependencies . Deprecated # Passing Iterable[tuple[str, value]] as choices to the slash command options has been deprecated in favour of Mapping[str, value]. Fixed # MessageContext not being passed to the prefix getter as the only positional argument. Client.remove_component_by_name . Removed # tanjun.abc.ExecutableCommand.execute and check_context as this doesn't work typing wise. This doesn't effect the implementations nor full command types. Base PermissionsCheck class. 2.1.1a1 - 2021-10-09 # Added # ShlexParser.add_option and add_argument methods which mirror the behaviour of with_option and with_argument Fluent interface coverage has been increased to now include remove methods and parsing interfaces. Support for specifying which channel types you want with slash channel type options. custom_ids argument to both Client.declare_global_commands , Client.__init__ and Client.declare_slash_commands to allow specifying the IDs of commands which are being updated. Client.remove_component_by_name and get_component_by_name . Client.unload_modules and Client.reload_modules to unload and reload from modules which also declare a unloader. tanjun.as_unloader decorator to enable declaring unloaders for modules. Let a Sequence of guild ids/objects be passed for Client.__init__ 's declare_global_commands parameter (although custom_ids isn't supported in this instance). Client now enforces that all registered component names are unique within the client. Changed # Bumped minimum hikari version to 2.0.0.dev103. The default parser error handler is now set as Client.hooks (not Client.message_hooks) meaning that it runs for all commands not just message commands. Replace conversion.ColorConverter and conversion.SnowflakeConverter with to_snowflake and to_color pure function implementations. Client.load_modules now errors if no loader descriptor is found. Deprecated # Calling set_tracked_command with a command ID. Passing command_id to SlashCommand.__init__ , SlashCommandGroup.__init__ , as_slash_command and as_slash_command_group . Renamed set_global_commands (both the Client method and init parameter) to declare_global_commands. Removed # add_converter and remove_converter from Parameter. the BaseConverter classes are no-longer included in conversion.__all__ meaning that they are no-longer documented. 2.1.0a1 - 2021-10-02 # Added # Adding an option to SlashCommand will now raise if the name is invalid (doesn't match the names regex). Validation to slash command classes. Special case type injector handling for the client itself. Changed # Breaking: Client.set_type_dependency now takes a literal value rather than a callback. Client.declare_slash_commands and Client.set_global_commands now check if the target resource's commands match the commands to be declared before actually declaring them unless force is set to True . This helps avoid issues with ratelimiting. Client level special cased type injectors are now handled as normal type injectors which are just implicitly set from the start. Client.load_modules now respects __all__ if present. Fixed # Small change to help MyPy better understand protocol behaviour. SlashContext.mark_not_found and cancel_defer are actually called if the command was not found in the REST flow. Removed # Client.add_type_dependency and Client.add_callback_override Special case type dependency methods have been removed/hidden. pass_as_kwarg option from slash command artificial member options as the always member constraint cannot be present without pass_as_kwarg behaviour. [2.0.1a1.post1] - 2021-09-26 # Fixed # Trailing : on a type: ignore comment which broke MyPy compatibility. 2.0.1a1 - 2021-09-25 # Added # Default client level message parser error handling hook. Component arguments to the relevant context create message methods. Changed # Bumped minimum Hikari version to 2.0.0.dev102. Consistently raise ValueError instead of LookupErrors in places where a value is being removed. Context.fetch_channel and Context.get_channel now return TextableChannel and TextableGuildChannel respectively. Fixed # Actually call Command.bind_client and bind_component in the component add command methods and specifically SlashCommand.bind_client in Component.bind_client . Return the command object from Component.with_command methods . Automatic deferral is now also cancelled in SlashContext.create_initial_response . SlashContext.edit_last_response can now be used to edit a deferred response. Small typing fixes made while setting pyright to strict. Removed # suppress_exceptions from Client.dispatch_client_callback cause it was poorly implemented and didn't make sense. 2.0.0a4 - 2021-09-17 # Added # expire_after argument to tanjun.injecting.cached_callback . snowflake \"search\" functions and from_datetime to conversion. the snowflake \"parse\" methods are now exported by conversion. BaseConverter.requires_cache and cache_components properties + check_client method to allow for warning if a converter might not run as expected under the provided client (e.g. intent or state issues). Changed # renamed \"conversion.parse_datetime\" to \"conversion.to_datetime\". Client.__init__ now allows hikari.SnowflakeishOr[hikari.PartialGuild] | None for set_global_commands. Removed # BaseConverter.bind_client, bind_component, get_from_type, implementations, cache_bound, is_inheritable and types methods/properties as these were part of an old system which assumed these would be inferred from types which is no longer the case. Fixed # A failed startup set global commands call will no longer lead to it retrying on the next startup. Component level check errors not being caught when executing interactions. The internal state for whether a SlashContext has had it's initial response made or not not being set by SlashContext.mark_not_found. Client.on_interaction_create_request not awaiting the client level checks. [2.0.0a3.post1] - 2021-09-11 # Changed # Client.add_listener is now fluent. Fixed # Bug around registering wrapped listeners where Hikari doesn't allow async callable objects to be registered. 2.0.0a3 - 2021-09-10 # Added # Add always_float keyword argument to with_float_slash_option. SlashContext.options mapping plus a resolvable option type to allow for more easily getting slash command options without relying on passed keyword arguments. Automatic type injector special casing for components and commands within a command context. Split up tanjun.commands.SlashCommand.add_option into specific methods. Add pass_as_kwarg keyword argument to with slash option decorators with True default. Changed # Renamed Client.__init__ \"shard\" arg to \"shards\". Annotate implimation functions/properties which return collections as returning collections.abc.Collection instead of their implemation specific subclass of Collcetion. Standard checks now have the same defaults as their with_* counterparts. Fixed # Bug around checks not being respected if they returned False. Client level check errors not being caught during execution. Don't erroneously dispatch message command not found callbacks when a component's execution returns true Don't fall back to normal command search in \"strict\" components and message command groups. Edit the command if command_id is passed to declare_slash_command instead of creating a new command. Missing call to checks in interaction request handler logic. Removed # Client.check_message_context and Component.check_message_context. tanjun.commands.SlashCommand.add_option. 2.0.0a2 - 2021-09-07 # Added # Float slash command option type. Component add and remove client callbacks. Event listeners are now loaded into Client by Components and support dependency injection. Add/with and remove listener methods had to be added to the Client to support this. Exported the parsing, commands and utilities modules on a top level (thus also adding them to the generated docs). Allow for overriding the standard client's context builders. Add default_permission argument to slash command types. Dependency injection support to client callbacks. Injection type special casing is more granular on a context to context basis now rather than top level hardcoded. Injection.Descriptor, TypeDescriptor and CallbackDescriptor replaced the Getter and InjectableValue classes. Changed # Component.listeners and Client.listeners now return Mapping[type[Event], Collection[Callback]]. Dependency injection on a lower level has been restructured to remove any reliance on tanjun.abc.Context. This means introducing an abstract injection context and implementing it with the standard context and a more basic impl. More strictly use properties instead of public instance variables in injection implementation. Dependency injection now caches the results of callbacks within the scope of an execution context. Renamed the InjectedValue classes to InjectedCallbacks. Return CallbackDescriptors from InjectionClient.get_type_dependency and get_callback_override instead of pure callbacks. Use Optional instead of UndefinedOr in injecting module where possible (e.g. the Injected callback and type fields). Process injected callbacks when they're first handled (passed to CallbackDescriptor) than when they're first called This lowers the amount of external caching needed. Deprecated # InjectionClient/Client .add_type_dependency and add_callback_override have been deprecated in favour of set_type_dependency and set_callback_override and are scheduled to be removed a month after v2.0.0a2 is released. Removed # injecting.Getter and injecting.InjectableValue. set_injector methods as the injection client is now passed around as part of a context. injection.resolve_getters (this logic is now on the descriptors). Fixed # Doc typo and export fixes. Fix handling of ctx.content and ctx.triggering_nameand in MessageCommandGroup to account for doubly nested command groups. Fix double-calling command group checks instead of calling the command group checks then the sub-command's check. 2.0.0a1 - 2021-08-30 # Added # For a TLDR of how Tanjun's interface looks after these changes see the examples https://github.com/FasterSpeeding/Tanjun/blob/v2.0.0a1/examples/ Full slash command functionality, this includes new decorators for setting slash command specific options and slash command + command group declaration and execution. Some examples of this may be found at https://github.com/FasterSpeeding/Tanjun/blob/v2.0.0a1/examples/slash_component.py Dependency injection, this feature is in it's early days and under documented but is still partially documented by the examples at https://github.com/FasterSpeeding/Tanjun/blob/v2.0.0a1/examples/ . For now this only covers command callback, check (on both commands and components) and converter execution plus calls to the prefix getter functions (since it's limited to calls which take a Context for the initial implementation). Increased test and documentation coverage. The ability to set a custom prefix getter function. More extensive examples. REST fallbacks to the standard converters where possible. A flag for setting which message commands the standard client should accept for execution. Client callback functions to allow for better integration between hikari's RESTBot and GatewayBot plus collecting runtime metadata. Proxy methods and properties to the Context abcs to allow for calls when using the base Context abc. State tracking to Context to allow for similar functionality between the slash and message command flows when it comes to dealing with responses (e.g. initial and last response logic). Introduced a proper nox framework for running checks and CI tasks. error_message and half_execution arguments to the standard checks to allow commands to more granularly define the behaviour for when they fail plus default them to having them send an error message when they fail if they were added to a command through a decorator call as this works better with the slash command flow and is better UX (a response explaining why it didn't work is better than no response). Changed # Move away from enforcing subclassing behaviour in-favour of builder objects ~~you can still use subclassing behaviour in places but don't tell anybody I told you that~~. Consistency fix by ensuring functions are always called \"callback\". Renamed tanjun.traits to tanjun.abc . Replaced strategy of inferring other hikari client traits from the first arg parsed to Client.__init__ with having the init explicitly take in each trait it needs as a separate argument while having shortcut from_gateway_bot and from_rest_bot classmethods for building the standard client from hikari's \"bot\" traits. Only default to setting set_human_only(True) in Client.from_gateway_bot . API overhall around commands and context, this involved making a lot of classes and type hints generic to allow for the slash context and message context to be interchaingable under the right circumstances. Made the callback signatures more generic for commands and converters to allow for implementations to introduce features like dependency injection. Replaced MYPY with pyright as the standard type checker. Switch over to relative imports. Switched over to just importing the top level hikari module when possible to simplify imports. Moved the project metadata duner properties direcltly to tanjun (from tanjun.about.py ). Switched over to pdoc from pdoc3 for doc generation. Switched away from setuptools to pep 621 with flit for defining the library and it's metadata (including requirements). Fixed # Fix some bugs with the standard checks. Removed # A lot of impl specific setting and with methods from the abstract interfaces to avoid leaking impl detail. Support for python 3.8 in-order to switch over to using collection.abc generic classes due to this being more forward compatible.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#added","text":"Slash command specific tanjun.annotations.InteractionChannel and tanjun.annotations.InteractionMember types for annotation parsing. Exposed non-decorator version of with_annotated_args at tanjun.annotations.parse_annotated_args . This comes with the added functionality of letting you directly pass slash command option descriptions to the callback via the descriptions argument (instead of putting strings in annotations).","title":"Added"},{"location":"changelog/#changed","text":"tanjun.annotations.with_annotated_args will now raise if a slash command-specific type is used for a required message command parameter.","title":"Changed"},{"location":"changelog/#2100a1-2022-11-24","text":"","title":"2.10.0a1 - 2022-11-24"},{"location":"changelog/#added_1","text":"Support for message commands to tanjun.annotations.TheseChannels . allowed_types field to tanjun.conversion.ToChannel to allow narrowing the allowed channel types for a message command option. Support for toggleable case-insensitive message command name handling.","title":"Added"},{"location":"changelog/#fixed","text":"The hot reloader will no-longer retry to reload a module being targeted through a system path ( pathlib.Path ) after one of its unloaders raises or finding out it has no unloaders. Allow passing hikari.GuildThreadChannel derived types (+ hikari.InteractionChannel ) to TheseChannels , and to the types field of with_channel_slash_option and SlashCommand.add_channel_option . The spacing in triggering_name is now properly normalised for message commands in groups to ensure only 1 space. This also fixes cases where names were being smashed together without any spaces. The hot reloader trying to declare commands multiple times. Actually set the attached component for commands within slash-command groups. Process converters attached to commands within slash-command groups to log for client misconfiguration.","title":"Fixed"},{"location":"changelog/#290a1-2022-11-08","text":"","title":"2.9.0a1 - 2022-11-08"},{"location":"changelog/#added_2","text":"Added bot_managed argument to Client.from_gateway_bot for automatically starting the client when the linked REST bot starts. This defaults to False for backwards compatibility. Thread support (including a SfCache[hikari.GuildThreadChannel] concept).","title":"Added"},{"location":"changelog/#changed_1","text":"Bumped the minimum Hikari version to 2.0.0.dev112 . SfCache[hikari.GuildChannel] is now SfCache[hikari.PermissibleGuildChannel] . Allow None to be passed for attachment and attachments to edit response methods.","title":"Changed"},{"location":"changelog/#fixed_1","text":"The ToChannel / to_channel converter now correctly uses the registered async channel cache if set.","title":"Fixed"},{"location":"changelog/#removed","text":"The project metadata dunder attributes from tanjun . importlib.metadata should be used to get this metadata instead. replace_attachments argument from the relevant context edit response methods. For more information see https://github.com/hikari-py/hikari/releases/tag/2.0.0.dev112 .","title":"Removed"},{"location":"changelog/#281a1-2022-10-24","text":"","title":"2.8.1a1 - 2022-10-24"},{"location":"changelog/#changed_2","text":"No longer ignore delete_after for ephemeral responses.","title":"Changed"},{"location":"changelog/#280a1-2022-10-16","text":"","title":"2.8.0a1 - 2022-10-16"},{"location":"changelog/#added_3","text":"Support for specifying min_length and max_length for slash command string options. Support for specifying min_length and max_length for message command parsing options with either no converters or converters which result in a collections.abc.Sized compatible value. Support for specifying the length of a string argument in annotation command declaration through tanjun.annotations.Length . AutocompleteContext.triggering_name which acts like Context.triggering_name . Support for localising check responses for application command contexts, and slash command + context menu declarations (names and descriptions). More information on how this works can be found in localisation .","title":"Added"},{"location":"changelog/#changed_3","text":"Bumped the minimum Hikari version to 2.0.0.dev111 . Bumped the minimum Alluka version to 0.1.2 . tanjun.dependencies.HotReloader.add_to_client now returns None .","title":"Changed"},{"location":"changelog/#fixed_2","text":"Make tanjun.commands.slash.SlashCommandGroup.as_sub_command 's typing more flexible to allow decorating other command objects. tanjun.context.slash.SlashContext.triggering_name now returns the full triggering command name for sub-commands instead of just the top level command's name. Optimise tanjun.checks.OwnPermissionCheck to use context.app_permissions instead of calculating the bot's permissions for context menu command calls.","title":"Fixed"},{"location":"changelog/#removed_1","text":"The generic value field from BaseConverter .","title":"Removed"},{"location":"changelog/#270a1-2022-09-24","text":"","title":"2.7.0a1 - 2022-09-24"},{"location":"changelog/#added_4","text":"Support for marking positional message arguments as optional when using annotation parsing. tanjun.annotations.Default for setting the default for an argument while leaving the actual parameter required.","title":"Added"},{"location":"changelog/#changed_4","text":"tanjun.annotations.Flag will no longer unset any previously set aliases.","title":"Changed"},{"location":"changelog/#deprecated","text":"tanjun.annotations.Flag.default and the default argument for tanjun.annotations.Flag. init . tanjun.annotations.Default should be used instead.","title":"Deprecated"},{"location":"changelog/#fixed_3","text":"Don't ignore parameter annotations when the top-level type-hint is a union.","title":"Fixed"},{"location":"changelog/#263a1-2022-09-17","text":"","title":"2.6.3a1 - 2022-09-17"},{"location":"changelog/#added_5","text":"follow_wrapped parameter to Component.with_command . MessageCommandGroup.as_sub_command , MessageCommandGroup.as_sub_group , SlashCommandGroup.as_sub_command and SlashCommandGroup.make_sub_group shorthand methods for creating sub-command and sub-command-groups directly on groups. Client.set_interaction_accepts for configuring which interaction types a client should listen for and execute.","title":"Added"},{"location":"changelog/#changed_5","text":"Client.set_message_accepts now raises a RuntimeError if called while the client is running to ensure consistent behaviour.","title":"Changed"},{"location":"changelog/#removed_2","text":"The broken add_injector argument from tanjun.clients.Client.add_component .","title":"Removed"},{"location":"changelog/#262a1-2022-09-05","text":"","title":"2.6.2a1 - 2022-09-05"},{"location":"changelog/#added_6","text":"tanjun.abc.Client.load_directory and tanjun.abc.Client.load_directory_async for loading all the modules in a directory. path properties to tanjun.errors.FailedModuleLoad and tanjun.errors.FailedModuleUnload to indicate which module failed to load/unload. tanjun.errors.FailedModuleImport specialisation of tanjun.errors.FailedModuleLoad for differentiating between the two cases when necessary.","title":"Added"},{"location":"changelog/#261a1-2022-08-29","text":"","title":"2.6.1a1 - 2022-08-29"},{"location":"changelog/#added_7","text":"follow_wrapped argument to the with check and with limiter decorators to allow for applying the limiter/check to all the commands in a decorator chain (in a similar fashion to how with_parsed_annotations behaves. Hot module reloading as a bot development aid.","title":"Added"},{"location":"changelog/#changed_6","text":"tanjun.ModuleMissingUnloaders is now raised by client.unload_modules , client.reload_modules and client.reload_modules_async when the stored module has no unloaders instead of tanjun.ModuleMissingLoaders . hikari.api.special_endpoints.CommandBuilder can also be included in the list passed to Client.declare_application_commands 's first arg now.","title":"Changed"},{"location":"changelog/#changed_7","text":"Moved permissions functions to tanjun.permissions while keeping deprecated aliases in the now deprecated module tanjun.utilities .","title":"Changed"},{"location":"changelog/#fixed_4","text":"Inherit the global states for default_member_permissions and is_dm_enabled in declare_application_command .","title":"Fixed"},{"location":"changelog/#254a1-2022-08-11","text":"","title":"2.5.4a1 - 2022-08-11"},{"location":"changelog/#added_8","text":"V2 application permissions and dms_enabled config to slash and menu commands. Signature name validation for command options. wrapped_command properties to tanjun.SlashCommand , tanjun.MessageCommand and tanjun.MenuCommand for interospecting wrapped commands. key argument to the add_{}_slash_option methods and with_{}_slash_option functions to allow the argument's name in the callback's signature to be different from the option's declared name. Signature type-hint based command option declaration for both message and slash commands. More information about this can be found in tanjun.annotations . Allow multiple events to be passed to Client.with_listener / Component.with_listener in one call.","title":"Added"},{"location":"changelog/#changed_8","text":"If no events are passed to Client.with_listener / Component.with_listener it will now try to infer the event type(s) from the callback's type-hints.","title":"Changed"},{"location":"changelog/#fixed_5","text":"Slash command parent command tracking.","title":"Fixed"},{"location":"changelog/#253a1-2022-07-04","text":"","title":"2.5.3a1 - 2022-07-04"},{"location":"changelog/#added_9","text":"Support for sending attachments with Context.respond , CommandError and SlashContext.create_initial_response .","title":"Added"},{"location":"changelog/#changed_9","text":"Allow as_loader and as_unloader to be used as decorators while passing keyword-arguments. Bumped minimum Hikari version to 2.0.0.dev109 .","title":"Changed"},{"location":"changelog/#fixed_6","text":"Allow for implicitly passing an embed or component as content when creating the initial response for an application command as a REST server to match the documented behaviour. The \"all_checks\" check failing on calls with DI.","title":"Fixed"},{"location":"changelog/#252a1-2022-05-16","text":"","title":"2.5.2a1 - 2022-05-16"},{"location":"changelog/#added_10","text":"error option to the standard checks and limiters to allow setting a callback which generates a custom error. AbstractSchedule.force_stop which immediately stops the tasks without waiting and is sync.","title":"Added"},{"location":"changelog/#changed_10","text":"The cooldown limiter now uses Discord's timestamp format in its default error messages. AbstractCooldownManager.check_cooldown now returns a datetime.datetime instead of a float . halt_execution now takes priority over error_message when configuring checks. The REST strategies for interaction handling now cancel the response future if the execution task ends before it's set to avoid dangling waiting tasks. Command interaction handling now cancels auto-deferral if the command execution task finishes before a response is given. AbstractSchedule.stop is now async.","title":"Changed"},{"location":"changelog/#fixed_7","text":"Some edge cases where closing schedule(s) may lead to futures being erroneously cancelled.","title":"Fixed"},{"location":"changelog/#251a1-2022-05-02","text":"","title":"2.5.1a1 - 2022-05-02"},{"location":"changelog/#added_11","text":"A send method to CommandError which can be overridden to customise its response behaviour. Support for other create message arguments to CommandError .","title":"Added"},{"location":"changelog/#changed_11","text":"Renamed CommandError.message to .content .","title":"Changed"},{"location":"changelog/#fixed_8","text":"Allowed a type of bool (not a literal) to be passed to ensure_result typing wise. Some edge cases in the weekly schedule increment handling logic. Long running delete_after and command execution tasks will no-longer be cancelled by GC.","title":"Fixed"},{"location":"changelog/#removed_3","text":"default_permission options for slash commands as command permissions V2 broke and deprecated this. AutocompleteOption as a lot of the promises this makes aren't realistic. AutocompleteContext.options and AutocompleteContext.focused now use hikari.AutocompleteInteractionOption .","title":"Removed"},{"location":"changelog/#250a1-2022-04-11","text":"","title":"2.5.0a1 - 2022-04-11"},{"location":"changelog/#added_12","text":"Time based async scheduler.","title":"Added"},{"location":"changelog/#changed_12","text":"Bumped minimum hikari version to 2.0.0.dev108. Use None as the default for max_value and min_value in parsing.py . The interval schedule no-longer calls its main callback when it's started.","title":"Changed"},{"location":"changelog/#fixed_9","text":"The interval schedule now explicitly prints tracebacks instead of leaving them to asyncio's handler; this avoids relying on Asyncio detail which would wait until the Event is gc'ed to print the traceback.","title":"Fixed"},{"location":"changelog/#removed_4","text":"AbstractSchedule.iteration_count (note, this property still exists on IntervalSchedule ).","title":"Removed"},{"location":"changelog/#243a1-2022-03-12","text":"","title":"2.4.3a1 - 2022-03-12"},{"location":"changelog/#added_13","text":"Slash command \"attachment\" options.","title":"Added"},{"location":"changelog/#242a1-2022-03-04","text":"","title":"2.4.2a1 - 2022-03-04"},{"location":"changelog/#fixed_10","text":"Add weakref slot to BaseConverter to improve standard converter compatibility with Alluka. Type compatibility with InteractionMessageBuilder when making the initial response as a REST bot. No longer duplicate embeds on slash create initial response for REST bots. has_responded is now only set to True for slash command contexts after the create_initial_response passes, avoiding issues where error logic calling ctx.respond after a call to create_initial_response failed would try to create a followup and 404. Further resolve Paths in module loading logic: User relative paths ( ~ ) can now be passed. It now normalises path (so separators), avoiding the same path but with different separators being registered multiple times. It now normalises symlinks, avoiding the same module being registered multiple times through different symlinks.","title":"Fixed"},{"location":"changelog/#241a1-2022-02-25","text":"","title":"2.4.1a1 - 2022-02-25"},{"location":"changelog/#added_14","text":"Alluka's dependency injection interface(s) have been upgraded to the standard Client interface and Context interfaces. Standard message converter.","title":"Added"},{"location":"changelog/#changed_13","text":"Coroutine is now used instead of Awaitable for callback signature return types to account for refactors made to DI logic in Alluka. The dependency injection implementation has been moved to https://github.com/FasterSpeeding/Alluka and any new DI features may be indicated there rather than on Tanjun's (Note, DI is still supported) changelog. Callbacks with invalid dependency injection declarations (are declaring a positional-only argument as needing DI) now won't error until they're called with DI.","title":"Changed"},{"location":"changelog/#fixed_11","text":"Duplication detection while checking for commands with overlapping names on declare. Relaxed menu command name validation to allow special characters and mixed cases.","title":"Fixed"},{"location":"changelog/#removed_5","text":"tanjun.injecting.TypeDescriptor and tanjun.injecting.CallbackDescriptor as these couldn't be kept through the Alluka refactor. needs_injection attributes.","title":"Removed"},{"location":"changelog/#deprecated_1","text":"tanjun.injecting now only consists of deprecated aliases to Alluka types, with the only tanjun.inject and tanjun.injected being left as not deprecated for the sake of ease of use.","title":"Deprecated"},{"location":"changelog/#240a1-2022-02-11","text":"","title":"2.4.0a1 - 2022-02-11"},{"location":"changelog/#added_15","text":"ephemeral keyword-argument to SlashContext 's create_initial_response , create_follow_up and defer methods as a shorthand for including 1 << 6 in the passed flags. Context menu command support. Slash command autocomplete support. shard is now a property on all contexts.","title":"Added"},{"location":"changelog/#changed_14","text":"ShlexParser no-longer treats ' as a quote. Command objects can now be passed directly to SlashCommand.__init__ and MessageCommand.__init__ . The search snowflake conversion functions now return lists of snowflakes instead of iterators. tanjun.components has been split into a directory of the same name with the structure tanjun.components.slash , tanjun.components.message , tanjun.components.base and tanjun.components.menu . tanjun.commands has been split into a directory of the same name with the structure tanjun.commands.slash , tanjun.commands.message , tanjun.commands.base and tanjun.commands.menu . Bumped the minimum hikari version to hikari~=2.0.0.dev106 .","title":"Changed"},{"location":"changelog/#fixed_12","text":"False-positive cache warnings from the standard converters. Mishandled edge cases for to_color. Mishandling of greedy arguments as reported by #200","title":"Fixed"},{"location":"changelog/#231a1-2022-01-27","text":"","title":"2.3.1a1 - 2022-01-27"},{"location":"changelog/#added_16","text":"SlashContext.boolean , SlashContext.float , SlashContext.integer , SlashContext.snowflake and SlashContext.string methods as short hands for asserting the option type and ensuring type safety. A MessageParser standard abc. Client.set_metadata , Component.set_metadata and ExecutableCommand.set_metadata fluent methods to allow for chaining metadata setting. Complementary Client.load_modules_async and Client.reload_modules_async methods which execute blocking file access operations in asyncio's threadpool executor. The module load, unload and reload methods now raise FailedModuleLoad and FailedModuleUnload to relay errors raised by the target module or its (un)loaders. max_value and min_value options for message command option parser options and arguments.","title":"Added"},{"location":"changelog/#changed_15","text":"SlashContext.value now returns hikari.Snowflake for object IDs. reload_modules will now try to rollback a module if it failed to load before raising and avoid trying to reload a module all together if no loaders or unloaders are found.","title":"Changed"},{"location":"changelog/#fixed_13","text":"Context.get_channel no longer raises an assertion error if the cache returns None . Schedules are now stopped if they are removed from a component while active. Schedules will no-longer raise a RuntimeError while closing a component if they were stopped before before hand.","title":"Fixed"},{"location":"changelog/#230a1-2022-01-13","text":"","title":"2.3.0a1 - 2022-01-13"},{"location":"changelog/#added_17","text":"Scheduled callback interface and interval implementation to the standard component implementation. always_defer option to slash commands (not including groups). tanjun.MessageCommand is now callable like tanjun.SlashCommand . MessageContext.respond is now typed as allowing bool for the reply argument. min_value and max_value option for int and float slash command options.","title":"Added"},{"location":"changelog/#changed_16","text":"Bumped the minimum hikari version to hikari~=2.0.0.dev105. delete_after is now ignored for ephemeral responses instead of leading to a 404. Renamed the standard conversion classes to fit the naming convention To{Type} (while leaving the old names in as deprecated aliases) + added them to doc coverage/ conversion.__all__ by their new names.","title":"Changed"},{"location":"changelog/#fixed_14","text":"The client level ephemeral default is now respected for REST-based slash command execution. The client now waits until a component has been closed before \"unbinding\" it when the component is removed from an active client. This should fix previous behaviour where trying to remove a component from an active client would lead to an error being raised.","title":"Fixed"},{"location":"changelog/#removed_6","text":"Redundant checks, hooks and metadata keyword-arguments from the standard MessageCommand , MessageCommandGroup , SlashCommandGroup and SlashCommand implementations' __init__ s; these should be set using methods/decorators. Redundant hook and check keyword-arguments from the standard Client impl; these should be set using methods. The use of star imports in tanjun.__init__ and tanjun.dependencies.__init__ meaning that now only the documented types and attributes for these modules (whatever's in the __all__ ) may be accessed directly on them now. tanjun.MessageContext , tanjun.SlashContext and tanjun.Context are no-longer exported on the top level as in most cases their abc equivalent should be used.","title":"Removed"},{"location":"changelog/#223a1-2022-01-06","text":"","title":"2.2.3a1 - 2022-01-06"},{"location":"changelog/#added_18","text":"The interface for a generic (type-based) asynchronous cache dependency. While this doesn't introduce any new implementation(s), this interface has been integrated into Tanjun (based on Hikari types) in places which are currently making cache/REST calls and can be used to better integrate 3rd-party caches with Tanjun. Redis based implementations of this for the types found in Hikari's gateway cache interface can be found in hikari-sake >=v1.0.1a1 (exposed by RedisResource.add_to_tanjun ).","title":"Added"},{"location":"changelog/#removed_7","text":"BaseConverter.convert in-favour of having each standard converter directly implement __call__ . tanjun.conversion.InjectableConverter . InjectionContext.get_type_special_case in favour of a get_type_dependency method which tries the context's client before returning the special case if registered.","title":"Removed"},{"location":"changelog/#222a1-2021-12-26","text":"","title":"2.2.2a1 - 2021-12-26"},{"location":"changelog/#added_19","text":"Type based dependency injection now has ergonomic Union support. This means that for inject(type=Union[A, B, C]) / inject(type=A | B | C) the dependency injector will try to find registered type injectors for A , B then C after trying to find a dependency injector for the literal Union. Type based dependency injection now has support for defaults through unions with None and Optional . This means that, for inject(type=Union[A, B, None]) / inject(type=A | B | None) and inject(type=Optional[A]) , if no registered implementations are found for the relevant types then None will be injected for the relevant argument.","title":"Added"},{"location":"changelog/#changed_17","text":"Message command parser arguments are now passed by keyword instead of positionally. Cooldown checks can now run without a present AbstractOwners implementation.","title":"Changed"},{"location":"changelog/#fixed_15","text":"The cooldown manager now increments the internal counter after checking for cooldown rather than before. The old behaviour resulted in the last valid call to a bucket being ratelimited therefore essentially making the real-world limit limit-1 .","title":"Fixed"},{"location":"changelog/#221a1-2021-11-30","text":"","title":"2.2.1a1 - 2021-11-30"},{"location":"changelog/#added_20","text":"Concurrency limiter dependency (in a similar style to cooldowns). disable_bucket method to the in-memory concurrency and cooldown manager impls. any_checks / with_any_checks and all_checks / with_all_checks functions for more garnular check flow control. any_checks passes if any of the provided checks pass and all_checks passes if all the provided checks pass while both ensure the checks are run sequentially rather than concurrently. as_slash_command , as_message_command and as_message_command_group now support decorating Command instances.","title":"Added"},{"location":"changelog/#changed_18","text":"cached_inject and cache_callback now both accept float and int seconds for expire_after . Owners.__init__ now accepts float and int seconds for expire_after . Renamed tanjun.dependencies.owners.OwnerCheck and tanjun.dependencies.owners.AbstractOwnerCheck to Owners and AbstractOwners respectively. InMemoryConcurrencyLimiter.set_bucket 's parameters are now positional only. Updated application command name and option name checking to allow for all unicode \\w characters rather than just ASCII. @with_parser now errors if a parser is already set. with_option and with_argument command parser decorators now implicitly set shlex parser if not set.","title":"Changed"},{"location":"changelog/#removed_8","text":"TanjunWarning and StateWarning .","title":"Removed"},{"location":"changelog/#220a1-2021-11-23","text":"","title":"2.2.0a1 - 2021-11-23"},{"location":"changelog/#added_21","text":"Upgraded is_alive attribute to the Client abstract interface. Upgraded clear_application_commands , declare_global_commands , declare_slash_command and declare_slash_commands to the Client abstract interface. Client.dispatch_client_callback and ClientCallbackNames to the abstract interface. Client and Component are now bound to a specific event loop with said loop being exposed by a loop property. BaseSlashCommand.tracked_command . Upgraded load_modules , unload_modules and reload_modules to the Client abstract interface. Component.make_loader shorthand method for making a module loader and unloader for a component. tanjun.abc.ClientLoader to make loaders more standard and easier to custom implement. Command cooldowns.","title":"Added"},{"location":"changelog/#changed_19","text":"Renamed Client.clear_commands to Client.clear_application_commands . Renamed declare_slash_command and declare_slash_commands to declare_application_command and declare_application_commands respectively. Renamed Client.detect_commands to Client.load_from_scope . Restructured LoadableProtocol for re-use in Client.load_from_scope and rename to ComponentLoader .","title":"Changed"},{"location":"changelog/#fixed_16","text":"Don't include the \"tracked command ID\" in slash command group builders as this leads to mis-matching ID errors while declaring.","title":"Fixed"},{"location":"changelog/#removed_9","text":"BaseSlashCommand.tracked_command_id is no-longer used in command builders and cannot passed to as_slash_command , slash_command_group , SlashCommand.__init__ and SlashCommandGroup.__init__ as command_id anymore. load_from_attributes behaviour from the standard Component implementation.","title":"Removed"},{"location":"changelog/#214a1-2021-11-15","text":"","title":"2.1.4a1 - 2021-11-15"},{"location":"changelog/#added_22","text":"injecting.SelfInjectingCallback and tanjun.as_self_injecting to let users make a callback self-injecting by linking it to a client instance. This should make it easier to use Tanjun's dependency injection externally. Dependency injection support for hook callbacks. voice property to Context and Client. Component.detect_commands for auto-loading commands from the current scope. delete_after option to context response methods. expires_at property to SlashContext.","title":"Added"},{"location":"changelog/#changed_20","text":"Hooks can now contain multiple callbacks per hook type. load_from_attributes now defaults to False in Component.__init__ .","title":"Changed"},{"location":"changelog/#fixed_17","text":"SlashContext.respond trying to edit in the initial response instead of create a follow up if a deferred initial response was deleted.","title":"Fixed"},{"location":"changelog/#removed_10","text":"injecting.BaseInjectableCallback and other private extensions of this as these cases could easily be achieved with SelfInjectingCallback and CallbackDescriptor .","title":"Removed"},{"location":"changelog/#213a1-2021-11-02","text":"","title":"2.1.3a1 - 2021-11-02"},{"location":"changelog/#added_23","text":"tanjun.dependencies.inject_lc(Type) which is a shorthand for tanjun.injected(callback=tanjun.make_lc_resolver(Type)) . tanjun.dependencies.cached_inject(...) which is a shorthand for tanjun.injected(callback=tanjun.cache_callback(...)) . tanjun.inject which is identical to tanjun.injecting.injected but does not replace it.","title":"Added"},{"location":"changelog/#changed_21","text":"Added USE_EXTERNAL_STICKERS to DM permissions. Client.listeners now returns a sequence of callbacks rather than descriptors.","title":"Changed"},{"location":"changelog/#fixed_18","text":"Removed cache_callback from injecting.pyi. Some bodged logging calls in declare_slash_commands which weren't providing the right amont of format args. Options not being sorted for slash commands within a command group. Stop shlex from treating stuff after a # as a comment.","title":"Fixed"},{"location":"changelog/#212a1-2021-10-15","text":"","title":"2.1.2a1 - 2021-10-15"},{"location":"changelog/#added_24","text":"Client.iter_commands , Client.iter_message_commands and Client.iter_slash_commands . Ephemeral default is now applicable at a client and component level with it defaulting to None on components, this will propagate down from the client to the command being executed with each level having the option to override its state or leave it as is. OwnerCheck now relies on a standard dependency (which can easily be overridden) for its actual logic.","title":"Added"},{"location":"changelog/#changed_22","text":"SlashCommand's ephemeral default now defaults to None indicating that the parent entity's state should be used. Check functions such as nsfw_check , sfw_check , dm_check , guild_check have been replaced with check classes (NsfwCheck, SfwCheck, DmCheck, GuildCheck). Renamed ApplicationOwnerCheck to OwnerCheck . Renamed OwnPermissionsCheck to OwnPermissionCheck . Moved cache_callback from tanjun.injecting to tanjun.dependencies .","title":"Changed"},{"location":"changelog/#deprecated_2","text":"Passing Iterable[tuple[str, value]] as choices to the slash command options has been deprecated in favour of Mapping[str, value].","title":"Deprecated"},{"location":"changelog/#fixed_19","text":"MessageContext not being passed to the prefix getter as the only positional argument. Client.remove_component_by_name .","title":"Fixed"},{"location":"changelog/#removed_11","text":"tanjun.abc.ExecutableCommand.execute and check_context as this doesn't work typing wise. This doesn't effect the implementations nor full command types. Base PermissionsCheck class.","title":"Removed"},{"location":"changelog/#211a1-2021-10-09","text":"","title":"2.1.1a1 - 2021-10-09"},{"location":"changelog/#added_25","text":"ShlexParser.add_option and add_argument methods which mirror the behaviour of with_option and with_argument Fluent interface coverage has been increased to now include remove methods and parsing interfaces. Support for specifying which channel types you want with slash channel type options. custom_ids argument to both Client.declare_global_commands , Client.__init__ and Client.declare_slash_commands to allow specifying the IDs of commands which are being updated. Client.remove_component_by_name and get_component_by_name . Client.unload_modules and Client.reload_modules to unload and reload from modules which also declare a unloader. tanjun.as_unloader decorator to enable declaring unloaders for modules. Let a Sequence of guild ids/objects be passed for Client.__init__ 's declare_global_commands parameter (although custom_ids isn't supported in this instance). Client now enforces that all registered component names are unique within the client.","title":"Added"},{"location":"changelog/#changed_23","text":"Bumped minimum hikari version to 2.0.0.dev103. The default parser error handler is now set as Client.hooks (not Client.message_hooks) meaning that it runs for all commands not just message commands. Replace conversion.ColorConverter and conversion.SnowflakeConverter with to_snowflake and to_color pure function implementations. Client.load_modules now errors if no loader descriptor is found.","title":"Changed"},{"location":"changelog/#deprecated_3","text":"Calling set_tracked_command with a command ID. Passing command_id to SlashCommand.__init__ , SlashCommandGroup.__init__ , as_slash_command and as_slash_command_group . Renamed set_global_commands (both the Client method and init parameter) to declare_global_commands.","title":"Deprecated"},{"location":"changelog/#removed_12","text":"add_converter and remove_converter from Parameter. the BaseConverter classes are no-longer included in conversion.__all__ meaning that they are no-longer documented.","title":"Removed"},{"location":"changelog/#210a1-2021-10-02","text":"","title":"2.1.0a1 - 2021-10-02"},{"location":"changelog/#added_26","text":"Adding an option to SlashCommand will now raise if the name is invalid (doesn't match the names regex). Validation to slash command classes. Special case type injector handling for the client itself.","title":"Added"},{"location":"changelog/#changed_24","text":"Breaking: Client.set_type_dependency now takes a literal value rather than a callback. Client.declare_slash_commands and Client.set_global_commands now check if the target resource's commands match the commands to be declared before actually declaring them unless force is set to True . This helps avoid issues with ratelimiting. Client level special cased type injectors are now handled as normal type injectors which are just implicitly set from the start. Client.load_modules now respects __all__ if present.","title":"Changed"},{"location":"changelog/#fixed_20","text":"Small change to help MyPy better understand protocol behaviour. SlashContext.mark_not_found and cancel_defer are actually called if the command was not found in the REST flow.","title":"Fixed"},{"location":"changelog/#removed_13","text":"Client.add_type_dependency and Client.add_callback_override Special case type dependency methods have been removed/hidden. pass_as_kwarg option from slash command artificial member options as the always member constraint cannot be present without pass_as_kwarg behaviour.","title":"Removed"},{"location":"changelog/#201a1post1-2021-09-26","text":"","title":"[2.0.1a1.post1] - 2021-09-26"},{"location":"changelog/#fixed_21","text":"Trailing : on a type: ignore comment which broke MyPy compatibility.","title":"Fixed"},{"location":"changelog/#201a1-2021-09-25","text":"","title":"2.0.1a1 - 2021-09-25"},{"location":"changelog/#added_27","text":"Default client level message parser error handling hook. Component arguments to the relevant context create message methods.","title":"Added"},{"location":"changelog/#changed_25","text":"Bumped minimum Hikari version to 2.0.0.dev102. Consistently raise ValueError instead of LookupErrors in places where a value is being removed. Context.fetch_channel and Context.get_channel now return TextableChannel and TextableGuildChannel respectively.","title":"Changed"},{"location":"changelog/#fixed_22","text":"Actually call Command.bind_client and bind_component in the component add command methods and specifically SlashCommand.bind_client in Component.bind_client . Return the command object from Component.with_command methods . Automatic deferral is now also cancelled in SlashContext.create_initial_response . SlashContext.edit_last_response can now be used to edit a deferred response. Small typing fixes made while setting pyright to strict.","title":"Fixed"},{"location":"changelog/#removed_14","text":"suppress_exceptions from Client.dispatch_client_callback cause it was poorly implemented and didn't make sense.","title":"Removed"},{"location":"changelog/#200a4-2021-09-17","text":"","title":"2.0.0a4 - 2021-09-17"},{"location":"changelog/#added_28","text":"expire_after argument to tanjun.injecting.cached_callback . snowflake \"search\" functions and from_datetime to conversion. the snowflake \"parse\" methods are now exported by conversion. BaseConverter.requires_cache and cache_components properties + check_client method to allow for warning if a converter might not run as expected under the provided client (e.g. intent or state issues).","title":"Added"},{"location":"changelog/#changed_26","text":"renamed \"conversion.parse_datetime\" to \"conversion.to_datetime\". Client.__init__ now allows hikari.SnowflakeishOr[hikari.PartialGuild] | None for set_global_commands.","title":"Changed"},{"location":"changelog/#removed_15","text":"BaseConverter.bind_client, bind_component, get_from_type, implementations, cache_bound, is_inheritable and types methods/properties as these were part of an old system which assumed these would be inferred from types which is no longer the case.","title":"Removed"},{"location":"changelog/#fixed_23","text":"A failed startup set global commands call will no longer lead to it retrying on the next startup. Component level check errors not being caught when executing interactions. The internal state for whether a SlashContext has had it's initial response made or not not being set by SlashContext.mark_not_found. Client.on_interaction_create_request not awaiting the client level checks.","title":"Fixed"},{"location":"changelog/#200a3post1-2021-09-11","text":"","title":"[2.0.0a3.post1] - 2021-09-11"},{"location":"changelog/#changed_27","text":"Client.add_listener is now fluent.","title":"Changed"},{"location":"changelog/#fixed_24","text":"Bug around registering wrapped listeners where Hikari doesn't allow async callable objects to be registered.","title":"Fixed"},{"location":"changelog/#200a3-2021-09-10","text":"","title":"2.0.0a3 - 2021-09-10"},{"location":"changelog/#added_29","text":"Add always_float keyword argument to with_float_slash_option. SlashContext.options mapping plus a resolvable option type to allow for more easily getting slash command options without relying on passed keyword arguments. Automatic type injector special casing for components and commands within a command context. Split up tanjun.commands.SlashCommand.add_option into specific methods. Add pass_as_kwarg keyword argument to with slash option decorators with True default.","title":"Added"},{"location":"changelog/#changed_28","text":"Renamed Client.__init__ \"shard\" arg to \"shards\". Annotate implimation functions/properties which return collections as returning collections.abc.Collection instead of their implemation specific subclass of Collcetion. Standard checks now have the same defaults as their with_* counterparts.","title":"Changed"},{"location":"changelog/#fixed_25","text":"Bug around checks not being respected if they returned False. Client level check errors not being caught during execution. Don't erroneously dispatch message command not found callbacks when a component's execution returns true Don't fall back to normal command search in \"strict\" components and message command groups. Edit the command if command_id is passed to declare_slash_command instead of creating a new command. Missing call to checks in interaction request handler logic.","title":"Fixed"},{"location":"changelog/#removed_16","text":"Client.check_message_context and Component.check_message_context. tanjun.commands.SlashCommand.add_option.","title":"Removed"},{"location":"changelog/#200a2-2021-09-07","text":"","title":"2.0.0a2 - 2021-09-07"},{"location":"changelog/#added_30","text":"Float slash command option type. Component add and remove client callbacks. Event listeners are now loaded into Client by Components and support dependency injection. Add/with and remove listener methods had to be added to the Client to support this. Exported the parsing, commands and utilities modules on a top level (thus also adding them to the generated docs). Allow for overriding the standard client's context builders. Add default_permission argument to slash command types. Dependency injection support to client callbacks. Injection type special casing is more granular on a context to context basis now rather than top level hardcoded. Injection.Descriptor, TypeDescriptor and CallbackDescriptor replaced the Getter and InjectableValue classes.","title":"Added"},{"location":"changelog/#changed_29","text":"Component.listeners and Client.listeners now return Mapping[type[Event], Collection[Callback]]. Dependency injection on a lower level has been restructured to remove any reliance on tanjun.abc.Context. This means introducing an abstract injection context and implementing it with the standard context and a more basic impl. More strictly use properties instead of public instance variables in injection implementation. Dependency injection now caches the results of callbacks within the scope of an execution context. Renamed the InjectedValue classes to InjectedCallbacks. Return CallbackDescriptors from InjectionClient.get_type_dependency and get_callback_override instead of pure callbacks. Use Optional instead of UndefinedOr in injecting module where possible (e.g. the Injected callback and type fields). Process injected callbacks when they're first handled (passed to CallbackDescriptor) than when they're first called This lowers the amount of external caching needed.","title":"Changed"},{"location":"changelog/#deprecated_4","text":"InjectionClient/Client .add_type_dependency and add_callback_override have been deprecated in favour of set_type_dependency and set_callback_override and are scheduled to be removed a month after v2.0.0a2 is released.","title":"Deprecated"},{"location":"changelog/#removed_17","text":"injecting.Getter and injecting.InjectableValue. set_injector methods as the injection client is now passed around as part of a context. injection.resolve_getters (this logic is now on the descriptors).","title":"Removed"},{"location":"changelog/#fixed_26","text":"Doc typo and export fixes. Fix handling of ctx.content and ctx.triggering_nameand in MessageCommandGroup to account for doubly nested command groups. Fix double-calling command group checks instead of calling the command group checks then the sub-command's check.","title":"Fixed"},{"location":"changelog/#200a1-2021-08-30","text":"","title":"2.0.0a1 - 2021-08-30"},{"location":"changelog/#added_31","text":"For a TLDR of how Tanjun's interface looks after these changes see the examples https://github.com/FasterSpeeding/Tanjun/blob/v2.0.0a1/examples/ Full slash command functionality, this includes new decorators for setting slash command specific options and slash command + command group declaration and execution. Some examples of this may be found at https://github.com/FasterSpeeding/Tanjun/blob/v2.0.0a1/examples/slash_component.py Dependency injection, this feature is in it's early days and under documented but is still partially documented by the examples at https://github.com/FasterSpeeding/Tanjun/blob/v2.0.0a1/examples/ . For now this only covers command callback, check (on both commands and components) and converter execution plus calls to the prefix getter functions (since it's limited to calls which take a Context for the initial implementation). Increased test and documentation coverage. The ability to set a custom prefix getter function. More extensive examples. REST fallbacks to the standard converters where possible. A flag for setting which message commands the standard client should accept for execution. Client callback functions to allow for better integration between hikari's RESTBot and GatewayBot plus collecting runtime metadata. Proxy methods and properties to the Context abcs to allow for calls when using the base Context abc. State tracking to Context to allow for similar functionality between the slash and message command flows when it comes to dealing with responses (e.g. initial and last response logic). Introduced a proper nox framework for running checks and CI tasks. error_message and half_execution arguments to the standard checks to allow commands to more granularly define the behaviour for when they fail plus default them to having them send an error message when they fail if they were added to a command through a decorator call as this works better with the slash command flow and is better UX (a response explaining why it didn't work is better than no response).","title":"Added"},{"location":"changelog/#changed_30","text":"Move away from enforcing subclassing behaviour in-favour of builder objects ~~you can still use subclassing behaviour in places but don't tell anybody I told you that~~. Consistency fix by ensuring functions are always called \"callback\". Renamed tanjun.traits to tanjun.abc . Replaced strategy of inferring other hikari client traits from the first arg parsed to Client.__init__ with having the init explicitly take in each trait it needs as a separate argument while having shortcut from_gateway_bot and from_rest_bot classmethods for building the standard client from hikari's \"bot\" traits. Only default to setting set_human_only(True) in Client.from_gateway_bot . API overhall around commands and context, this involved making a lot of classes and type hints generic to allow for the slash context and message context to be interchaingable under the right circumstances. Made the callback signatures more generic for commands and converters to allow for implementations to introduce features like dependency injection. Replaced MYPY with pyright as the standard type checker. Switch over to relative imports. Switched over to just importing the top level hikari module when possible to simplify imports. Moved the project metadata duner properties direcltly to tanjun (from tanjun.about.py ). Switched over to pdoc from pdoc3 for doc generation. Switched away from setuptools to pep 621 with flit for defining the library and it's metadata (including requirements).","title":"Changed"},{"location":"changelog/#fixed_27","text":"Fix some bugs with the standard checks.","title":"Fixed"},{"location":"changelog/#removed_18","text":"A lot of impl specific setting and with methods from the abstract interfaces to avoid leaking impl detail. Support for python 3.8 in-order to switch over to using collection.abc generic classes due to this being more forward compatible.","title":"Removed"},{"location":"usage/","text":"Usage # This guide is not a conclusive list of the features in Tanjun. Starting with Hikari # Tanjun supports both REST server-based application command execution and gateway-based message and application command execution, and to run Tanjun you'll want to link it to a Hikari bot. bot = hikari . impl . GatewayBot ( \"TOKEN\" ) client = tanjun . Client . from_gateway_bot ( bot , declare_global_commands = True , mention_prefix = True ) ... bot . run () Here a Tanjun client is linked to a gateway bot instance to enable both message and application command execution. There's no need to directly start or stop the Tanjun client as it'll be managed by lifetime events (unless event_managed=False is passed). declare_global_commands=True instructs the client to declare the bot's slash commands and context menus on startup and mention_prefix=True allows the bot's message commands to be triggered by starting a command call with @bot . async def main (): bot = hikari . impl . RESTBot ( \"TOKEN\" , hikari . TokenType . BOT ) tanjun . Client . from_rest_bot ( bot , bot_managed = True , declare_global_commands = True ) bot . run () And here a Tanjun client is linked to a REST server bot instance to enable application command execution. Unlike when linked to a Gateway bot, bot_managed=True must be explicitly passed to Client.from_rest_bot to have the client automatically start when the Rest bot starts. Client lifetime management # While Hikari's bots provide systems for stating and stopping sub-components, these aren't cross-compatible nor Tanjun friendly and Tanjun's client callbacks provide a cross-compatible alternative for these (which also supports dependency injection). client = tanjun . Client . from_gateway_bot ( bot ) @bot . with_client_callback ( tanjun . ClientCallbackNames . STARTING ) async def on_starting ( client : alluka . Injected [ tanjun . abc . Client ]) -> None : client . set_type_dependency ( aiohttp . ClientSession , aiohttp . ClientSession ()) async def on_closed ( session : alluka . Injected [ aiohttp . ClientSession ]) -> None : await session . close () bot . add_client_callback ( tanjun . ClientCallbackNames . CLOSED , on_closed ) Managing bot functionality # tanjun.components.Component exists as a way to manage and group bot functionality, storing functionality such as event listeners, commands, scheduled callbacks, and client callbacks. component = tanjun . Component () @component . with_command @tanjun . as_slash_command ( \"name\" , \"description\" ) async def slash_command ( ctx : tanjun . abc . SlashContext ) -> None : ... @tanjun . with_listener async def event_listener ( event : hikari . Event ) -> None : ... The with_ methods on Component allow loading functionality like commands, event listeners, and schedules into it through a decorator call; the relevant add_ functions allow adding functionality through chained calls. @tanjun . as_message_command ( \"name\" ) async def command ( ctx : tanjun . abc . MessageContext ) -> None : ... component = tanjun . Component () . load_from_scope () Alternatively, functionality which is represented by a dedicated object can be implicitly loaded from a module's global scope using Component.load_from_scope rather than directly calling with_ and add_ methods. Loading modules # Components are used to represent the functionality in a Python module. While add_component can be used to directly add a component to a client, you can also declare \"loaders\" and \"unloaders\" for a module to more ergonomically load this functionality into a client. component = tanjun . Component () . load_from_scope () @tanjun . as_loader def load ( client : tanjun . Client ) -> None : client . add_component ( component ) @tanjun . as_unloader def unload ( client ) -> None : client . remove_component ( component ) You can either declare one or more custom loaders and unloaders as shown above component = tanjun . Component () . load_from_scope () loader = component . make_loader () or use make_loader to generate a loader and unloader for the component. ( tanjun . Client . from_gateway_bot ( bot ) . load_directory ( \"./bot/components\" , namespace = \"bot.components\" ) . load_modules ( \"bot.owner\" ) ) Modules with loaders can then be loaded into a client by calling load_directory to load from all the modules in a directory or load_modules to load specific modules. Declaring commands # Commands need to be contained within a component to be loaded into a client and may be added to a component either directly using Component.add_command / Component.with_command (where add is chainable and with is a decorator callback) or implicitly using Component.load_from_scope . All command callbacks must be asynchronous and can use dependency injection. Slash commands # @tanjun . with_str_slash_option ( \"option\" , \"description\" ) @tanjun . as_slash_command ( \"name\" , \"description\" ) async def slash_command ( ctx : tanjun . abc . SlashContext ) -> None : ... Slash commands represent the commands you see when you start typing with \"/\" in Discord's message box and have names (which follow the restraints shown in https://discord.com/developers/docs/dispatch/field-values#predefined-field-values-accepted-locales ) and descriptions (which can be up to 100 characters long). There are several different kinds of slash command arguments which all require an argument name and description (both of which have the same constraints as the relevant slash command fields) along with type-specific configuration. These can be configured using the following decorator functions and their add_{type}_option equivalent chainable methods on SlashCommand : with_attachment_slash_option with_bool_slash_option with_channel_slash_option with_float_slash_option with_int_slash_option with_member_slash_option with_mentionable_slash_option with_role_slash_option with_str_slash_option with_user_slash_option Most notably, only string arguments support converters (and the standard converters found in tanjun.conversion ) similarly to message command arguments. ding_group = tanjun . slash_command_group ( \"ding\" , \"ding group\" ) @ding_group . as_sub_command ( \"dong\" , \"dong command\" ) async def dong_command ( ctx : tanjun . abc . SlashContext ) -> None : ... ding_ding_group = ding . make_sub_group ( \"ding\" , \"ding ding group\" ) @ding_ding_group . as_sub_command ( \"ding\" , \"ding ding ding command\" ) async def ding_command ( ctx : tanjun . abc . SlashContext ) -> None : ... Slash commands can be stored in groups where the above example will be shown in the command menu as \"/ding dong\" and \"/ding ding ding\" . Unlike message command groups, slash command groups cannot be directly called as commands and can only be nested once. For more information on how slash command groups are configured see slash_command_group . Message commands # tanjun . Client . from_gateway_bot ( gateway_bot ) . add_prefix ( \"!\" ) ... @tanjun . with_option ( \"reason\" , \"--reason\" , \"-r\" , default = None ) # This can be triggered as --reason or -r @tanjun . with_multi_option ( \"users\" , \"--user\" , \"-u\" , default = None ) # This can be triggered as --user or -u @tanjun . with_greedy_argument ( \"content\" ) @tanjun . with_argument ( \"days\" , converters = int ) @tanjun . as_message_command ( \"meow command\" , \"description\" ) async def message_command ( ctx : tanjun . abc . MessageContext ) -> None ... Message commands are triggered based on chat messages where the client's prefixes and command names are used to match executable message commands (the above example would match messages starting with \"!meow command\" ). These will only be executed when linked to a gateway bot with the MESSAGE_CONTENT intent declared and when at least 1 prefix is set. To allow users to trigger a command by mentioning the bot before the command name (e.g. @BotGirl meow command ) you can pass mention_prefix=True to either Client.from_gateway_bot or Client.__init__ while creating the bot. # prefixes=[\"!\"] @tanjun . as_message_command_group ( \"groupy\" ) async def groupy_group ( ctx : tanjun . abc . MessageContext ) ... @groupy_group . as_sub_command ( \"sus drink\" ) async def sus_drink_command ( ctx : tanjun . abc . MessageContext ): ... @groupy_group . as_sub_group ( \"tour\" ) async def tour_group ( ctx : tanjun . abc . MessageContext ): ... @tour_group . as_sub_command ( \"de france\" ) async def de_france_command ( ctx : tanjun . abc . MessageContext ): ... Message command groups are a collection of message commands under a shared name and (unlike slash commands) can also be directly executed as a command. The above example would have the following commands: \"!groupy\" , !\"groupy tour\" , \"!groupy tour de france\" and \"!groupy sus drink\" . For more information on how message command groups are configured see as_message_command_group . Argument parsing # Message command argument parsing always handles string arguments and to declare parsed arguments you can use one of the with_option or with_argument methods in tanjun.parsing ; while options are optional arguments that are passed based on a flag name (e.g. \"--key\" ), arguments are passed positionally. It's worth noting that since decorators are executed from the bottom upwards positional arguments will follow the same order. Arguments and options have multiple parsing approaches: Arguments only parse one value by default; \"multi\" (can be applied to both) arguments parse multiple values separately (passed to the function as a list of values); \"greedy\" (argument only) arguments parse the remaining positional values as one big string (including spacing). The most helpful configuration for options and arguments is converters: these are callbacks which will be called to try convert an argument's raw value; the first callback to pass (not raise a ValueError ) is used as the value. For more configuration see tanjun.parsing and for the standard converters see tanjun.conversion . Context menus # @component . with_command @tanjun . as_message_menu ( \"name\" ) async def message_menu_command ( ctx : tanjun . abc . MenuContext , message : hikari . message ) -> None : ... @component . with_command @tanjun . as_user_menu ( \"name\" ) async def user_menu_command ( ctx : tanjun . abc . MenuContext , user : hikari . User ) -> None : ... Context menus represent the application commands shown when you click on a user or message in Discord and, unlike slash and message commands, do not have configurable arguments nor groups. For more information on configuring menu commands see tanjun.as_message_menu . Annotation based command declaration # Previously you've seen how to manually declare command options per command type, now it's time to go higher. from typing import Annotated import tanjun from tanjun.annotations import Bool , Ranged , Str , User @tanjun . with_annotated_args ( follow_wrapped = true ) @tanjun . as_slash_command ( \"name\" , \"description\" ) @tanjun . as_message_command ( \"name\" ) async def command ( ctx : tanjun . abc . Context , name : Annotated [ Str , \"description\" ], age : Annotated [ Ranged [ 13 , 130 ], \"an int option with a min, max or 13, 130\" ], video : Annotated [ Converted [ get_video ], \"a string option which is converted with get_video\" ], user : Annotated [ User , \"an optional user option which defaults to None\" ] = None , enabled : Annotated [ Bool , \"an optional bool option which defaults to True\" ] = True , ) -> None : ... tanjun.with_annotated_args provides a simple way to declare the arguments for both message and slash commands. While this feature is cross-compatible, there is one key difference: a description must be included for options when annotating for a slash command, which is done by passing a string value to typing.Annotated (as shown above). The special generic types offered in tanjun.annotations (e.g Ranged and Converted ) return a typing.Annotated instance from their generic calls and can also be passed as arguments to Annotated like Annotated[Int, Ranged(13, 130)] , and Annotated[Str, Converted(get_video)] . This example doesn't demonstrate every feature of this, and More information on how arguments are configured through annotations can be found in tanjun.annotations . Wrapped commands # When creating multiple command types in a decorator call chain, standard decorators which can be applied to multiple command types often have a follow_wrapped argument which will apply them to all the compatible commands in a chain if True is passed for it. When using follow_wrapped the relevant decorator will be applied to all the compatible as_{}_command decorator calls below it in the chain. @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . with_guild_check ( follow_wrapped = True ) @tanjun . as_slash_command ( \"name\" , \"description\" ) @tanjun . as_message_command ( \"name\" ) async def command ( ctx : tanjun . abc . Context ) -> None : ... While the previous command examples have typed ctx as a context type that's specific to the command type, it's worth noting that abc.Context is a shared base for every command context type and may be used as the type for ctx when a callback supports multiple command types. Responding to commands # @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_slash_command ( \"name\" , \"description\" ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_user_menu ( \"name\" ) async def command ( ctx : tanjun . abc . Context , user : typing . Annotated [ tanjun . annotations . User | None , \"The user to target\" ] = None ) -> None : user = user or ctx . author message = await ctx . respond ( \"message content\" , attachments = [ hikari . File ( \"./its/a/mystery.jpeg\" )], embeds = [ hikari . Embed ( title = str ( author )) . set_thumbnail ( author . display_avatar_url )], ensure_result = True , ) Context.respond is used to respond to a command call, this has a similar signature to Hikari's message respond method but will only be guaranteed to return a hikari.messages.Message object when ensure_result=True is passed. Ephemeral responses # # All this command's responses will be ephemeral. @component . with_command @tanjun . as_slash_command ( \"name\" , \"description\" , ephemeral_default = True ) async def command_1 ( ctx : tanjun . abc . SlashContext ) -> None : await ctx . respond ( \"hello friend\" ) @component . with_command @tanjun . as_user_menu ( \"name\" , \"description\" ) async def command_2 ( ctx : tanjun . abc . MenuContext , user : hikari . User ) -> None : await ctx . create_initial_response ( \"Starting the thing\" , ephemeral = True ) # private response await ctx . respond ( \"meow\" ) # public response await ctx . create_followup ( \"finished the thing\" , ephemeral = True ) # private response Ephemeral responses are a slash command and context menu exclusive feature which marks a response as private (so that only the command author can see it) and temporary. A response can be marked as ephemeral by either passing ephemeral=True to AppCommandContext.create_initial_response (when initially responding to the slash command) or AppCommandContext.create_followup (for followup responses). Alternatively, an ephemeral default can either be set on a client level (using Client.set_ephemeral_default ), component level (using Component.set_ephemeral_default ), or for a specific command (by passing default_to_ephemeral=True while creating a command) to have any relevant application command responses default to ephemeral (including calls to tanjun.abc.Context.respond ). Deferrals # Slash commands and context menus traditionally need to give an initial response within 3 seconds. If you don't have a response message ready within 3 seconds, you can defer the first response using AppCommandContext.defer ; the client will even automatically defer by default if you haven't created an initial response within a couple of seconds. Context.respond is aware of deferrals so you likely won't need to think about automatic deferral, unless you're using AppCommandContext.create_initial_response . A deferral should be finished by editing in the initial response using either Context.edit_initial_response or Context.respond and if you want a deferred response to be ephemeral you'll have to either pass ephemeral=True while deferring or have the ephemeral default set to True . Automatic deferral can be configured using Client.set_auto_defer_after , and commands can even be configured to always defer when they start executing by passing always_defer=True while creating the command. Slash command autocomplete # Autocomplete is a slash command exclusive feature that allows a bot to dynamically return choice suggestions to a user as they type a string option. Autocomplete callbacks must be asynchronous and support dependency injection. @component . with_command @tanjun . with_str_slash_option ( \"opt1\" , \"description\" ) @tanjun . with_str_slash_option ( \"opt2\" , \"description\" , default = None ) @tanjun . as_slash_command async def slash_command ( ctx : tanjun . abc . SlashContext , opt1 : str , opt2 : str | None , ) -> None : ... @slash_command . with_str_autocomplete ( \"opt1\" ) async def opt1_autocomplete ( ctx : tanjun . abc . AutocompleteContext , value : str ) -> None : await ctx . set_choices ((( \"name\" , \"value\" ), ( \"other_name\" , \"other_value\" )), other_other_name = \"other_other_value\" ) async def opt2_autocomplete ( ctx : tanjun . abc . AutocompleteContext , value : str ) -> None : await ctx . set_choices ({ \"name\" : \"value\" , \"other_name\" : \"other_value\" }) slash_command . set_str_autocomplete ( \"opt2\" , opt2_autocomplete ) To set the results for an autocomplete interaction call AutocompleteContext.set_choices : this has a similar signature to dict and takes up to 25 choices (where both name and value have a limit of up to 100 characters). Unlike application commands, autocomplete must give a response within 3 seconds as these do not support deferrals. Dependency injection # Tanjun supports type-based dependency injection as a type-safe approach for handling global state for most of the callbacks it takes (e.g. command callbacks, checks, hook callbacks, event listeners, schedule callbacks) through Alluka . client = ( tanjun . Client . from_gateway_bot ( bot ) . set_type_dependency ( Foo , Foo ()) . set_type_dependency ( Bar , Bar ()) ) Here we set the dependencies for the types Foo and Bar . @tanjun . as_slash_command ( \"name\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , foo_impl : alluka . Injected [ Foo ], bar_impl : Bar = alluka . inject ( type = Bar ), ) -> None : ... And here we declare a command callback as taking the client set values for Foo and Bar as keyword arguments using two different approaches. Since both arguments don't provide a default, these commands will fail if no value for Foo or Bar has been set using Client.set_type_dependency . A more detailed guide on how this works and the full feature set (e.g. optional dependencies) can be found here . alluka.abc.Client is exposed at Client.injector . Standard and special cased injected types. # The following types are registered globally as type dependencies: tanjun.abc.Client tanjun.clients.Client tanjun.dependencies.AbstractOwners (for use with the standard owner check). tanjun.LazyConstant[hikari.OwnUser] (for use with tanjun.inject_lc(hikari.OwnUser) ) hikari.api.rest.RESTClient hikari.api.cache.Cache * hikari.api.event_manager.EventManager * hikari.api.interaction_server.InteractionServer * hikari.traits.ShardAware * hikari.api.voice.VoiceComponent * * These type dependencies are only registered if the relevant Hikari component was included while creating the tanjun.clients.Client instance. The following type dependencies are available in specific contexts: tanjun.abc.AutocompleteContext : slash command autocomplete execution tanjun.abc.AppCommandContext : both slash and menu command execution (excluding any checks) tanjun.abc.MenuContext : menu command execution tanjun.abc.MessageContext : message command execution tanjun.abc.SlashContext : slash command execution tanjun.abc.Component : Command execution (excluding client checks) Both Client.from_gateway_bot and Client.from_rest_bot register type dependencies for the relevant hikari traits that the bot is compatible with. You can get this behaviour after directly initialising tanjun.clients.Client without a from method by calling Client.set_hikari_trait_injectors with the relevant bot object. Advanced command flow management # Checks # Checks are functions that run before command execution to decide whether a command or group of commands matches a context and should be called with it. @tanjun . with_guild_check ( follow_wrapped = True ) @tanjun . with_author_permission_check ( hikari . Permissions . BAN_MEMBERS ) @tanjun . with_own_permission_check ( hikari . Permissions . BAN_MEMBERS , follow_wrapped = True ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_slash_command ( \"name\" , \"description\" , default_member_permissions = hikari . Permissions . BAN_MEMBERS ) async def command ( ctx : tanjun . abc . Context ) -> None : ... There's a collection of standard checks in tanjun.checks that are all exported top-level and work with all the command types. The only optional configuration most users will care about for the standard checks is the error_message argument which lets you adjust the response messages these send when they fail. component = ( tanjun . Component () . add_check ( tanjun . GuildCheck ()) . add_check ( tanjun . AuthorPermissionCheck ( hikari . Permissions . BAN_MEMBER )) . add_check ( tanjun . OwnPermissionCheck ( hikari . Permissions . BAN_MEMBER )) ) @component . with_check async def db_check ( ctx : tanjun . abc . Context , db : alluka . Injected [ Db ]) -> None : if ( await db .. get_user ( ctx . author . id )) . banned : raise tanjun . CommandError ( \"You are banned from using this bot\" ) raise False @tanjun . with_owner_check ( follow_wrapped = True ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_slash_command ( \"name\" , \"description\" ) async def owner_only_command ( ctxL tanjun . abc . Context ): ... Checks (both custom and standard) can be added to clients, components, and commands using either the chainable add_check method or the decorator style with_check method. The standard checks also provide with_... decorators which can be used to add the check to a command during a decorator chain. Checks on a client, component, or command group will be used for every child command. def check ( ctx : tanjun . abc . Context ) -> bool : if ctx . author . discriminator % 2 : raise tanjun . CommandError ( \"You are not one of the chosen ones\" ) return True Custom checks can be made by making a function with either the signature def (tanjun.abc.Context, ...) -> bool or async def (tanjun.abc.Context, ...) -> bool (where dependency injection is supported). Returning True indicates that the check passed, and returning False indicates that the client should continue looking for a matching command as the check failed. You will probably want to raise CommandError to end command execution with a response rather than returning False . Execution hooks # Command hooks are callbacks that are called around command execution, these are contained within Hooks objects which may be added to a command, client, or component using set_hooks where hooks on a client, component or command group will be called for every child command. There are several different kinds of hooks which all support dependency injection and may be synchronous or asynchronous: hooks = tanjun . AnyHooks () @hooks . with_pre_execution # hooks.add_pre_execution async def pre_execution_hook ( ctx : tanjun . abc . Context ) -> None : ... Pre-execution hooks are called before the execution of a command but after command matching has finished and all the relevant checks have passed. @hooks . with_pre_execution # hooks.add_pre_execution async def pre_execution_hook ( ctx : tanjun . abc . Context ) -> None : ... Post-execution hooks are called after a command has finished executing, regardless of whether it passed or failed. @hooks . with_on_success # hooks.add_success_hook async def success_hook ( ctx : tanjun . abc . Context ) -> None : ... Success hooks are called after a command has finished executing successfully (without raising any errors). @hooks . with_on_error # hooks.add_on_error async def error_hook ( ctx : tanjun . abc . Context , error : Exception ) -> bool | None : ... Error hooks are called when command's execution is ended early by an error raise that isn't a ParserError , CommandError or HaltExecution (as these are special-cased). The return value of an error hook is used with other error hook return values to workout whether the error should be re-raised: True acts as a vote towards suppressing the error, False acts as a vote towards re-raising the error and None acts as no vote. In the case of a tie the error will be re-raised. @hooks . with_on_parser_error # hooks.add_on_parser_error async def parser_error_hook ( ctx : tanjun . abc . Context , error : tanjun . ParserError ) -> None : ... Parser error hooks are called when the argument parsing of a message command failed. Parser errors are never re-raised. Concurrency limiter # Concurrency limiters allow you to limit how many calls can be made to a group of commands concurrently. client = tanjun . Client . from_gateway_bot ( bot ) ( tanjun . InMemoryConcurrencyLimiter () . set_bucket ( \"main_commands\" , tanjun . BucketResource . USER , 2 ) . disable_bucket ( \"plugin.meta\" ) . add_to_client ( client ) ) Here InMemoryConcurrencyLimiter will manage the concurrency limits for all the commands in this bot instance with Limiter.set_bucket being called to limit the bucket \"main_commands\" to at most 2 concurrent executions per user, Limiter.disable_bucket being called to ensure that the bucket \"plugin.meta\" has no concurrency limit as unconfigured buckets will default to the configuration for the \"default\" bucket, and Limiter.add_to_client being used to set this limiter for a client (note that clients can only have 1 linked limiter). @tanjun . with_concurrency_limit ( \"main_commands\" , follow_wrapped = True ) @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_slash_command ( \"name\" , \"description\" ) @tanjun . as_user_menu ( \"name\" ) async def user_command ( ctx : tanjun . abc . Context , user : Annotated [ annotations . User , \"A user\" ], ) -> None : ... And here we use with_concurrency_limit to mark these commands as using the \"main_commands\" concurrency limit bucket; buckets share their limits for a resource across all the commands under it. For more information on the resources concurrency can be limited by see BucketResource . Cooldowns # Cooldowns limit how often a group of commands can be called. client = tanjun . Client . from_gateway_bot ( bot ) ( tanjun . InMemoryCooldownManager () . set_bucket ( \"main_commands\" , tanjun . BucketResource . USER , 5 , 60 ) . disable_bucket ( \"plugin.meta\" ) . add_to_client ( client ) ) Here InMemoryCooldownManager will manage the cooldowns for all the commands in this bot instance with Manager.set_bucket being called to limit the bucket \"main_commands\" to 5 calls per user every 60 seconds, Manager.disable_bucket being called to ensure that the bucket \"plugin.meta\" has no cooldowns as unconfigured buckets will default to the configuration for the \"default\" bucket, and Manager.add_to_client being used to set this cooldown manager for a client (note that clients can only have 1 linked cooldown manager). @tanjun . with_cooldown ( \"main_commands\" , follow_wrapped = True ) @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_slash_command ( \"name\" , \"description\" ) @tanjun . as_user_menu ( \"name\" ) async def user_command ( ctx : tanjun . abc . Context , user : Annotated [ annotations . User , \"A user\" ], ) -> None : ... And here we use with_cooldown to mark these commands as using the \"main_commands\" cooldown bucket; buckets share their cooldowns for a resource across all the commands under it. For more information on the resources cooldowns can be set for see BucketResource . Localisation # Localisation allows for tailoring the declarations and responses of slash commands and context menu commands to match specific regions through by providing multiple translations of a field. Localisation on Discord is limited to the locales Discord supports (listed at hikari.locales.Locale ). Localising command declarations # @tanjun . as_slash_command ({ hikari . Locale . ES_US : \"Hola\" }, \"description\" ) For fields which support localisation you've previously seen a single string being passed to them: this value is used as a default for all locales and for environments which don't support localisation (e.g. message command execution). But as shown above, you can also pass a dictionary of localised values to these fields. Client localiser # Tanjun also provides an optional global localiser which allows for setting/overriding the locale-specific variants used for localised fields such as error message responses and application fields globally. import tanjun client = tanjun . Client . from_gateway_bot ( ... ) ( tanjun . dependencies . BasicLocaliser () . set_overrides ( \"slash:command name:name\" , { hikari . Locale . EN_US : \"american variant\" , hikari . Locale . EN_GB : \"english variant\" } ) . set_overrides ( \"message_menu:command name:check:tanjun.OwnerCheck\" , { hikari . Locale . JA : \"konnichiwa\" , hikari . Locale . ES_ES : \"Hola\" } ) . add_to_client ( client ) ) Specific fields may be overridden by their ID as shown above. There is no guaranteed format for field IDs but the standard implementations will always use the following formats unless explicitly overridden: Checks and limiters: f\"{command_type}:{command_name}:check:{check_name}\" Command descriptions: f\"{command_type}:{command_name}:description\" Command names: f\"{command_type}:{command_name}:name\" Slash option names: f\"slash:{command_name}:option.name:{option_name}\" Slash option descriptions: f\"slash:{command_name}:option.description:{option_name}\" command_type may be one of \"message_menu\" , \"slash\" or \"user_menu\" , command_name will be the full name of the command (including parent command names in the path), and standard check names will always be prefixed with \"tanjun.\" . It's highly recommended that 3rd party libraries match this format if possible. Localising command responses # LOCALISED_RESPONSES = { hikari . Locale . DA : \"Hej\" , hikari . Locale . DE : \"Hallo\" , hikari . Locale . EN_GB : \"Good day fellow sir\" , hikari . Locale . EN_US : \"*shoots you*\" , hikari . Locale . ES_ES : \"Hola\" , hikari . Locale . FR : \"Bonjour, camarade baguette\" , hikari . Locale . PL : \"Musimy szerzy\u0107 gejostwo w Strefach wolnych od LGBT, musimy zrobi\u0107 rajd gejowski\" , hikari . Locale . SV_SE : \"Hej, jag \u00e4lskar min Bl\u00e5haj\" , hikari . Locale . VI : \"Xin ch\u00e0o, C\u00e2y n\u00f3i ti\u1ebfng Vi\u1ec7t\" , hikari . Locale . TR : \"Merhaba\" , hikari . Locale . CS : \"Ahoj\" , hikari . Locale . ZH_CN : \"\u81ea\u7531\u9999\u6e2f\" , hikari . Locale . JA : \"\u3053\u3093\u306b\u3061\u306f\u3001\u30a2\u30cb\u30e1\u306e\u5973\u306e\u5b50\u3060\u3063\u305f\u3089\u3044\u3044\u306e\u306b\" , hikari . Locale . ZH_TW : \"\u8ba9\u53f0\u6e7e\u81ea\u7531\" , } @tanjun . as_slash_command ( \"name\" , \"description\" ) async def as_slash_command ( ctx : tanjun . abc . SlashContext ) -> None : await ctx . respond ( LOCALISED_RESPONSES . get ( ctx . interaction . locale , \"hello\" )) tanjun.abc.AppCommandContext.interaction (base class for both tanjun.abc.SlashContext and tanjun.abc.MenuContext ) both have the fields guild_locale and locale which provide the set locale of the guild and the user triggering the command respectively. This locale can be used to localise responses to specific languages within your own code.","title":"Usage"},{"location":"usage/#usage","text":"This guide is not a conclusive list of the features in Tanjun.","title":"Usage"},{"location":"usage/#starting-with-hikari","text":"Tanjun supports both REST server-based application command execution and gateway-based message and application command execution, and to run Tanjun you'll want to link it to a Hikari bot. bot = hikari . impl . GatewayBot ( \"TOKEN\" ) client = tanjun . Client . from_gateway_bot ( bot , declare_global_commands = True , mention_prefix = True ) ... bot . run () Here a Tanjun client is linked to a gateway bot instance to enable both message and application command execution. There's no need to directly start or stop the Tanjun client as it'll be managed by lifetime events (unless event_managed=False is passed). declare_global_commands=True instructs the client to declare the bot's slash commands and context menus on startup and mention_prefix=True allows the bot's message commands to be triggered by starting a command call with @bot . async def main (): bot = hikari . impl . RESTBot ( \"TOKEN\" , hikari . TokenType . BOT ) tanjun . Client . from_rest_bot ( bot , bot_managed = True , declare_global_commands = True ) bot . run () And here a Tanjun client is linked to a REST server bot instance to enable application command execution. Unlike when linked to a Gateway bot, bot_managed=True must be explicitly passed to Client.from_rest_bot to have the client automatically start when the Rest bot starts.","title":"Starting with Hikari"},{"location":"usage/#client-lifetime-management","text":"While Hikari's bots provide systems for stating and stopping sub-components, these aren't cross-compatible nor Tanjun friendly and Tanjun's client callbacks provide a cross-compatible alternative for these (which also supports dependency injection). client = tanjun . Client . from_gateway_bot ( bot ) @bot . with_client_callback ( tanjun . ClientCallbackNames . STARTING ) async def on_starting ( client : alluka . Injected [ tanjun . abc . Client ]) -> None : client . set_type_dependency ( aiohttp . ClientSession , aiohttp . ClientSession ()) async def on_closed ( session : alluka . Injected [ aiohttp . ClientSession ]) -> None : await session . close () bot . add_client_callback ( tanjun . ClientCallbackNames . CLOSED , on_closed )","title":"Client lifetime management"},{"location":"usage/#managing-bot-functionality","text":"tanjun.components.Component exists as a way to manage and group bot functionality, storing functionality such as event listeners, commands, scheduled callbacks, and client callbacks. component = tanjun . Component () @component . with_command @tanjun . as_slash_command ( \"name\" , \"description\" ) async def slash_command ( ctx : tanjun . abc . SlashContext ) -> None : ... @tanjun . with_listener async def event_listener ( event : hikari . Event ) -> None : ... The with_ methods on Component allow loading functionality like commands, event listeners, and schedules into it through a decorator call; the relevant add_ functions allow adding functionality through chained calls. @tanjun . as_message_command ( \"name\" ) async def command ( ctx : tanjun . abc . MessageContext ) -> None : ... component = tanjun . Component () . load_from_scope () Alternatively, functionality which is represented by a dedicated object can be implicitly loaded from a module's global scope using Component.load_from_scope rather than directly calling with_ and add_ methods.","title":"Managing bot functionality"},{"location":"usage/#loading-modules","text":"Components are used to represent the functionality in a Python module. While add_component can be used to directly add a component to a client, you can also declare \"loaders\" and \"unloaders\" for a module to more ergonomically load this functionality into a client. component = tanjun . Component () . load_from_scope () @tanjun . as_loader def load ( client : tanjun . Client ) -> None : client . add_component ( component ) @tanjun . as_unloader def unload ( client ) -> None : client . remove_component ( component ) You can either declare one or more custom loaders and unloaders as shown above component = tanjun . Component () . load_from_scope () loader = component . make_loader () or use make_loader to generate a loader and unloader for the component. ( tanjun . Client . from_gateway_bot ( bot ) . load_directory ( \"./bot/components\" , namespace = \"bot.components\" ) . load_modules ( \"bot.owner\" ) ) Modules with loaders can then be loaded into a client by calling load_directory to load from all the modules in a directory or load_modules to load specific modules.","title":"Loading modules"},{"location":"usage/#declaring-commands","text":"Commands need to be contained within a component to be loaded into a client and may be added to a component either directly using Component.add_command / Component.with_command (where add is chainable and with is a decorator callback) or implicitly using Component.load_from_scope . All command callbacks must be asynchronous and can use dependency injection.","title":"Declaring commands"},{"location":"usage/#slash-commands","text":"@tanjun . with_str_slash_option ( \"option\" , \"description\" ) @tanjun . as_slash_command ( \"name\" , \"description\" ) async def slash_command ( ctx : tanjun . abc . SlashContext ) -> None : ... Slash commands represent the commands you see when you start typing with \"/\" in Discord's message box and have names (which follow the restraints shown in https://discord.com/developers/docs/dispatch/field-values#predefined-field-values-accepted-locales ) and descriptions (which can be up to 100 characters long). There are several different kinds of slash command arguments which all require an argument name and description (both of which have the same constraints as the relevant slash command fields) along with type-specific configuration. These can be configured using the following decorator functions and their add_{type}_option equivalent chainable methods on SlashCommand : with_attachment_slash_option with_bool_slash_option with_channel_slash_option with_float_slash_option with_int_slash_option with_member_slash_option with_mentionable_slash_option with_role_slash_option with_str_slash_option with_user_slash_option Most notably, only string arguments support converters (and the standard converters found in tanjun.conversion ) similarly to message command arguments. ding_group = tanjun . slash_command_group ( \"ding\" , \"ding group\" ) @ding_group . as_sub_command ( \"dong\" , \"dong command\" ) async def dong_command ( ctx : tanjun . abc . SlashContext ) -> None : ... ding_ding_group = ding . make_sub_group ( \"ding\" , \"ding ding group\" ) @ding_ding_group . as_sub_command ( \"ding\" , \"ding ding ding command\" ) async def ding_command ( ctx : tanjun . abc . SlashContext ) -> None : ... Slash commands can be stored in groups where the above example will be shown in the command menu as \"/ding dong\" and \"/ding ding ding\" . Unlike message command groups, slash command groups cannot be directly called as commands and can only be nested once. For more information on how slash command groups are configured see slash_command_group .","title":"Slash commands"},{"location":"usage/#message-commands","text":"tanjun . Client . from_gateway_bot ( gateway_bot ) . add_prefix ( \"!\" ) ... @tanjun . with_option ( \"reason\" , \"--reason\" , \"-r\" , default = None ) # This can be triggered as --reason or -r @tanjun . with_multi_option ( \"users\" , \"--user\" , \"-u\" , default = None ) # This can be triggered as --user or -u @tanjun . with_greedy_argument ( \"content\" ) @tanjun . with_argument ( \"days\" , converters = int ) @tanjun . as_message_command ( \"meow command\" , \"description\" ) async def message_command ( ctx : tanjun . abc . MessageContext ) -> None ... Message commands are triggered based on chat messages where the client's prefixes and command names are used to match executable message commands (the above example would match messages starting with \"!meow command\" ). These will only be executed when linked to a gateway bot with the MESSAGE_CONTENT intent declared and when at least 1 prefix is set. To allow users to trigger a command by mentioning the bot before the command name (e.g. @BotGirl meow command ) you can pass mention_prefix=True to either Client.from_gateway_bot or Client.__init__ while creating the bot. # prefixes=[\"!\"] @tanjun . as_message_command_group ( \"groupy\" ) async def groupy_group ( ctx : tanjun . abc . MessageContext ) ... @groupy_group . as_sub_command ( \"sus drink\" ) async def sus_drink_command ( ctx : tanjun . abc . MessageContext ): ... @groupy_group . as_sub_group ( \"tour\" ) async def tour_group ( ctx : tanjun . abc . MessageContext ): ... @tour_group . as_sub_command ( \"de france\" ) async def de_france_command ( ctx : tanjun . abc . MessageContext ): ... Message command groups are a collection of message commands under a shared name and (unlike slash commands) can also be directly executed as a command. The above example would have the following commands: \"!groupy\" , !\"groupy tour\" , \"!groupy tour de france\" and \"!groupy sus drink\" . For more information on how message command groups are configured see as_message_command_group .","title":"Message commands"},{"location":"usage/#argument-parsing","text":"Message command argument parsing always handles string arguments and to declare parsed arguments you can use one of the with_option or with_argument methods in tanjun.parsing ; while options are optional arguments that are passed based on a flag name (e.g. \"--key\" ), arguments are passed positionally. It's worth noting that since decorators are executed from the bottom upwards positional arguments will follow the same order. Arguments and options have multiple parsing approaches: Arguments only parse one value by default; \"multi\" (can be applied to both) arguments parse multiple values separately (passed to the function as a list of values); \"greedy\" (argument only) arguments parse the remaining positional values as one big string (including spacing). The most helpful configuration for options and arguments is converters: these are callbacks which will be called to try convert an argument's raw value; the first callback to pass (not raise a ValueError ) is used as the value. For more configuration see tanjun.parsing and for the standard converters see tanjun.conversion .","title":"Argument parsing"},{"location":"usage/#context-menus","text":"@component . with_command @tanjun . as_message_menu ( \"name\" ) async def message_menu_command ( ctx : tanjun . abc . MenuContext , message : hikari . message ) -> None : ... @component . with_command @tanjun . as_user_menu ( \"name\" ) async def user_menu_command ( ctx : tanjun . abc . MenuContext , user : hikari . User ) -> None : ... Context menus represent the application commands shown when you click on a user or message in Discord and, unlike slash and message commands, do not have configurable arguments nor groups. For more information on configuring menu commands see tanjun.as_message_menu .","title":"Context menus"},{"location":"usage/#annotation-based-command-declaration","text":"Previously you've seen how to manually declare command options per command type, now it's time to go higher. from typing import Annotated import tanjun from tanjun.annotations import Bool , Ranged , Str , User @tanjun . with_annotated_args ( follow_wrapped = true ) @tanjun . as_slash_command ( \"name\" , \"description\" ) @tanjun . as_message_command ( \"name\" ) async def command ( ctx : tanjun . abc . Context , name : Annotated [ Str , \"description\" ], age : Annotated [ Ranged [ 13 , 130 ], \"an int option with a min, max or 13, 130\" ], video : Annotated [ Converted [ get_video ], \"a string option which is converted with get_video\" ], user : Annotated [ User , \"an optional user option which defaults to None\" ] = None , enabled : Annotated [ Bool , \"an optional bool option which defaults to True\" ] = True , ) -> None : ... tanjun.with_annotated_args provides a simple way to declare the arguments for both message and slash commands. While this feature is cross-compatible, there is one key difference: a description must be included for options when annotating for a slash command, which is done by passing a string value to typing.Annotated (as shown above). The special generic types offered in tanjun.annotations (e.g Ranged and Converted ) return a typing.Annotated instance from their generic calls and can also be passed as arguments to Annotated like Annotated[Int, Ranged(13, 130)] , and Annotated[Str, Converted(get_video)] . This example doesn't demonstrate every feature of this, and More information on how arguments are configured through annotations can be found in tanjun.annotations .","title":"Annotation based command declaration"},{"location":"usage/#wrapped-commands","text":"When creating multiple command types in a decorator call chain, standard decorators which can be applied to multiple command types often have a follow_wrapped argument which will apply them to all the compatible commands in a chain if True is passed for it. When using follow_wrapped the relevant decorator will be applied to all the compatible as_{}_command decorator calls below it in the chain. @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . with_guild_check ( follow_wrapped = True ) @tanjun . as_slash_command ( \"name\" , \"description\" ) @tanjun . as_message_command ( \"name\" ) async def command ( ctx : tanjun . abc . Context ) -> None : ... While the previous command examples have typed ctx as a context type that's specific to the command type, it's worth noting that abc.Context is a shared base for every command context type and may be used as the type for ctx when a callback supports multiple command types.","title":"Wrapped commands"},{"location":"usage/#responding-to-commands","text":"@tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_slash_command ( \"name\" , \"description\" ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_user_menu ( \"name\" ) async def command ( ctx : tanjun . abc . Context , user : typing . Annotated [ tanjun . annotations . User | None , \"The user to target\" ] = None ) -> None : user = user or ctx . author message = await ctx . respond ( \"message content\" , attachments = [ hikari . File ( \"./its/a/mystery.jpeg\" )], embeds = [ hikari . Embed ( title = str ( author )) . set_thumbnail ( author . display_avatar_url )], ensure_result = True , ) Context.respond is used to respond to a command call, this has a similar signature to Hikari's message respond method but will only be guaranteed to return a hikari.messages.Message object when ensure_result=True is passed.","title":"Responding to commands"},{"location":"usage/#ephemeral-responses","text":"# All this command's responses will be ephemeral. @component . with_command @tanjun . as_slash_command ( \"name\" , \"description\" , ephemeral_default = True ) async def command_1 ( ctx : tanjun . abc . SlashContext ) -> None : await ctx . respond ( \"hello friend\" ) @component . with_command @tanjun . as_user_menu ( \"name\" , \"description\" ) async def command_2 ( ctx : tanjun . abc . MenuContext , user : hikari . User ) -> None : await ctx . create_initial_response ( \"Starting the thing\" , ephemeral = True ) # private response await ctx . respond ( \"meow\" ) # public response await ctx . create_followup ( \"finished the thing\" , ephemeral = True ) # private response Ephemeral responses are a slash command and context menu exclusive feature which marks a response as private (so that only the command author can see it) and temporary. A response can be marked as ephemeral by either passing ephemeral=True to AppCommandContext.create_initial_response (when initially responding to the slash command) or AppCommandContext.create_followup (for followup responses). Alternatively, an ephemeral default can either be set on a client level (using Client.set_ephemeral_default ), component level (using Component.set_ephemeral_default ), or for a specific command (by passing default_to_ephemeral=True while creating a command) to have any relevant application command responses default to ephemeral (including calls to tanjun.abc.Context.respond ).","title":"Ephemeral responses"},{"location":"usage/#deferrals","text":"Slash commands and context menus traditionally need to give an initial response within 3 seconds. If you don't have a response message ready within 3 seconds, you can defer the first response using AppCommandContext.defer ; the client will even automatically defer by default if you haven't created an initial response within a couple of seconds. Context.respond is aware of deferrals so you likely won't need to think about automatic deferral, unless you're using AppCommandContext.create_initial_response . A deferral should be finished by editing in the initial response using either Context.edit_initial_response or Context.respond and if you want a deferred response to be ephemeral you'll have to either pass ephemeral=True while deferring or have the ephemeral default set to True . Automatic deferral can be configured using Client.set_auto_defer_after , and commands can even be configured to always defer when they start executing by passing always_defer=True while creating the command.","title":"Deferrals"},{"location":"usage/#slash-command-autocomplete","text":"Autocomplete is a slash command exclusive feature that allows a bot to dynamically return choice suggestions to a user as they type a string option. Autocomplete callbacks must be asynchronous and support dependency injection. @component . with_command @tanjun . with_str_slash_option ( \"opt1\" , \"description\" ) @tanjun . with_str_slash_option ( \"opt2\" , \"description\" , default = None ) @tanjun . as_slash_command async def slash_command ( ctx : tanjun . abc . SlashContext , opt1 : str , opt2 : str | None , ) -> None : ... @slash_command . with_str_autocomplete ( \"opt1\" ) async def opt1_autocomplete ( ctx : tanjun . abc . AutocompleteContext , value : str ) -> None : await ctx . set_choices ((( \"name\" , \"value\" ), ( \"other_name\" , \"other_value\" )), other_other_name = \"other_other_value\" ) async def opt2_autocomplete ( ctx : tanjun . abc . AutocompleteContext , value : str ) -> None : await ctx . set_choices ({ \"name\" : \"value\" , \"other_name\" : \"other_value\" }) slash_command . set_str_autocomplete ( \"opt2\" , opt2_autocomplete ) To set the results for an autocomplete interaction call AutocompleteContext.set_choices : this has a similar signature to dict and takes up to 25 choices (where both name and value have a limit of up to 100 characters). Unlike application commands, autocomplete must give a response within 3 seconds as these do not support deferrals.","title":"Slash command autocomplete"},{"location":"usage/#dependency-injection","text":"Tanjun supports type-based dependency injection as a type-safe approach for handling global state for most of the callbacks it takes (e.g. command callbacks, checks, hook callbacks, event listeners, schedule callbacks) through Alluka . client = ( tanjun . Client . from_gateway_bot ( bot ) . set_type_dependency ( Foo , Foo ()) . set_type_dependency ( Bar , Bar ()) ) Here we set the dependencies for the types Foo and Bar . @tanjun . as_slash_command ( \"name\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , foo_impl : alluka . Injected [ Foo ], bar_impl : Bar = alluka . inject ( type = Bar ), ) -> None : ... And here we declare a command callback as taking the client set values for Foo and Bar as keyword arguments using two different approaches. Since both arguments don't provide a default, these commands will fail if no value for Foo or Bar has been set using Client.set_type_dependency . A more detailed guide on how this works and the full feature set (e.g. optional dependencies) can be found here . alluka.abc.Client is exposed at Client.injector .","title":"Dependency injection"},{"location":"usage/#standard-and-special-cased-injected-types","text":"The following types are registered globally as type dependencies: tanjun.abc.Client tanjun.clients.Client tanjun.dependencies.AbstractOwners (for use with the standard owner check). tanjun.LazyConstant[hikari.OwnUser] (for use with tanjun.inject_lc(hikari.OwnUser) ) hikari.api.rest.RESTClient hikari.api.cache.Cache * hikari.api.event_manager.EventManager * hikari.api.interaction_server.InteractionServer * hikari.traits.ShardAware * hikari.api.voice.VoiceComponent * * These type dependencies are only registered if the relevant Hikari component was included while creating the tanjun.clients.Client instance. The following type dependencies are available in specific contexts: tanjun.abc.AutocompleteContext : slash command autocomplete execution tanjun.abc.AppCommandContext : both slash and menu command execution (excluding any checks) tanjun.abc.MenuContext : menu command execution tanjun.abc.MessageContext : message command execution tanjun.abc.SlashContext : slash command execution tanjun.abc.Component : Command execution (excluding client checks) Both Client.from_gateway_bot and Client.from_rest_bot register type dependencies for the relevant hikari traits that the bot is compatible with. You can get this behaviour after directly initialising tanjun.clients.Client without a from method by calling Client.set_hikari_trait_injectors with the relevant bot object.","title":"Standard and special cased injected types."},{"location":"usage/#advanced-command-flow-management","text":"","title":"Advanced command flow management"},{"location":"usage/#checks","text":"Checks are functions that run before command execution to decide whether a command or group of commands matches a context and should be called with it. @tanjun . with_guild_check ( follow_wrapped = True ) @tanjun . with_author_permission_check ( hikari . Permissions . BAN_MEMBERS ) @tanjun . with_own_permission_check ( hikari . Permissions . BAN_MEMBERS , follow_wrapped = True ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_slash_command ( \"name\" , \"description\" , default_member_permissions = hikari . Permissions . BAN_MEMBERS ) async def command ( ctx : tanjun . abc . Context ) -> None : ... There's a collection of standard checks in tanjun.checks that are all exported top-level and work with all the command types. The only optional configuration most users will care about for the standard checks is the error_message argument which lets you adjust the response messages these send when they fail. component = ( tanjun . Component () . add_check ( tanjun . GuildCheck ()) . add_check ( tanjun . AuthorPermissionCheck ( hikari . Permissions . BAN_MEMBER )) . add_check ( tanjun . OwnPermissionCheck ( hikari . Permissions . BAN_MEMBER )) ) @component . with_check async def db_check ( ctx : tanjun . abc . Context , db : alluka . Injected [ Db ]) -> None : if ( await db .. get_user ( ctx . author . id )) . banned : raise tanjun . CommandError ( \"You are banned from using this bot\" ) raise False @tanjun . with_owner_check ( follow_wrapped = True ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_slash_command ( \"name\" , \"description\" ) async def owner_only_command ( ctxL tanjun . abc . Context ): ... Checks (both custom and standard) can be added to clients, components, and commands using either the chainable add_check method or the decorator style with_check method. The standard checks also provide with_... decorators which can be used to add the check to a command during a decorator chain. Checks on a client, component, or command group will be used for every child command. def check ( ctx : tanjun . abc . Context ) -> bool : if ctx . author . discriminator % 2 : raise tanjun . CommandError ( \"You are not one of the chosen ones\" ) return True Custom checks can be made by making a function with either the signature def (tanjun.abc.Context, ...) -> bool or async def (tanjun.abc.Context, ...) -> bool (where dependency injection is supported). Returning True indicates that the check passed, and returning False indicates that the client should continue looking for a matching command as the check failed. You will probably want to raise CommandError to end command execution with a response rather than returning False .","title":"Checks"},{"location":"usage/#execution-hooks","text":"Command hooks are callbacks that are called around command execution, these are contained within Hooks objects which may be added to a command, client, or component using set_hooks where hooks on a client, component or command group will be called for every child command. There are several different kinds of hooks which all support dependency injection and may be synchronous or asynchronous: hooks = tanjun . AnyHooks () @hooks . with_pre_execution # hooks.add_pre_execution async def pre_execution_hook ( ctx : tanjun . abc . Context ) -> None : ... Pre-execution hooks are called before the execution of a command but after command matching has finished and all the relevant checks have passed. @hooks . with_pre_execution # hooks.add_pre_execution async def pre_execution_hook ( ctx : tanjun . abc . Context ) -> None : ... Post-execution hooks are called after a command has finished executing, regardless of whether it passed or failed. @hooks . with_on_success # hooks.add_success_hook async def success_hook ( ctx : tanjun . abc . Context ) -> None : ... Success hooks are called after a command has finished executing successfully (without raising any errors). @hooks . with_on_error # hooks.add_on_error async def error_hook ( ctx : tanjun . abc . Context , error : Exception ) -> bool | None : ... Error hooks are called when command's execution is ended early by an error raise that isn't a ParserError , CommandError or HaltExecution (as these are special-cased). The return value of an error hook is used with other error hook return values to workout whether the error should be re-raised: True acts as a vote towards suppressing the error, False acts as a vote towards re-raising the error and None acts as no vote. In the case of a tie the error will be re-raised. @hooks . with_on_parser_error # hooks.add_on_parser_error async def parser_error_hook ( ctx : tanjun . abc . Context , error : tanjun . ParserError ) -> None : ... Parser error hooks are called when the argument parsing of a message command failed. Parser errors are never re-raised.","title":"Execution hooks"},{"location":"usage/#concurrency-limiter","text":"Concurrency limiters allow you to limit how many calls can be made to a group of commands concurrently. client = tanjun . Client . from_gateway_bot ( bot ) ( tanjun . InMemoryConcurrencyLimiter () . set_bucket ( \"main_commands\" , tanjun . BucketResource . USER , 2 ) . disable_bucket ( \"plugin.meta\" ) . add_to_client ( client ) ) Here InMemoryConcurrencyLimiter will manage the concurrency limits for all the commands in this bot instance with Limiter.set_bucket being called to limit the bucket \"main_commands\" to at most 2 concurrent executions per user, Limiter.disable_bucket being called to ensure that the bucket \"plugin.meta\" has no concurrency limit as unconfigured buckets will default to the configuration for the \"default\" bucket, and Limiter.add_to_client being used to set this limiter for a client (note that clients can only have 1 linked limiter). @tanjun . with_concurrency_limit ( \"main_commands\" , follow_wrapped = True ) @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_slash_command ( \"name\" , \"description\" ) @tanjun . as_user_menu ( \"name\" ) async def user_command ( ctx : tanjun . abc . Context , user : Annotated [ annotations . User , \"A user\" ], ) -> None : ... And here we use with_concurrency_limit to mark these commands as using the \"main_commands\" concurrency limit bucket; buckets share their limits for a resource across all the commands under it. For more information on the resources concurrency can be limited by see BucketResource .","title":"Concurrency limiter"},{"location":"usage/#cooldowns","text":"Cooldowns limit how often a group of commands can be called. client = tanjun . Client . from_gateway_bot ( bot ) ( tanjun . InMemoryCooldownManager () . set_bucket ( \"main_commands\" , tanjun . BucketResource . USER , 5 , 60 ) . disable_bucket ( \"plugin.meta\" ) . add_to_client ( client ) ) Here InMemoryCooldownManager will manage the cooldowns for all the commands in this bot instance with Manager.set_bucket being called to limit the bucket \"main_commands\" to 5 calls per user every 60 seconds, Manager.disable_bucket being called to ensure that the bucket \"plugin.meta\" has no cooldowns as unconfigured buckets will default to the configuration for the \"default\" bucket, and Manager.add_to_client being used to set this cooldown manager for a client (note that clients can only have 1 linked cooldown manager). @tanjun . with_cooldown ( \"main_commands\" , follow_wrapped = True ) @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_slash_command ( \"name\" , \"description\" ) @tanjun . as_user_menu ( \"name\" ) async def user_command ( ctx : tanjun . abc . Context , user : Annotated [ annotations . User , \"A user\" ], ) -> None : ... And here we use with_cooldown to mark these commands as using the \"main_commands\" cooldown bucket; buckets share their cooldowns for a resource across all the commands under it. For more information on the resources cooldowns can be set for see BucketResource .","title":"Cooldowns"},{"location":"usage/#localisation","text":"Localisation allows for tailoring the declarations and responses of slash commands and context menu commands to match specific regions through by providing multiple translations of a field. Localisation on Discord is limited to the locales Discord supports (listed at hikari.locales.Locale ).","title":"Localisation"},{"location":"usage/#localising-command-declarations","text":"@tanjun . as_slash_command ({ hikari . Locale . ES_US : \"Hola\" }, \"description\" ) For fields which support localisation you've previously seen a single string being passed to them: this value is used as a default for all locales and for environments which don't support localisation (e.g. message command execution). But as shown above, you can also pass a dictionary of localised values to these fields.","title":"Localising command declarations"},{"location":"usage/#client-localiser","text":"Tanjun also provides an optional global localiser which allows for setting/overriding the locale-specific variants used for localised fields such as error message responses and application fields globally. import tanjun client = tanjun . Client . from_gateway_bot ( ... ) ( tanjun . dependencies . BasicLocaliser () . set_overrides ( \"slash:command name:name\" , { hikari . Locale . EN_US : \"american variant\" , hikari . Locale . EN_GB : \"english variant\" } ) . set_overrides ( \"message_menu:command name:check:tanjun.OwnerCheck\" , { hikari . Locale . JA : \"konnichiwa\" , hikari . Locale . ES_ES : \"Hola\" } ) . add_to_client ( client ) ) Specific fields may be overridden by their ID as shown above. There is no guaranteed format for field IDs but the standard implementations will always use the following formats unless explicitly overridden: Checks and limiters: f\"{command_type}:{command_name}:check:{check_name}\" Command descriptions: f\"{command_type}:{command_name}:description\" Command names: f\"{command_type}:{command_name}:name\" Slash option names: f\"slash:{command_name}:option.name:{option_name}\" Slash option descriptions: f\"slash:{command_name}:option.description:{option_name}\" command_type may be one of \"message_menu\" , \"slash\" or \"user_menu\" , command_name will be the full name of the command (including parent command names in the path), and standard check names will always be prefixed with \"tanjun.\" . It's highly recommended that 3rd party libraries match this format if possible.","title":"Client localiser"},{"location":"usage/#localising-command-responses","text":"LOCALISED_RESPONSES = { hikari . Locale . DA : \"Hej\" , hikari . Locale . DE : \"Hallo\" , hikari . Locale . EN_GB : \"Good day fellow sir\" , hikari . Locale . EN_US : \"*shoots you*\" , hikari . Locale . ES_ES : \"Hola\" , hikari . Locale . FR : \"Bonjour, camarade baguette\" , hikari . Locale . PL : \"Musimy szerzy\u0107 gejostwo w Strefach wolnych od LGBT, musimy zrobi\u0107 rajd gejowski\" , hikari . Locale . SV_SE : \"Hej, jag \u00e4lskar min Bl\u00e5haj\" , hikari . Locale . VI : \"Xin ch\u00e0o, C\u00e2y n\u00f3i ti\u1ebfng Vi\u1ec7t\" , hikari . Locale . TR : \"Merhaba\" , hikari . Locale . CS : \"Ahoj\" , hikari . Locale . ZH_CN : \"\u81ea\u7531\u9999\u6e2f\" , hikari . Locale . JA : \"\u3053\u3093\u306b\u3061\u306f\u3001\u30a2\u30cb\u30e1\u306e\u5973\u306e\u5b50\u3060\u3063\u305f\u3089\u3044\u3044\u306e\u306b\" , hikari . Locale . ZH_TW : \"\u8ba9\u53f0\u6e7e\u81ea\u7531\" , } @tanjun . as_slash_command ( \"name\" , \"description\" ) async def as_slash_command ( ctx : tanjun . abc . SlashContext ) -> None : await ctx . respond ( LOCALISED_RESPONSES . get ( ctx . interaction . locale , \"hello\" )) tanjun.abc.AppCommandContext.interaction (base class for both tanjun.abc.SlashContext and tanjun.abc.MenuContext ) both have the fields guild_locale and locale which provide the set locale of the guild and the user triggering the command respectively. This locale can be used to localise responses to specific languages within your own code.","title":"Localising command responses"},{"location":"reference/","text":"tanjun # A flexible command framework designed to extend Hikari. Examples: A Tanjun client can be quickly initialised from a Hikari gateway bot through tanjun.Client.from_gateway_bot , this enables both slash (interaction) and message command execution: bot = hikari . GatewayBot ( \"BOT_TOKEN\" ) # As a note, unless event_managed=False is passed here then this client # will be managed based on gateway startup and stopping events. # mention_prefix=True instructs the client to also set mention prefixes on the # first startup. client = tanjun . Client . from_gateway_bot ( bot , declare_global_commands = True , mention_prefix = True ) component = tanjun . Component () client . add_component ( component ) # Declare a message command with some basic parser logic. @component . with_command @tanjun . with_greedy_argument ( \"name\" , default = \"World\" ) @tanjun . as_message_command ( \"test\" ) async def test_command ( ctx : tanjun . abc . Context , name : str ) -> None : await ctx . respond ( f \"Hello, { name } !\" ) # Declare a ping slash command @component . with_command @tanjun . with_user_slash_option ( \"user\" , \"The user facing command option's description\" , default = None ) @tanjun . as_slash_command ( \"hello\" , \"The command's user facing description\" ) async def hello ( ctx : tanjun . abc . Context , user : hikari . User | None ) -> None : user = user or ctx . author await ctx . respond ( f \"Hello, { user } !\" ) Alternatively, the client can also be built from a RESTBot but this will only enable slash (interaction) command execution: bot = hikari . RESTBot ( \"BOT_TOKEN\" , \"Bot\" ) # declare_global_commands=True instructs the client to set the global commands # for the relevant bot on first startup (this will replace any previously # declared commands). # # `bot_managed=True` has to be explicitly passed here to indicate that the client # should automatically start when the linked REST bot starts. client = tanjun . Client . from_rest_bot ( bot , bot_managed = True , declare_global_commands = True ) # This will load components from modules based on loader functions. # For more information on this see [tanjun.as_loader][]. client . load_modules ( \"module.paths\" ) # Thanks to `bot_managed=True`, this will also start the client. bot . run () For more extensive examples see the repository's examples . There are also written tutorials that cover making a bot from scratch through to advanced concepts like Dependency Injection. AnyHooks module-attribute # AnyHooks = Hooks [ tanjun . Context ] Hooks that can be used with any context. Note This is shorthand for Hooks[tanjun.abc.Context] . MessageHooks module-attribute # MessageHooks = Hooks [ tanjun . MessageContext ] Hooks that can be used with a message context. Note This is shorthand for Hooks[tanjun.abc.MessageContext] . MissingDependencyError module-attribute # MissingDependencyError = alluka . MissingDependencyError Type alias of alluka.MissingDependencyError . SlashHooks module-attribute # SlashHooks = Hooks [ tanjun . SlashContext ] Hooks that can be used with a slash context. Note This is shorthand for Hooks[tanjun.abc.SlashContext] . to_channel module-attribute # to_channel : typing . Final [ ToChannel ] = ToChannel () Convert user input to a hikari.channels.PartialChannel object. to_colour module-attribute # to_colour : typing . Final [ collections . Callable [[ _ArgumentT ], hikari . Color ]] = to_color Convert user input to a hikari.colors.Color object. to_emoji module-attribute # to_emoji : typing . Final [ ToEmoji ] = ToEmoji () Convert user input to a cached hikari.emojis.KnownCustomEmoji object. Note If you just want to convert inpute to a hikari.emojis.Emoji , hikari.emojis.CustomEmoji or hikari.emojis.UnicodeEmoji without making any cache or REST calls then you can just use the relevant hikari.emojis.Emoji.parse , hikari.emojis.CustomEmoji.parse or hikari.emojis.UnicodeEmoji.parse methods. to_guild module-attribute # to_guild : typing . Final [ ToGuild ] = ToGuild () Convert user input to a hikari.guilds.Guild object. to_invite module-attribute # to_invite : typing . Final [ ToInvite ] = ToInvite () Convert user input to a cached hikari.invites.InviteWithMetadata object. to_invite_with_metadata module-attribute # to_invite_with_metadata : typing . Final [ ToInviteWithMetadata ] = ToInviteWithMetadata () Convert user input to a hikari.invites.Invite object. to_member module-attribute # to_member : typing . Final [ ToMember ] = ToMember () Convert user input to a hikari.guilds.Member object. to_message module-attribute # to_message : typing . Final [ ToMessage ] = ToMessage () Convert user input to a hikari.messages.Message object. to_presence module-attribute # to_presence : typing . Final [ ToPresence ] = ToPresence () Convert user input to a cached hikari.presences.MemberPresence . to_role module-attribute # to_role : typing . Final [ ToRole ] = ToRole () Convert user input to a hikari.guilds.Role object. to_snowflake module-attribute # to_snowflake : typing . Final [ collections . Callable [[ _ArgumentT ], hikari . Snowflake ]] = parse_snowflake Convert user input to a hikari.snowflakes.Snowflake . Note This also range validates the input. to_user module-attribute # to_user : typing . Final [ ToUser ] = ToUser () Convert user input to a hikari.users.User object. to_voice_state module-attribute # to_voice_state : typing . Final [ ToVoiceState ] = ToVoiceState () Convert user input to a cached hikari.voices.VoiceState . BucketResource # Bases: int , enum . Enum Resource target types used within command calldowns and concurrency limiters. CHANNEL class-attribute # CHANNEL = 2 A per-channel resource bucket. GLOBAL class-attribute # GLOBAL = 7 A global resource bucket. GUILD class-attribute # GUILD = 6 A per-guild resource bucket. When executed in a DM this will be per-DM. MEMBER class-attribute # MEMBER = 1 A per-guild member resource bucket. When executed in a DM this will be per-DM. PARENT_CHANNEL class-attribute # PARENT_CHANNEL = 3 A per-parent channel resource bucket. For DM channels this will be per-DM, for guild channels with no parents this'll be per-guild. TOP_ROLE class-attribute # TOP_ROLE = 5 A per-highest role resource bucket. When executed in a DM this will be per-DM, with this defaulting to targeting the @everyone role if they have no real roles. USER class-attribute # USER = 0 A per-user resource bucket. Client # Bases: tanjun . Client Tanjun's standard tanjun.abc.Client implementation. This implementation supports dependency injection for checks, command callbacks, prefix getters and event listeners. For more information on how this works see alluka . When manually managing the lifetime of the client the linked rest app or bot must always be started before the Tanjun client. Note By default this client includes a parser error handling hook which will by overwritten if you call tanjun.Client.set_hooks . __init__ # __init__ ( rest , * , cache = None , events = None , server = None , shards = None , voice = None , event_managed = False , injector = None , mention_prefix = False , set_global_commands = False , declare_global_commands = False , command_ids = None , message_ids = None , user_ids = None , _stack_level = 0 ) Initialise a Tanjun client. Note For a quicker way to initiate this client around a standard bot aware client, see tanjun.Client.from_gateway_bot and tanjun.Client.from_rest_bot . PARAMETER DESCRIPTION rest The Hikari REST client this will use. TYPE: hikari . api . RESTClient cache The Hikari cache client this will use if applicable. TYPE: typing . Optional [ hikari . api . Cache ] DEFAULT: None events The Hikari event manager client this will use if applicable. This is necessary for message command dispatch and will also be necessary for interaction command dispatch if server isn't provided. TYPE: typing . Optional [ hikari . api . EventManager ] DEFAULT: None server The Hikari interaction server client this will use if applicable. This is used for interaction command dispatch if interaction events aren't being received from the event manager. TYPE: typing . Optional [ hikari . api . InteractionServer ] DEFAULT: None shards The Hikari shard aware client this will use if applicable. TYPE: typing . Optional [ hikari . ShardAware ] DEFAULT: None voice The Hikari voice component this will use if applicable. TYPE: typing . Optional [ hikari . api . VoiceComponent ] DEFAULT: None event_managed Whether or not this client is managed by the event manager. An event managed client will be automatically started and closed based on Hikari's lifetime events. This can only be passed as True if events is also provided. TYPE: bool DEFAULT: False injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None mention_prefix Whether or not mention prefixes should be automatically set when this client is first started. It should be noted that this only applies to message commands. TYPE: bool DEFAULT: False declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None RAISES DESCRIPTION ValueError Raises for the following reasons: If event_managed is True when event_manager is None . If command_ids is passed when multiple guild ids are provided for declare_global_commands . If command_ids is passed when declare_global_commands is False . add_check # add_check ( check ) Add a generic check to this client. This will be applied to both message and slash command execution. PARAMETER DESCRIPTION check The check to add. This may be either synchronous or asynchronous and must take one positional argument of type tanjun.abc.Context with dependency injection being supported for its keyword arguments. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self The client instance to enable chained calls. add_component # add_component ( component ) Add a component to this client. PARAMETER DESCRIPTION component The component to move to this client. TYPE: tanjun . Component RETURNS DESCRIPTION Self The client instance to allow chained calls. RAISES DESCRIPTION ValueError If the component's name is already registered. add_prefix # add_prefix ( prefixes ) Add a prefix used to filter message command calls. This will be matched against the first character(s) in a message's content to determine whether the message command search stage of execution should be initiated. PARAMETER DESCRIPTION prefixes Either a single string or an iterable of strings to be used as prefixes. TYPE: typing . Union [ collections . Iterable [ str ], str ] RETURNS DESCRIPTION Self The client instance to enable chained calls. checks property # checks () Collection of the level tanjun.abc.Context checks registered to this client. Note These may be taking advantage of the standard dependency injection. close async # close ( * , deregister_listeners = True ) Close the client. RAISES DESCRIPTION RuntimeError If the client isn't running. fetch_rest_application_id async # fetch_rest_application_id () Fetch the ID of the application this client is linked to. RETURNS DESCRIPTION hikari . Snowflake The application ID of the application this client is linked to. from_gateway_bot classmethod # from_gateway_bot ( bot , / , * , event_managed = True , injector = None , mention_prefix = False , declare_global_commands = False , set_global_commands = False , command_ids = None , message_ids = None , user_ids = None ) Build a tanjun.Client from a hikari.traits.GatewayBotAware instance. Note This defaults the client to human only mode and sets type dependency injectors for the hikari traits present in bot (including hikari.traits.GatewayBotAware ). PARAMETER DESCRIPTION bot The bot client to build from. This will be used to infer the relevant Hikari clients to use. TYPE: hikari . GatewayBotAware event_managed Whether or not this client is managed by the event manager. An event managed client will be automatically started and closed based on Hikari's lifetime events. TYPE: bool DEFAULT: True injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None mention_prefix Whether or not mention prefixes should be automatically set when this client is first started. It should be noted that this only applies to message commands. TYPE: bool DEFAULT: False declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the commands to update. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None from_rest_bot classmethod # from_rest_bot ( bot , / , * , bot_managed = False , declare_global_commands = False , injector = None , set_global_commands = False , command_ids = None , message_ids = None , user_ids = None ) Build a tanjun.Client from a hikari.traits.RESTBotAware instance. Note This sets type dependency injectors for the hikari traits present in bot (including hikari.traits.RESTBotAware ). PARAMETER DESCRIPTION bot The bot client to build from. TYPE: hikari . RESTBotAware declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False bot_managed Whether the client should be managed by the REST bot. A REST bot managed client will be automatically started and closed based on the REST bot's startup and shutdown callbacks. TYPE: bool DEFAULT: False injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None hooks property # hooks () Top level tanjun.abc.AnyHooks set for this client. These are called during both message, menu and slash command execution. interaction_accepts property # interaction_accepts () The types of interactions this client is executing. is_human_only property # is_human_only () Whether this client is only executing for non-bot/webhook users messages. menu_hooks property # menu_hooks () Top level tanjun.abc.MenuHooks set for this client. These are only called during menu command execution. message_accepts property # message_accepts () Type of message create events this command client accepts for execution. message_hooks property # message_hooks () Top level tanjun.abc.MessageHooks set for this client. These are only called during message command execution. on_autocomplete_interaction_request async # on_autocomplete_interaction_request ( interaction ) Execute a command autocomplete based on received REST requests. PARAMETER DESCRIPTION interaction The interaction to execute autocomplete based on. TYPE: hikari . AutocompleteInteraction RETURNS DESCRIPTION hikari . api . InteractionAutocompleteBuilder The initial response to send back to Discord. on_command_interaction_request async # on_command_interaction_request ( interaction ) Execute an app command based on received REST requests. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . CommandInteraction RETURNS DESCRIPTION hikari . api . InteractionMessageBuilder | hikari . api . InteractionDeferredBuilder The initial response to send back to Discord. on_gateway_autocomplete_create async # on_gateway_autocomplete_create ( interaction ) Execute command autocomplete based on a received gateway interaction create. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . AutocompleteInteraction on_gateway_command_create async # on_gateway_command_create ( interaction ) Execute an app command based on a received gateway interaction create. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . CommandInteraction on_interaction_create_event async # on_interaction_create_event ( event ) Handle a gateway interaction create event. This will execute both application command and autocomplete interactions. PARAMETER DESCRIPTION event The event to execute commands based on. TYPE: hikari . InteractionCreateEvent on_message_create_event async # on_message_create_event ( event ) Execute a message command based on a gateway event. PARAMETER DESCRIPTION event The event to handle. TYPE: hikari . MessageCreateEvent open async # open ( * , register_listeners = True ) Start the client. If mention_prefix was passed to tanjun.Client. init or tanjun.Client.from_gateway_bot then this function may make a fetch request to Discord if it cannot get the current user from the cache. RAISES DESCRIPTION RuntimeError If the client is already active. prefix_getter property # prefix_getter () Prefix getter method set for this client. For more information on this callback's signature see tanjun.clients.PrefixGetterSig . prefixes property # prefixes () Collection of the standard prefixes set for this client. remove_check # remove_check ( check ) Remove a check from the client. PARAMETER DESCRIPTION check The check to remove. TYPE: tanjun . CheckSig RAISES DESCRIPTION ValueError If the check was not previously added. remove_prefix # remove_prefix ( prefix ) Remove a message content prefix from the client. PARAMETER DESCRIPTION prefix The prefix to remove. TYPE: str RAISES DESCRIPTION ValueError If the prefix is not registered with the client. RETURNS DESCRIPTION Self The client instance to enable chained calls. set_auto_defer_after # set_auto_defer_after ( time ) Set when this client should automatically defer execution of commands. Warning If time is set to None then automatic deferrals will be disabled. This may lead to unexpected behaviour. PARAMETER DESCRIPTION time The time in seconds to defer interaction command responses after. TYPE: typing . Optional [ float ] set_autocomplete_ctx_maker # set_autocomplete_ctx_maker ( maker = context . AutocompleteContext ) Set the autocomplete context maker to use when creating contexts. Warning The caller must return an instance of tanjun.context.AutocompleteContext rather than just any implementation of the AutocompleteContext abc due to this client relying on implementation detail of tanjun.context.AutocompleteContext . PARAMETER DESCRIPTION maker The autocomplete context maker to use. This is a callback which should match the signature of tanjun.context.AutocompleteContext. init and return an instance of tanjun.context.AutocompleteContext . TYPE: _AutocompleteContextMakerProto DEFAULT: context.AutocompleteContext RETURNS DESCRIPTION Self This client to enable method chaining. set_case_sensitive # set_case_sensitive ( state ) Set whether this client defaults to being case sensitive for message commands. PARAMETER DESCRIPTION state Whether this client's message commands should be matched case-sensitively. This may be overridden by component specific configuration. TYPE: bool set_default_app_command_permissions # set_default_app_command_permissions ( permissions ) Set the default member permissions needed for this client's commands. Warning This may be overridden by guild staff and does not apply to admins. PARAMETER DESCRIPTION permissions The default member permissions needed for this client's application commands. This may be overridden by tanjun.abc.AppCommand.default_member_permissions and tanjun.abc.Component.default_app_cmd_permissions ; if this is left as None then this config will be inherited from the parent client. TYPE: typing . Union [ int , hikari . Permissions ] RETURNS DESCRIPTION Self This client to enable method chaining. set_dms_enabled_for_app_cmds # set_dms_enabled_for_app_cmds ( state ) Set whether this clients's commands should be enabled in DMs. PARAMETER DESCRIPTION state Whether to enable this client's commands in DMs. This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and tanjun.abc.Component.dms_enabled_for_app_cmds ; if this is left as None then this config will be inherited from the parent client. TYPE: bool RETURNS DESCRIPTION Self This client to enable method chaining. set_ephemeral_default # set_ephemeral_default ( state ) Set whether slash contexts spawned by this client should default to ephemeral responses. This defaults to False if not explicitly set. PARAMETER DESCRIPTION state Whether slash command contexts executed in this client should should default to ephemeral. This will be overridden by any response calls which specify flags. TYPE: bool RETURNS DESCRIPTION Self This client to enable method chaining. set_global_commands async # set_global_commands ( * , application = None , guild = hikari . UNDEFINED , force = False ) Alias of tanjun.Client.declare_global_commands . deprecated Since v2.1.1a1; use tanjun.Client.declare_global_commands instead. set_hikari_trait_injectors # set_hikari_trait_injectors ( bot ) Set type based dependency injection based on the hikari traits found in bot . This is a short hand for calling tanjun.Client.add_type_dependency for all the hikari trait types bot is valid for with bot. PARAMETER DESCRIPTION bot The hikari client to set dependency injectors for. TYPE: hikari . RESTAware set_hooks # set_hooks ( hooks ) Set the general command execution hooks for this client. The callbacks within this hook will be added to every slash and message command execution started by this client. PARAMETER DESCRIPTION hooks The general command execution hooks to set for this client. Passing None will remove all hooks. TYPE: typing . Optional [ tanjun . AnyHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls. set_human_only # set_human_only ( value = True ) Set whether or not message commands execution should be limited to \"human\" users. Note This doesn't apply to interaction commands as these can only be triggered by a \"human\" (normal user account). PARAMETER DESCRIPTION value Whether or not message commands execution should be limited to \"human\" users. Passing True here will prevent message commands from being executed based on webhook and bot messages. TYPE: bool DEFAULT: True set_interaction_accepts # set_interaction_accepts ( accepts ) Set the kind of interactions this client should execute. PARAMETER DESCRIPTION accepts Bitfield of the interaction types this client should execute. TYPE: InteractionAcceptsEnum RAISES DESCRIPTION RuntimeError If called while the client is running. set_interaction_not_found # set_interaction_not_found ( message ) Set the response message for when an interaction command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when an interaction command isn't found. TYPE: typing . Optional [ str ] set_menu_ctx_maker # set_menu_ctx_maker ( maker = context . MenuContext ) Set the autocomplete context maker to use when creating contexts. Warning The caller must return an instance of tanjun.context.MenuContext rather than just any implementation of the MenuContext abc due to this client relying on implementation detail of tanjun.context.MenuContext . PARAMETER DESCRIPTION maker The autocomplete context maker to use. This is a callback which should match the signature of tanjun.context.MenuContext. init and return an instance of tanjun.context.MenuContext . TYPE: _MenuContextMakerProto DEFAULT: context.MenuContext RETURNS DESCRIPTION Self This client to enable method chaining. set_menu_hooks # set_menu_hooks ( hooks ) Set the menu command execution hooks for this client. The callbacks within this hook will be added to every menu command execution started by this client. PARAMETER DESCRIPTION hooks The menu context specific command execution hooks to set for this client. Passing None will remove the hooks. TYPE: typing . Optional [ tanjun . MenuHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls. set_menu_not_found # set_menu_not_found ( message ) Set the response message for when a menu command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when a menu command isn't found. TYPE: typing . Optional [ str ] set_message_accepts # set_message_accepts ( accepts ) Set the kind of messages commands should be executed based on. PARAMETER DESCRIPTION accepts The type of messages commands should be executed based on. TYPE: MessageAcceptsEnum RAISES DESCRIPTION RuntimeError If called while the client is running. ValueError If accepts is set to anything other than tanjun.clients.MessageAcceptsEnum.NONE when the client doesn't have a linked event manager. set_message_ctx_maker # set_message_ctx_maker ( maker = context . MessageContext ) Set the message context maker to use when creating context for a message. Warning The caller must return an instance of tanjun.context.MessageContext rather than just any implementation of the MessageContext abc due to this client relying on implementation detail of tanjun.context.MessageContext . PARAMETER DESCRIPTION maker The message context maker to use. This is a callback which should match the signature of tanjun.context.MessageContext. init and return an instance of tanjun.context.MessageContext . TYPE: _MessageContextMakerProto DEFAULT: context.MessageContext RETURNS DESCRIPTION Self This client to enable method chaining. set_message_hooks # set_message_hooks ( hooks ) Set the message command execution hooks for this client. The callbacks within this hook will be added to every message command execution started by this client. PARAMETER DESCRIPTION hooks The message context specific command execution hooks to set for this client. Passing None will remove all hooks. TYPE: typing . Optional [ tanjun . MessageHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls. set_prefix_getter # set_prefix_getter ( getter ) Set the callback used to retrieve message prefixes set for the relevant guild. PARAMETER DESCRIPTION getter The callback which'll be used to retrieve prefixes for the guild a message context is from. If None is passed here then the callback will be unset. This should be an async callback which one argument of type tanjun.abc.MessageContext and returns an iterable of string prefixes. Dependency injection is supported for this callback's keyword arguments. TYPE: typing . Optional [ PrefixGetterSig ] RETURNS DESCRIPTION Self The client instance to enable chained calls. set_slash_ctx_maker # set_slash_ctx_maker ( maker = context . SlashContext ) Set the slash context maker to use when creating context for a slash command. Warning The caller must return an instance of tanjun.context.SlashContext rather than just any implementation of the SlashContext abc due to this client relying on implementation detail of tanjun.context.SlashContext . PARAMETER DESCRIPTION maker The slash context maker to use. This is a callback which should match the signature of tanjun.context.SlashContext. init and return an instance of tanjun.context.SlashContext . TYPE: _SlashContextMakerProto DEFAULT: context.SlashContext RETURNS DESCRIPTION Self This client to enable method chaining. set_slash_hooks # set_slash_hooks ( hooks ) Set the slash command execution hooks for this client. The callbacks within this hook will be added to every slash command execution started by this client. PARAMETER DESCRIPTION hooks The slash context specific command execution hooks to set for this client. Passing None will remove the hooks. TYPE: typing . Optional [ tanjun . SlashHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls. set_slash_not_found # set_slash_not_found ( message ) Set the response message for when a slash command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when a slash command isn't found. TYPE: typing . Optional [ str ] slash_hooks property # slash_hooks () Top level tanjun.abc.SlashHooks set for this client. These are only called during slash command execution. with_check # with_check ( check ) Add a check to this client through a decorator call. PARAMETER DESCRIPTION check The check to add. This may be either synchronous or asynchronous and must take one positional argument of type tanjun.abc.Context with dependency injection being supported for its keyword arguments. TYPE: tanjun . abc . CheckSig RETURNS DESCRIPTION tanjun . abc . CheckSig The added check. with_prefix_getter # with_prefix_getter ( getter ) Set the prefix getter callback for this client through decorator call. Examples: client = tanjun . Client . from_rest_bot ( bot ) @client . with_prefix_getter async def prefix_getter ( ctx : tanjun . abc . MessageContext ) -> collections . abc . Iterable [ str ]: raise NotImplementedError PARAMETER DESCRIPTION getter The callback which'll be to retrieve prefixes for the guild a message event is from. This should be an async callback which one argument of type tanjun.abc.MessageContext and returns an iterable of string prefixes. Dependency injection is supported for this callback's keyword arguments. TYPE: PrefixGetterSig RETURNS DESCRIPTION PrefixGetterSig The registered callback. ClientCallbackNames # Bases: str , enum . Enum Enum of the standard client callback names. These should be dispatched by all tanjun.abc.Client implementations. CLOSED class-attribute # CLOSED = 'closed' Called when the client has finished closing. No positional arguments are provided for this event. CLOSING class-attribute # CLOSING = 'closing' Called when the client is initially instructed to close. No positional arguments are provided for this event. COMPONENT_ADDED class-attribute # COMPONENT_ADDED = 'component_added' Called when a component is added to an active client. Warning This event isn't dispatched for components which were registered while the client is inactive. The first positional argument is the tanjun.abc.Component being added. COMPONENT_REMOVED class-attribute # COMPONENT_REMOVED = 'component_removed' Called when a component is added to an active client. Warning This event isn't dispatched for components which were removed while the client is inactive. The first positional argument is the tanjun.abc.Component being removed. MENU_COMMAND_NOT_FOUND class-attribute # MENU_COMMAND_NOT_FOUND = 'menu_command_not_found' Called when a menu command is not found. tanjun.abc.MenuContext is provided as the first positional argument. MESSAGE_COMMAND_NOT_FOUND class-attribute # MESSAGE_COMMAND_NOT_FOUND = 'message_command_not_found' Called when a message command is not found. tanjun.abc.MessageContext is provided as the first positional argument. SLASH_COMMAND_NOT_FOUND class-attribute # SLASH_COMMAND_NOT_FOUND = 'slash_command_not_found' Called when a slash command is not found. tanjun.abc.SlashContext is provided as the first positional argument. STARTED class-attribute # STARTED = 'started' Called when the client has finished starting. No positional arguments are provided for this event. STARTING class-attribute # STARTING = 'starting' Called when the client is initially instructed to start. No positional arguments are provided for this event. CommandError # Bases: TanjunError An error which is sent as a response to the command call. __init__ # __init__ ( content = hikari . UNDEFINED , * , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Initialise a command error. PARAMETER DESCRIPTION content The content to respond with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None attachment A singular attachment to respond with. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments A sequence of attachments to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this response. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this response. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to respond with. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RAISES DESCRIPTION ValueError Raised for any of the following reasons: When both attachment and attachments are provided. When both component and components are passed. When both embed and embeds are passed. If more than 100 entries are passed for role_mentions . If more than 100 entries are passed for user_mentions . send async # send ( ctx , / , * , ensure_result = False ) Send this error as a command response. PARAMETER DESCRIPTION ctx The command call context to respond to. TYPE: tanjun . Context ensure_result Ensure that this call will always return a message object. If True then this will always return hikari.messages.Message , otherwise this will return hikari.Message | None . It's worth noting that, under certain scenarios within the slash command flow, this may lead to an extre request being made. TYPE: bool DEFAULT: False RAISES DESCRIPTION ValueError If delete_after would be more than 15 minutes after the slash command was called. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. Component # Bases: tanjun . Component Standard implementation of tanjun.abc.Component . This is a collcetion of commands (both message and slash), hooks and listener callbacks which can be added to a generic client. Note This implementation supports dependency injection for its checks, command callbacks and listeners when linked to a client which supports dependency injection. __init__ # __init__ ( * , name = None , strict = False ) Initialise a new component. PARAMETER DESCRIPTION name The component's identifier. If not provided then this will be a random string. TYPE: typing . Optional [ str ] DEFAULT: None strict Whether this component should use a stricter (more optimal) approach for message command search. When this is True , message command names will not be allowed to contain spaces and will have to be unique to one command within the component. TYPE: bool DEFAULT: False add_check # add_check ( check ) Add a command check to this component to be used for all its commands. PARAMETER DESCRIPTION check The check to add. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self This component to enable method chaining. add_client_callback # add_client_callback ( name , callback ) Add a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] callback The callback to register. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to. TYPE: tanjun . MetaEventSig RETURNS DESCRIPTION Self The client instance to enable chained calls. add_command # add_command ( command ) Add a command to this component. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . ExecutableCommand [ typing . Any ] RETURNS DESCRIPTION Self The current component to allow for chaining. add_message_command # add_message_command ( command ) Add a message command to the component. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The component to allow method chaining. RAISES DESCRIPTION ValueError If one of the command's name is already registered in a strict component. add_on_close # add_on_close ( callback ) Add a close callback to this component. Note Unlike the closing and closed client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The close callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION Self The component object to enable call chaining. add_on_open # add_on_open ( callback ) Add a open callback to this component. Note Unlike the starting and started client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The open callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION Self The component object to enable call chaining. add_schedule # add_schedule ( schedule ) Add a schedule to the component. PARAMETER DESCRIPTION schedule The schedule to add. TYPE: schedules_ . AbstractSchedule RETURNS DESCRIPTION Self The component itself for chaining. checks property # checks () Collection of the checks being run against every command execution in this component. get_client_callbacks # get_client_callbacks ( name ) Get a collection of the callbacks registered for a specific name. PARAMETER DESCRIPTION name The name to get the callbacks registered for. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Collection [ MetaEventSig ] Collection of the callbacks for the provided name. hooks property # hooks () The general command hooks set for this component, if any. load_from_scope # load_from_scope ( * , include_globals = False , scope = None ) Load entries such as top-level commands into the component from the calling scope. Note This will load schedules which support and commands AbstractComponentLoader (all standard implementations support this) and will ignore commands which are owned by command groups. Note This will detect entries from the calling scope which implement tanjun.components.AbstractComponentLoader unless scope is passed but this isn't possible in a stack-less python implementation; in stack-less environments the scope will have to be explicitly passed as scope . PARAMETER DESCRIPTION include_globals Whether to include global variables (along with local) while detecting from the calling scope. This cannot be True when scope is provided and will only ever be needed when the local scope is different from the global scope. TYPE: bool DEFAULT: False scope The scope to detect entries which implement tanjun.components.AbstractComponentLoader from. This overrides the default usage of stackframe introspection. TYPE: typing . Optional [ collections . Mapping [ str , typing . Any ]] DEFAULT: None RETURNS DESCRIPTION Self The current component to allow for chaining. RAISES DESCRIPTION RuntimeError If this is called in a python implementation which doesn't support stack frame inspection when scope is not provided. ValueError If scope is provided when include_globals is True. make_loader # make_loader ( * , copy = True ) Make a loader/unloader for this component. This enables loading, unloading and reloading of this component into a client by targeting the module using tanjun.Client.load_modules , tanjun.Client.unload_modules and tanjun.Client.reload_modules . PARAMETER DESCRIPTION copy Whether to copy the component before loading it into a client. TYPE: bool DEFAULT: True RETURNS DESCRIPTION tanjun . abc . ClientLoader The loader for this component. menu_hooks property # menu_hooks () The menu command hooks set for this component, if any. message_hooks property # message_hooks () The message command hooks set for this component, if any. remove_check # remove_check ( check ) Remove a command check from this component. PARAMETER DESCRIPTION check The check to remove. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self This component to enable method chaining. RAISES DESCRIPTION ValueError If the check is not registered with this component. remove_client_callback # remove_client_callback ( name , callback ) Remove a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: str callback The callback to remove from the client's callbacks. TYPE: tanjun . MetaEventSig RAISES DESCRIPTION KeyError If the provided name isn't found. ValueError If the provided callback isn't found. RETURNS DESCRIPTION Self The client instance to enable chained calls. remove_command # remove_command ( command ) Remove a command from this component. PARAMETER DESCRIPTION command The command to remove. TYPE: tanjun . ExecutableCommand [ typing . Any ] RETURNS DESCRIPTION Self This component to enable method chaining. remove_schedule # remove_schedule ( schedule ) Remove a schedule from the component. PARAMETER DESCRIPTION schedule The schedule to remove TYPE: schedules_ . AbstractSchedule RETURNS DESCRIPTION Self The component itself for chaining. RAISES DESCRIPTION ValueError If the schedule isn't registered. schedules property # schedules () Collection of the schedules registered to this component. set_case_sensitive # set_case_sensitive ( state ) Set whether this component defaults to being case sensitive for component. PARAMETER DESCRIPTION state Whether this component's message commands should be matched case-sensitively. If this is left as None then the client's case-sensitive setting will be used. TYPE: typing . Optional [ bool ] set_default_app_command_permissions # set_default_app_command_permissions ( permissions ) Set the default member permissions needed for this component's commands. Warning This may be overridden by guild staff and does not apply to admins. PARAMETER DESCRIPTION permissions The default member permissions needed for this component's application commands. If this is left as None then this config will be inherited from the parent client. This may be overridden by tanjun.abc.AppCommand.default_member_permissions and if this is left as None then this config will be inherited from the parent client. TYPE: typing . Union [ int , hikari . Permissions , None] RETURNS DESCRIPTION Self This client to enable method chaining. set_dms_enabled_for_app_cmds # set_dms_enabled_for_app_cmds ( state ) Set whether this component's commands should be enabled in DMs. PARAMETER DESCRIPTION state Whether to enable this component's commands in DMs. This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and if this is left as None then this config will be inherited from the parent client. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This client to enable method chaining. set_ephemeral_default # set_ephemeral_default ( state ) Set whether slash contexts executed in this component should default to ephemeral responses. PARAMETER DESCRIPTION state Whether slash command contexts executed in this component should should default to ephemeral. This will be overridden by any response calls which specify flags. Setting this to None will let the default set on the parent client propagate and decide the ephemeral default behaviour. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This component to enable method chaining. set_hooks # set_hooks ( hooks ) Set hooks to be called during the execution of all of this component's commands. PARAMETER DESCRIPTION hooks The command hooks to set. TYPE: typing . Optional [ tanjun . AnyHooks ] RETURNS DESCRIPTION Self This component to enable method chaining. set_menu_hooks # set_menu_hooks ( hooks ) Set hooks to be called during the execution of this component's menu commands. PARAMETER DESCRIPTION hooks The menu command hooks to set. TYPE: typing . Optional [ tanjun . MenuHooks ] RETURNS DESCRIPTION Self This component to enable method chaining. set_message_hooks # set_message_hooks ( hooks ) Set hooks to be called during the execution of this component's message commands. PARAMETER DESCRIPTION hooks The message command hooks to set. TYPE: typing . Optional [ tanjun . MessageHooks ] RETURNS DESCRIPTION Self This component to enable method chaining. set_slash_hooks # set_slash_hooks ( hooks ) Set hooks to be called during the execution of this component's slash commands. PARAMETER DESCRIPTION hooks The slash command hooks to set. TYPE: typing . Optional [ tanjun . SlashHooks ] RETURNS DESCRIPTION Self This component to enable method chaining. slash_hooks property # slash_hooks () The slash command hooks set for this component, if any. with_check # with_check ( check ) Add a general command check to this component through a decorator call. PARAMETER DESCRIPTION check The check to add. TYPE: tanjun . abc . CheckSig RETURNS DESCRIPTION tanjun . abc . CheckSig The added check. with_client_callback # with_client_callback ( name ) Add a client callback through a decorator call. Examples: client = tanjun . Client . from_rest_bot ( bot ) @client . with_client_callback ( \"closed\" ) async def on_close () -> None : raise NotImplementedError PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MetaEventSig ], tanjun . abc . MetaEventSig ] Decorator callback used to register the client callback. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to. with_command # with_command ( command = None , / , * , copy = False , follow_wrapped = False ) Add a command to this component through a decorator call. Examples: This may be used inconjunction with tanjun.as_slash_command and tanjun.as_message_command . @component . with_command @tanjun . with_slash_str_option ( \"option_name\" , \"option description\" ) @tanjun . as_slash_command ( \"command_name\" , \"command description\" ) async def slash_command ( ctx : tanjun . abc . Context , arg : str ) -> None : await ctx . respond ( f \"Hi { arg } \" ) @component . with_command @tanjun . with_argument ( \"argument_name\" ) @tanjun . as_message_command ( \"command_name\" ) async def message_command ( ctx : tanjun . abc . Context , arg : str ) -> None : await ctx . respond ( f \"Hi { arg } \" ) PARAMETER DESCRIPTION command The command to add to this component. TYPE: typing . Optional [ _CommandT ] DEFAULT: None copy Whether to copy the command before adding it to this component. TYPE: bool DEFAULT: False follow_wrapped Whether to also add any commands command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The added command. with_on_close # with_on_close ( callback ) Add a close callback to this component through a decorator call. Note Unlike the closing and closed client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The close callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION OnCallbackSig The added close callback. with_on_open # with_on_open ( callback ) Add a open callback to this component through a decorator call. Note Unlike the starting and started client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The open callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION OnCallbackSig The added open callback. with_schedule # with_schedule ( schedule ) Add a schedule to the component through a decorator call. Example # This may be used in conjunction with tanjun.as_interval . @component . with_schedule @tanjun . as_interval ( 60 ) async def my_schedule (): print ( \"I'm running every minute!\" ) PARAMETER DESCRIPTION schedule The schedule to add. TYPE: tanjun . schedules . AbstractSchedule RETURNS DESCRIPTION tanjun . schedules . AbstractSchedule The added schedule. ConversionError # Bases: ParserError Error raised by a parser parameter when it failed to converter a value. parameter class-attribute # parameter : str Name of the parameter this error was raised for. __init__ # __init__ ( message , parameter , / , errors = ()) Initialise a conversion error. PARAMETER DESCRIPTION parameter The parameter this was raised by. TYPE: str errors An iterable of the source value errors which were raised during conversion. TYPE: collections . Iterable [ ValueError ] DEFAULT: () FailedCheck # Bases: TanjunError , RuntimeError Error raised as an alternative to returning False in a check. FailedModuleImport # Bases: FailedModuleLoad Error raised when a module failed to import. This is a specialisation of tanjun.errors.FailedModuleLoad . FailedModuleLoad # Bases: TanjunError Error raised when a module fails to load. This may be raised by the module failing to import or by one of its loaders erroring. This source error can be accessed at FailedModuleLoad. cause . __cause__ class-attribute # __cause__ : Exception The root error. path property # path () The path of the module which caused the error. FailedModuleUnload # Bases: TanjunError Error raised when a module fails to unload. This may be raised by the module failing to import or by one of its unloaders erroring. The source error can be accessed at FailedModuleUnload. cause . __cause__ class-attribute # __cause__ : Exception The root error. path property # path () The path of the module which caused the error. HaltExecution # Bases: TanjunError Error raised while looking for a command in-order to end-execution early. For the most part, this will be raised during checks in-order to prevent other commands from being tried. Hooks # Bases: tanjun . Hooks [ _ContextT_contra ] Standard implementation of tanjun.abc.Hooks used for command execution. This will take either tanjun.abc.Context , tanjun.abc.MessageContext or tanjun.abc.SlashContext dependent on what its bound by (generic wise). Note This implementation adds a concept of parser errors which won't be dispatched to general \"error\" hooks and do not share the error suppression semantics as they favour to always suppress the error if a registered handler is found. __init__ # __init__ () Initialise a command hook object. add_to_command # add_to_command ( command ) Add this hook object to a command. Note This will likely override any previously added hooks. Examples: This method may be used as a command decorator: @standard_hooks . add_to_command @as_message_command ( \"command\" ) async def command_command ( ctx : tanjun . abc . Context ) -> None : await ctx . respond ( \"You've called a command!\" ) PARAMETER DESCRIPTION command The command to add the hooks to. TYPE: tanjun . abc . ExecutableCommand RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command with the hooks added. copy # copy () Copy this hook object. set_on_error # set_on_error ( callback ) Set the error callback for this hook object. Note This will not be called for tanjun.ParserError s as these are generally speaking expected. To handle those see Hooks.set_on_parser_error . PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take two positional arguments (of type tanjun.abc.Context and Exception ) and may be either synchronous or asynchronous. Returning True indicates that the error should be suppressed, False that it should be re-raised and None that no decision has been made. This will be accounted for along with the decisions other error hooks make by majority rule. TYPE: typing . Optional [ tanjun . ErrorHookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining. set_on_parser_error # set_on_parser_error ( callback ) Set the parser error callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take two positional arguments (of type tanjun.abc.Context and tanjun.ParserError ), return None and may be either synchronous or asynchronous. It's worth noting that, unlike general error handlers, this will always suppress the error. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining. set_on_success # set_on_success ( callback ) Set the success callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining. set_post_execution # set_post_execution ( callback ) Set the post-execution callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining. set_pre_execution # set_pre_execution ( callback ) Set the pre-execution callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining. HotReloader # Manages hot reloading modules for a Tanjun client.. Warning An instance of this can only be linked to 1 client. Examples: client = tanjun . Client . from_gateway_bot ( bot ) ( tanjun . dependencies . HotReloader () . add_modules ( \"python.module.path\" , pathlib . Path ( \"./module.py\" )) . add_directory ( \"./modules/\" ) . add_to_client ( client ) ) __init__ # __init__ ( * , commands_guild = None , interval = datetime . timedelta ( microseconds = 500000 ), redeclare_cmds_after = datetime . timedelta ( seconds = 10 ), unload_on_delete = True ) Initialise a hot reloader. Warning redeclare_cmds_after is not aware of commands declared outside of the reloader and will lead to commands being redeclared on startup when mixed with tanjun.clients.Client. init 's declare_global_commands argument when it is not None . PARAMETER DESCRIPTION commands_guild Object or ID of the guild to declare commands in if redeclare_cmds_after is not None . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: None interval How often this should scan files and directories for changes in seconds. TYPE: typing . Union [ int , float , datetime . timedelta ] DEFAULT: datetime.timedelta(microseconds=500000) redeclare_cmds_after How often to redeclare application commands after a change to the commands is detected. If None is passed here then this will not redeclare the application's commands. TYPE: typing . Union [ int , float , datetime . timedelta , None] DEFAULT: datetime.timedelta(seconds=10) unload_on_delete Whether this should unload modules when their relevant file is deleted. TYPE: bool DEFAULT: True add_directory # add_directory ( directory , / , * , namespace = None ) Add a directory for this hot reloader to track. Note This will only reload modules directly in the target directory and will not scan sub-directories. PARAMETER DESCRIPTION directory Path of the directory to hot reload. TYPE: typing . Union [ str , pathlib . Path ] namespace The python namespace this directory's modules should be imported from, if applicable. This work as {namespace}.{file.name.removesuffix(\".py\")} and will have the same behaviour as when a str is passed to tanjun.abc.Client.load_modules if passed. If left as None then this will have the same behaviour as when a pathlib.Path is passed to tanjun.abc.Client.load_modules . TYPE: typing . Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Self The hot reloader to enable chained calls. RAISES DESCRIPTION FileNotFoundError If the directory cannot be found add_directory_async async # add_directory_async ( directory , / , * , namespace = None ) Asynchronous variant of tanjun.dependencies.reloaders.HotReloader.add_directory . Unlike tanjun.dependencies.reloaders.HotReloader.add_directory , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.dependencies.reloaders.HotReloader.add_directory . add_modules # add_modules ( * paths ) Add modules for this hot reloader to track. PARAMETER DESCRIPTION *paths Module paths for this hot reloader to track. This has the same behaviour as [tanjun.abc.Client.load_modules][ for how [pathlib.Path][] and str are treated. TYPE: typing . Union [ str , pathlib . Path ] DEFAULT: () RAISES DESCRIPTION FileNotFoundError If the module's file doesn't exist anymore. ModuleNotFoundError If the str module path cannot be imported. add_modules_async async # add_modules_async ( * paths ) Asynchronous variant of tanjun.dependencies.reloaders.HotReloader.add_modules . Unlike tanjun.dependencies.reloaders.HotReloader.add_modules , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.abc.Client.load_modules . add_to_client # add_to_client ( client ) Add this to a tanjun.abc.Client instance. This registers start and closing callbacks which handle the lifetime of this and adds this as a type dependency. PARAMETER DESCRIPTION client The client to link this hot reloader to. TYPE: tanjun . Client scan async # scan ( client ) Manually scan this hot reloader's tracked modules for changes. PARAMETER DESCRIPTION client The client to reload and unload modules in. TYPE: tanjun . Client start # start ( client ) Start the hot reloader. RAISES DESCRIPTION RuntimeError If the hot reloader is already running. stop # stop () Stop the hot reloader. RAISES DESCRIPTION RuntimeError If the hot reloader isn't running. InMemoryConcurrencyLimiter # Bases: AbstractConcurrencyLimiter In-memory standard implementation of AbstractConcurrencyLimiter . Examples: InMemoryConcurrencyLimiter.set_bucket may be used to set the concurrency limits for a specific bucket: ( InMemoryConcurrencyLimiter () # Set the default bucket template to 10 concurrent uses of the command per-user. . set_bucket ( \"default\" , tanjun . BucketResource . USER , 10 ) # Set the \"moderation\" bucket with a limit of 5 concurrent uses per-guild. . set_bucket ( \"moderation\" , tanjun . BucketResource . GUILD , 5 ) . set_bucket () # add_to_client will setup the concurrency manager (setting it as an # injected dependency and registering callbacks to manage it). . add_to_client ( client ) ) add_to_client # add_to_client ( client ) Add this concurrency manager to a tanjun client. Note This registers the manager as a type dependency and manages opening and closing the manager based on the client's life cycle. PARAMETER DESCRIPTION client The client to add this concurrency manager to. TYPE: tanjun . Client close # close () Stop the concurrency manager. RAISES DESCRIPTION RuntimeError If the concurrency manager is not running. disable_bucket # disable_bucket ( bucket_id ) Disable a concurrency limit bucket. This will stop the bucket from ever hitting a concurrency limit and also prevents the bucket from defaulting. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The bucket to disable. TYPE: str RETURNS DESCRIPTION Self This concurrency manager to allow for chaining. open # open ( * , _loop = None ) Start the concurrency manager. RAISES DESCRIPTION RuntimeError If the concurrency manager is already running. If called in a thread with no running event loop. set_bucket # set_bucket ( bucket_id , resource , limit ) Set the concurrency limit for a specific bucket. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The ID of the bucket to set the concurrency limit for. TYPE: str resource The type of resource to target for the concurrency limit. TYPE: BucketResource limit The maximum number of concurrent uses to allow. TYPE: int RETURNS DESCRIPTION Self The concurrency manager to allow call chaining. RAISES DESCRIPTION ValueError If an invalid resource type is given. if limit is less 0 or negative. InMemoryCooldownManager # Bases: AbstractCooldownManager In-memory standard implementation of AbstractCooldownManager . Examples: InMemoryCooldownManager.set_bucket may be used to set the cooldown for a specific bucket: ( InMemoryCooldownManager () # Set the default bucket template to a per-user 10 uses per-60 seconds cooldown. . set_bucket ( \"default\" , tanjun . BucketResource . USER , 10 , 60 ) # Set the \"moderation\" bucket to a per-guild 100 uses per-5 minutes cooldown. . set_bucket ( \"moderation\" , tanjun . BucketResource . GUILD , 100 , datetime . timedelta ( minutes = 5 )) . set_bucket () # add_to_client will setup the cooldown manager (setting it as an # injected dependency and registering callbacks to manage it). . add_to_client ( client ) ) add_to_client # add_to_client ( client ) Add this cooldown manager to a tanjun client. Note This registers the manager as a type dependency and manages opening and closing the manager based on the client's life cycle. PARAMETER DESCRIPTION client The client to add this cooldown manager to. TYPE: tanjun . Client close # close () Stop the cooldown manager. RAISES DESCRIPTION RuntimeError If the cooldown manager is not running. disable_bucket # disable_bucket ( bucket_id ) Disable a cooldown bucket. This will stop the bucket from ever hitting a cooldown and also prevents the bucket from defaulting. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The bucket to disable. TYPE: str RETURNS DESCRIPTION Self This cooldown manager to allow for chaining. open # open ( * , _loop = None ) Start the cooldown manager. RAISES DESCRIPTION RuntimeError If the cooldown manager is already running. If called in a thread with no running event loop. set_bucket # set_bucket ( bucket_id , resource , limit , reset_after ) Set the cooldown for a specific bucket. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The ID of the bucket to set the cooldown for. TYPE: str resource The type of resource to target for the cooldown. TYPE: BucketResource limit The number of uses per cooldown period. TYPE: int reset_after The cooldown period. TYPE: typing . Union [ int , float , datetime . timedelta ] RETURNS DESCRIPTION Self The cooldown manager to allow call chaining. RAISES DESCRIPTION ValueError If an invalid resource type is given. If reset_after or limit are negative, 0 or invalid. if limit is less 0 or negative. InteractionAcceptsEnum # Bases: enum . IntFlag The possible configurations for which interaction this client should execute. ALL class-attribute # ALL = AUTOCOMPLETE | COMMANDS Execute all the interaction types Tanjun supports. AUTOCOMPLETE class-attribute # AUTOCOMPLETE = enum . auto () Execute autocomplete interactions. COMMANDS class-attribute # COMMANDS = enum . auto () Execute command interactions. This includes slash command and context menu calls. NONE class-attribute # NONE = 0 Set the client to execute no interactions. LazyConstant # Bases: typing . Generic [ _T ] Injected type used to hold and generate lazy constants. Note To easily resolve this type use inject_lc . __init__ # __init__ ( callback ) Initiate a new lazy constant. PARAMETER DESCRIPTION callback Callback used to resolve this to a constant value. This supports dependency injection and may either be sync or asynchronous. TYPE: alluka . abc . CallbackSig [ _T ] acquire # acquire () Acquire this lazy constant as an asynchronous lock. This is used to ensure that the value is only generated once and should be kept acquired until LazyConstant.set_value has been called. RETURNS DESCRIPTION contextlib . AbstractAsyncContextManager [ typing . Any ] Context manager that can be used to acquire the lock. callback property # callback () Descriptor of the callback used to get this constant's initial value. get_value # get_value () Get the value of this constant if set, else None . reset # reset () Clear the internally stored value. set_value # set_value ( value ) Set the constant value. PARAMETER DESCRIPTION value The value to set. TYPE: _T RAISES DESCRIPTION RuntimeError If the constant has already been set. MenuCommand # Bases: base . PartialCommand [ tanjun . MenuContext ] , tanjun . MenuCommand [ _MenuCommandCallbackSigT , _MenuTypeT ] Base class used for the standard menu command implementations. __init__ # __init__ ( callback , type_ , name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , _wrapped_command = None ) Initialise a user or message menu command. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MenuContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MenuContext , ...], collections . abc . Coroutine [ Any , ANy , None]] type_ The type of menu command this is. Only hikari.commands.CommandType.USER and hikari.commands.CommandType.MESSAGE are valid here. TYPE: hikari . commands . CommandType name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters. set_ephemeral_default # set_ephemeral_default ( state ) Set whether this command's responses should default to ephemeral. PARAMETER DESCRIPTION state Whether this command's responses should default to ephemeral. This will be overridden by any response calls which specify flags. Setting this to None will let the default set on the parent command(s), component or client propagate and decide the ephemeral default for contexts used by this command. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This command to allow for chaining. wrapped_command property # wrapped_command () The command object this wraps, if any. MessageAcceptsEnum # Bases: str , enum . Enum The possible configurations for which events tanjun.Client should execute commands based on. ALL class-attribute # ALL = 'ALL' Set the client to execute commands based on both DM and guild message create events. DM_ONLY class-attribute # DM_ONLY = 'DM_ONLY' Set the client to execute commands based only DM message create events. GUILD_ONLY class-attribute # GUILD_ONLY = 'GUILD_ONLY' Set the client to execute commands based only guild message create events. NONE class-attribute # NONE = 'NONE' Set the client to not execute commands based on message create events. get_event_type # get_event_type () Get the base event type this mode listens to. RETURNS DESCRIPTION type [ hikari . events . MessageCreateEvent ] | None The type object of the MessageCreateEvent class this mode will register a listener for. This will be None if this mode disables listening to message create events. MessageCommand # Bases: base . PartialCommand [ tanjun . MessageContext ] , tanjun . MessageCommand [ _CommandCallbackSigT ] Standard implementation of a message command. __init__ # __init__ ( callback , name , / , * names , validate_arg_keys = True , _wrapped_command = None ) Initialise a message command. PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MessageContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MessageContext , ...], collections . abc . Coroutine [None]] name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True wrapped_command property # wrapped_command () The command object this wraps, if any. MessageCommandGroup # Bases: MessageCommand [ _CommandCallbackSigT ] , tanjun . MessageCommandGroup [ _CommandCallbackSigT ] Standard implementation of a message command group. __init__ # __init__ ( callback , name , / , * names , strict = False , validate_arg_keys = True , _wrapped_command = None ) Initialise a message command group. PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MessageContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MessageContext , ...], collections . abc . Coroutine [None]] name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True add_command # add_command ( command ) Add a command to this group. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The group instance to enable chained calls. RAISES DESCRIPTION ValueError If one of the command's names is already registered in a strict command group. as_sub_command # as_sub_command ( name , / , * names , validate_arg_keys = True ) Build a message command in this group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a sub-command. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ). as_sub_group # as_sub_group ( name , / , * names , strict = False , validate_arg_keys = True ) Build a message command group in this group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a sub-command group. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ). ModuleMissingLoaders # Bases: RuntimeError , TanjunError Error raised when a module is missing loaders. message property # message () The error message. path property # path () The path of the module which is missing loaders. ModuleMissingUnloaders # Bases: RuntimeError , TanjunError Error raised when a module is missing unloaders. message property # message () The error message. path property # path () The path of the module which is missing unloaders. ModuleStateConflict # Bases: ValueError , TanjunError Error raised when a module cannot be (un)loaded due to a state conflict. message property # message () The error message. path property # path () The path of the module which caused the error. NotEnoughArgumentsError # Bases: ParserError Error raised by the parser when not enough arguments are found for a parameter. parameter class-attribute # parameter : str Name of the parameter this error was raised for. __init__ # __init__ ( message , parameter ) Initialise a not enough arguments error. PARAMETER DESCRIPTION message The error message. TYPE: str parameter The parameter this error was raised for. TYPE: str ParserError # Bases: TanjunError , ValueError Base error raised by a parser or parameter during parsing. Note Expected errors raised by the parser will subclass this error. __init__ # __init__ ( message , parameter ) Initialise a parser error. PARAMETER DESCRIPTION message String message for this error. TYPE: str parameter Name of the parameter which caused this error, should be None if not applicable. TYPE: typing . Optional [ str ] ShlexParser # Bases: AbstractOptionParser A shlex based AbstractOptionParser implementation. __init__ # __init__ () Initialise a shlex parser. SlashCommand # Bases: BaseSlashCommand , tanjun . SlashCommand [ _CommandCallbackSigT ] Standard implementation of a slash command. __init__ # __init__ ( callback , name , description , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , sort_options = True , validate_arg_keys = True , _wrapped_command = None ) Initialise a slash command. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands within slash command groups. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.SlashContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . SlashContext , ...], collections . abc . Coroutine [ Any , Any , None]] name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. add_attachment_option # add_attachment_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add an attachment option to the slash command. Note This will result in options of type hikari.messages.Attachment . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . add_bool_option # add_bool_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a boolean option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . add_channel_option # add_channel_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , types = None , pass_as_kwarg = True ) Add a channel option to a slash command. Note This will always result in hikari.interactions.command_interactions.InteractionChannel . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT types A collection of the channel classes and types this option should accept. If left as None or empty then the option will allow all channel types. TYPE: typing . Optional [ collections . Collection [ typing . Union [ type [ hikari . PartialChannel ], int ]]] DEFAULT: None key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If an invalid type is passed in types . If name isn't valid for this command's callback when validate_arg_keys is True . add_float_option # add_float_option ( name , description , / , * , always_float = True , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True , _stack_level = 0 ) Add a float option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_float If this is set to True then the value will always be converted to a float (this will happen before it's passed to converters). This masks behaviour from Discord where we will either be provided a float or int dependent on what the user provided. TYPE: bool DEFAULT: True autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This is a mapping of [option_name, option_value] where option_name should be a string of up to 100 characters and option_value should be a float. TYPE: typing . Optional [ collections . Mapping [ str , float ]] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Collection [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_value The option's (inclusive) minimum value. TYPE: typing . Optional [ float ] DEFAULT: None max_value The option's (inclusive) maximum value. TYPE: typing . Optional [ float ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the fields coverters , and always_float will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If min_value is greater than max_value . If name isn't valid for this command's callback when validate_arg_keys is True . add_int_option # add_int_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True , _stack_level = 0 ) Add an integer option to the slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type int . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This is a mapping of [option_name, option_value] where option_name should be a string of up to 100 characters and option_value should be an integer. TYPE: typing . Optional [ collections . Mapping [ str , int ]] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Collection [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_value The option's (inclusive) minimum value. TYPE: typing . Optional [ int ] DEFAULT: None max_value The option's (inclusive) maximum value. TYPE: typing . Optional [ int ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If min_value is greater than max_value . If name isn't valid for this command's callback when validate_arg_keys is True . add_member_option # add_member_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None ) Add a member option to a slash command. Note This will always result in hikari.interactions.base_interactions.InteractionMember . Warning Unlike the other options, this is an artificial option which adds a restraint to the USER option type and therefore cannot have pass_as_kwarg set to False as this artificial constraint isn't present when its not being passed as a keyword argument. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . add_mentionable_option # add_mentionable_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a mentionable option to a slash command. Note This may target roles, guild members or users and results in hikari.User | hikari.InteractionMember | hikari.Role . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . add_role_option # add_role_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a role option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . add_str_option # add_str_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_length = None , max_length = None , pass_as_kwarg = True , _stack_level = 0 ) Add a string option to the slash command. Note As a shorthand, choices also supports passing a list of strings rather than a dict of names to values (each string will used as both the choice's name and value with the names being capitalised). PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This either a mapping of [option_name, option_value] where both option_name and option_value should be strings of up to 100 characters or a sequence of strings where the string will be used for both the choice's name and value. TYPE: typing . Union [ collections . Mapping [ str , str ], collections . Sequence [ str ], None] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Sequence [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_length The minimum length of this string. This must be greater than or equal to 0, and less than or equal to max_length and 6000 . TYPE: typing . Optional [ int ] DEFAULT: None max_length The maximum length of this string. This must be greater then or equal to min_length and 1, and less than or equal to 6000 . TYPE: typing . Optional [ int ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . If min_length is greater than max_length . If min_length is less than 0 or greater than 6000 . If max_length is less than 1 or greater than 6000 . add_user_option # add_user_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a user option to a slash command. Note This may result in hikari.interactions.base_interactions.InteractionMember or hikari.users.User if the user isn't in the current guild or if this command was executed in a DM channel. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . set_float_autocomplete # set_float_autocomplete ( name , callback ) Set the autocomplete callback for a float option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . Passing None here will remove the autocomplete callback for the option. TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type float . set_int_autocomplete # set_int_autocomplete ( name , callback ) Set the autocomplete callback for a string option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . Passing None here will remove the autocomplete callback for the option. TYPE: tanjun . AutocompleteCallbackSig RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str . set_str_autocomplete # set_str_autocomplete ( name , callback ) Set the autocomplete callback for a str option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . Passing None here will remove the autocomplete callback for the option. TYPE: tanjun . AutocompleteCallbackSig RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str . with_float_autocomplete # with_float_autocomplete ( name ) Set the autocomplete callback for a float option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type float . with_int_autocomplete # with_int_autocomplete ( name ) Set the autocomplete callback for a integer option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type int . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type int . with_str_autocomplete # with_str_autocomplete ( name ) Set the autocomplete callback for a string option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str . wrapped_command property # wrapped_command () The command object this wraps, if any. SlashCommandGroup # Bases: BaseSlashCommand , tanjun . SlashCommandGroup Standard implementation of a slash command group. Note Unlike message command groups, slash command groups cannot be callable functions themselves. __init__ # __init__ ( name , description , / , * , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Initialise a slash command group. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands groups within another slash command groups. PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. add_command # add_command ( command ) Add a slash command to this group. Warning Command groups are only supported within top-level groups. PARAMETER DESCRIPTION command Command to add to this group. TYPE: tanjun . BaseSlashCommand RETURNS DESCRIPTION Self Object of this group to enable chained calls. as_sub_command # as_sub_command ( name , description , / , * , always_defer = False , default_to_ephemeral = None , sort_options = True , validate_arg_keys = True ) Build a tanjun.SlashCommand in this command group by decorating a function. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description. This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], SlashCommand ] The decorator callback used to make a sub-command. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand tanjun.SlashCommand ). RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. make_sub_group # make_sub_group ( name , description , / , * , default_to_ephemeral = None ) Create a sub-command group in this group. Note Unlike message command groups, slash command groups cannot be callable functions themselves. PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None RETURNS DESCRIPTION SlashCommandGroup The created sub-command group. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. remove_command # remove_command ( command ) Remove a command from this group. PARAMETER DESCRIPTION command Command to remove from this group. TYPE: tanjun . BaseSlashCommand RETURNS DESCRIPTION Self Object of this group to enable chained calls. with_command # with_command ( command ) Add a slash command to this group through a decorator call. PARAMETER DESCRIPTION command Command to add to this group. TYPE: tanjun . abc . BaseSlashCommand RETURNS DESCRIPTION tanjun . abc . BaseSlashCommand Command which was added to this group. TanjunError # Bases: Exception The base class for all errors raised by Tanjun. TooManyArgumentsError # Bases: ParserError Error raised by the parser when too many arguments are found for a parameter. parameter class-attribute # parameter : str Name of the parameter this error was raised for. __init__ # __init__ ( message , parameter ) Initialise a too many arguments error. PARAMETER DESCRIPTION message The error message. TYPE: str parameter The parameter this error was raised for. TYPE: str as_interval # as_interval ( interval , / , * , fatal_exceptions = (), ignored_exceptions = (), max_runs = None ) Decorator to create an schedule. Examples: @component . with_schedule @tanjun . as_interval ( datetime . timedelta ( minutes = 5 )) # This will run every 5 minutes async def interval ( client : alluka . Injected [ tanjun . abc . Client ]) -> None : ... This should be loaded into a component using either Component.with_schedule or Component.load_from_scope , and will be started and stopped with the linked tanjun client. PARAMETER DESCRIPTION interval The interval between calls. Passed as a timedelta, or a number of seconds. TYPE: typing . Union [ int , float , datetime . timedelta ] fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () max_runs The maximum amount of times the schedule runs. TYPE: typing . Optional [ int ] DEFAULT: None RETURNS DESCRIPTION collections . Callable [[ _CallbackSigT ], tanjun . scheduling . IntervalSchedule [ _CallbackSigT ]] The decorator used to create the schedule. This should be decorating an asynchronous function which takes no positional arguments, returns None and may use dependency injection. as_loader # as_loader ( callback = None , / , * , standard_impl = True ) Mark a callback as being used to load Tanjun components from a module. Note This is only necessary if you wish to use tanjun.Client.load_modules . PARAMETER DESCRIPTION callback The callback used to load Tanjun components from a module. This should take one argument of type tanjun.Client (or tanjun.abc.Client if standard_impl is False ), return nothing and will be expected to initiate and add utilities such as components to the provided client. TYPE: typing . Union [ collections . Callable [[ tanjun . Client ], None], collections . Callable [[ Client ], None], None] DEFAULT: None standard_impl Whether this loader should only allow instances of tanjun.Client as opposed to tanjun.abc.Client . TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections.abc.Callable[[tanjun.abc.Client], None]] The decorated load callback. as_message_command # as_message_command ( name , / , * names , validate_arg_keys = True ) Build a message command from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a tanjun.MessageCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . as_message_command_group # as_message_command_group ( name , / , * names , strict = False , validate_arg_keys = True ) Build a message command group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a tanjun.MessageCommandGroup . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . as_message_menu # as_message_menu ( name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Build a message tanjun.MenuCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_message_menu ( \"message\" ) async def message_command ( self , ctx : tanjun . abc . MenuContext , message : hikari . Message ) -> None : await ctx . respond ( embed = hikari . Embed ( title = \"Message content\" , description = message . content or \"N/A\" ) ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters. as_self_injecting # as_self_injecting ( client ) Make a callback self-inecting by linking it to a client through a decorator call. Examples: def make_callback ( client : tanjun . Client ) -> collections . abc . Callable [[], int ]: @tanjun . as_self_injected ( client ) async def get_int_value ( redis : redis . Client = tanjun . inject ( type = redis . Client ) ) -> int : return int ( await redis . get ( 'key' )) return get_int_value PARAMETER DESCRIPTION client The client to use to resolve dependencies. TYPE: tanjun . abc . Client RETURNS DESCRIPTION collections . abc . Callable [[ alluka . abc . CallbackSig ], alluka . AsyncSelfInjecting ] Decorator callback that returns a self-injecting callback. as_slash_command # as_slash_command ( name , description , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , sort_options = True , validate_arg_keys = True ) Build a tanjun.SlashCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands within slash command groups. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_slash_command ( \"ping\" , \"Get the bot's latency\" ) async def ping_command ( self , ctx : tanjun . abc . SlashContext ) -> None : start_time = time . perf_counter () await ctx . rest . fetch_my_user () time_taken = ( time . perf_counter () - start_time ) * 1_000 await ctx . respond ( f \"PONG \\n - REST: { time_taken : .0f } mss\" ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], SlashCommand ] The decorator callback used to make a tanjun.SlashCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. as_time_schedule # as_time_schedule ( * , months = (), weekly = False , days = (), hours = (), minutes = (), seconds = 0 , fatal_exceptions = (), ignored_exceptions = (), timezone = None ) Create a time schedule through a decorator call. Examples: @component . with_schedule @tanjun . as_time_schedule ( # This will run every week day at 8:00 and 16:00 UTC. minutes = 0 , hours = [ 8 , 16 ], days = range ( 0 , 5 ), weekly = True , timezone = datetime . timezone . utc ) async def interval ( client : alluka . Injected [ tanjun . abc . Client ]) -> None : ... This should be loaded into a component using either Component.with_schedule or Component.load_from_scope , and will be started and stopped with the linked tanjun client. PARAMETER DESCRIPTION months Either one or multiple months the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all months. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () weekly Whether the schedule should run on a weekly basis. TYPE: bool DEFAULT: False days Either one or multiple days the schedule should run on. When weekly is True , days will refer to the days of the week ( range(7) ). Otherwise this will refer to the days of the month ( range(32) ). For months where less than 31 days exist, numbers which are too large will be ignored. If this is not specified or an empty sequence, then the schedule will on all days. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () hours Either one or multiple hours the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all hours. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () minutes Either one or multiple minutes the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all minutes. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () seconds Either one or multiple seconds the schedule should run on. Defaults to the start of the minute if not specified or an empty sequence. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: 0 fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () timezone The timezone to use for the schedule. If this is not specified then the system's local timezone will be used. TYPE: typing . Optional [ datetime . timezone ] DEFAULT: None RETURNS DESCRIPTION collections . Callable [[ _CallbackSigT ], tanjun . scheduling . TimeSchedule [ _CallbackSigT ]] The decorator used to create the schedule. This should be decorating an asynchronous function which takes no positional arguments, returns None and may use dependency injection. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If months has any values outside the range of range(1, 13) . If days has any values outside the range of range(1, 32) when weekly is False or outside the range of range(1, 7) when weekly is True . If hours has any values outside the range of range(0, 24) . If minutes has any values outside the range of range(0, 60) . If seconds has any values outside the range of range(0, 60) . as_unloader # as_unloader ( callback = None , / , * , standard_impl = True ) Mark a callback as being used to unload a module's utilities from a client. Note This is the inverse of tanjun.as_loader and is only necessary if you wish to use the tanjun.Client.unload_modules or tanjun.Client.reload_modules . PARAMETER DESCRIPTION callback The callback used to unload Tanjun components from a module. This should take one argument of type tanjun.Client (or tanjun.abc.Client if standard_impl is False ), return nothing and will be expected to remove utilities such as components from the provided client. TYPE: typing . Union [ collections . Callable [[ Client ], None], collections . Callable [[ tanjun . Client ], None], None] DEFAULT: None standard_impl Whether this unloader should only allow instances of tanjun.Client as opposed to tanjun.abc.Client . TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections.abc.Callable[[tanjun.abc.Client], None]] The decorated unload callback. as_user_menu # as_user_menu ( name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Build a user tanjun.MenuCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_user_menu ( \"user\" ) async def user_command ( self , ctx : tanjun . abc . MenuContext , user : hikari . User | hikari . InteractionMember , ) -> None : await ctx . respond ( f \"Hello { user } \" ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters. cached_inject # cached_inject ( callback , / , * , expire_after = None ) Inject a callback with caching. This acts like alluka.inject and the result of it should also be assigned to a parameter's default to be used. Example # async def resolve_database ( client : tanjun . abc . Client = tanjun . inject ( type = tanjun . abc . Client ) ) -> Database : raise NotImplementedError @tanjun . as_message_command ( \"command name\" ) async def command ( ctx : tanjun . abc . Context , db : Database = tanjun . cached_inject ( resolve_database ) ) -> None : raise NotImplementedError PARAMETER DESCRIPTION callback The callback to inject. TYPE: alluka . abc . CallbackSig [ _T ] expire_after The amount of time to cache the result for in seconds. Leave this as None to cache for the runtime of the application. TYPE: typing . Union [ float , int , datetime . timedelta , None] DEFAULT: None RETURNS DESCRIPTION alluka . InjectedDescriptor [ _T ] Injector used to resolve the cached callback. RAISES DESCRIPTION ValueError If expire_after is not a valid value. If expire_after is not less than or equal to 0 seconds. inject_lc # inject_lc ( type_ ) Make a LazyConstant injector. This acts like alluka.inject and the result of it should also be assigned to a parameter's default to be used. Note For this to work, a LazyConstant must've been set as a type dependency for the passed type_ . PARAMETER DESCRIPTION type_ The type of the constant to resolve. TYPE: type [ _T ] RETURNS DESCRIPTION alluka . InjectedDescriptor [ _T ] Injector used to resolve the LazyConstant. Example # @component . with_command @tanjun . as_message_command async def command ( ctx : tanjun . abc . MessageCommand , application : hikari . Application = tanjun . inject_lc ( hikari . Application ) ) -> None : raise NotImplementedError ... async def resolve_app ( client : tanjun . abc . Client = tanjun . inject ( type = tanjun . abc . Client ) ) -> hikari . Application : raise NotImplementedError tanjun . Client . from_gateway_bot ( ... ) . set_type_dependency ( tanjun . LazyConstant [ hikari . Application ] = tanjun . LazyConstant ( resolve_app ) ) slash_command_group # slash_command_group ( name , description , / , * , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Create a slash command group. Note Unlike message command groups, slash command groups cannot be callable functions themselves. Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for command groups within other slash command groups. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by [tanjun.Client.declare_global_commandsadd_command or when declare_global_commands is True Examples: Sub-commands can be added to the created slash command object through the following decorator based approach: help_group = tanjun . slash_command_group ( \"help\" , \"get help\" ) @help_group . with_command @tanjun . with_str_slash_option ( \"command_name\" , \"command name\" ) @tanjun . as_slash_command ( \"command\" , \"Get help with a command\" ) async def help_command_command ( ctx : tanjun . abc . SlashContext , command_name : str ) -> None : ... @help_group . with_command @tanjun . as_slash_command ( \"me\" , \"help me\" ) async def help_me_command ( ctx : tanjun . abc . SlashContext ) -> None : ... component = tanjun . Component () . add_slash_command ( help_group ) PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION SlashCommandGroup The command group. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. to_bool # to_bool ( value ) Convert user string input into a boolean value. PARAMETER DESCRIPTION value The value to convert. TYPE: str RETURNS DESCRIPTION bool The converted value. RAISES DESCRIPTION ValueError If the value cannot be converted. to_color # to_color ( argument ) Convert user input to a hikari.colors.Color object. to_datetime # to_datetime ( value ) Parse a datetime from Discord's datetime format. More information on this format can be found at https://discord.com/developers/docs/reference#message-formatting-timestamp-styles PARAMETER DESCRIPTION value The value to parse. TYPE: str RETURNS DESCRIPTION datetime . datetime The parsed datetime. RAISES DESCRIPTION ValueError If the value cannot be parsed. with_all_checks # with_all_checks ( check , / , * checks , follow_wrapped = False ) Add a check which will pass if all the provided checks pass through a decorator call. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . Context ], collections . abc . Coroutine [ typing . Any , typing . Any , bool ]] A check which will pass if all of the provided check callbacks pass. with_any_checks # with_any_checks ( check , / , * checks , error = None , error_message , follow_wrapped = False , halt_execution = False , suppress = ( errors . CommandError , errors . HaltExecution )) Add a check which'll pass if any of the provided checks pass through a decorator call. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.any_check\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False suppress Tuple of the exceptions to suppress when a check fails. TYPE: tuple [ type [ Exception ], ...] DEFAULT: (errors.CommandError, errors.HaltExecution) RETURNS DESCRIPTION collections . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator which adds the generated check to a command. with_argument # with_argument ( key , / , converters = (), * , default = UNDEFINED , greedy = False , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add an argument to a message command through a decorator call. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_argument ( \"command\" , converters = int , default = 42 ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : int ): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED greedy Whether or not this argument should be greedy (meaning that it takes in the remaining argument values). TYPE: bool DEFAULT: False min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi Whether this argument can be passed multiple times. RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True . with_attachment_slash_option # with_attachment_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add an attachment option to a slash command. For more information on this function's parameters see tanjun.SlashCommand.add_attachment_option . Examples: @with_attachment_slash_option ( \"name\" , \"A name.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , name : hikari . Attachment ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_author_permission_check # with_author_permission_check ( permissions , * , error = None , error_message = \"You don't have the permissions required to use this command\" , follow_wrapped = False , halt_execution = False ) Only let a command run if the author has certain permissions in the current channel. Note This will only pass for commands in DMs if permissions is valid for a DM context (e.g. can't have any moderation permissions) PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.AuthorPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"You don't have the permissions required to use this command\" follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check. with_bool_slash_option # with_bool_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a boolean option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_bool_option . Examples: @with_bool_slash_option ( \"flag\" , \"Whether this flag should be enabled.\" , default = False ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , flag : bool ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_channel_slash_option # with_channel_slash_option ( name , description , / , * , types = None , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a channel option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_channel_option . Note This will always result in hikari.interactions.command_interactions.InteractionChannel . Examples: @with_channel_slash_option ( \"channel\" , \"channel to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , channel : hikari . InteractionChannel ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_check # with_check ( check , / , * , follow_wrapped = False ) Add a generic check to a command. PARAMETER DESCRIPTION check The check to add to this command. TYPE: tanjun . CheckSig follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check. with_concurrency_limit # with_concurrency_limit ( bucket_id , / , * , error = None , error_message = 'This resource is currently busy; please try again later.' , follow_wrapped = False ) Add the hooks used to manage a command's concurrency limit through a decorator call. Warning Concurrency limiters will only work if there's a setup injected AbstractConcurrencyLimiter dependency with InMemoryConcurrencyLimiter being usable as a standard in-memory concurrency manager. PARAMETER DESCRIPTION bucket_id The concurrency limit bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two one str argument which is the limiting bucket's ID. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if this fails to acquire the concurrency limit. This supports localisation and uses the check name \"tanjun.concurrency\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This resource is currently busy; please try again later.' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator that adds the concurrency limiter hooks to a command. with_cooldown # with_cooldown ( bucket_id , / , * , error = None , error_message = 'This command is currently in cooldown. Try again {cooldown} .' , follow_wrapped = False , owners_exempt = True ) Add a pre-execution hook used to manage a command's cooldown through a decorator call. Warning Cooldowns will only work if there's a setup injected AbstractCooldownManager dependency with InMemoryCooldownManager being usable as a standard in-memory cooldown manager. PARAMETER DESCRIPTION bucket_id The cooldown bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two arguments one of type str and datetime.datetime where the first is the limiting bucket's ID and the second is when said bucket can be used again. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str , datetime . datetime ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.cooldown\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This command is currently in cooldown. Try again {cooldown}.' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False owners_exempt Whether owners should be exempt from the cooldown. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator that adds a CooldownPreExecution hook to the command. with_dm_check # with_dm_check ( command = None , / , * , error = None , error_message = 'Command can only be used in DMs' , follow_wrapped = False , halt_execution = False ) Only let a command run in a DM channel. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.DmCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in DMs' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to. with_float_slash_option # with_float_slash_option ( name , description , / , * , always_float = True , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True ) Add a float option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_float_option . Examples: @with_float_slash_option ( \"float_value\" , \"Float value.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , float_value : float ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_greedy_argument # with_greedy_argument ( key , / , converters = (), * , default = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add a greedy argument to a message command through a decorator call. A greedy argument will consume the remaining positional arguments and pass them through to the converters as one joined string while also requiring that at least one more positional argument is remaining unless a default is set. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_greedy_argument ( \"command\" , converters = StringView ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : StringView ): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True . with_guild_check # with_guild_check ( command = None , / , * , error = None , error_message = 'Command can only be used in guild channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a guild channel. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.GuildCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in guild channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommanmd The command this check was added to. with_int_slash_option # with_int_slash_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True ) Add an integer option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_int_option . Examples: @with_int_slash_option ( \"int_value\" , \"Int value.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , int_value : int ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_member_slash_option # with_member_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None ) Add a member option to a slash command. For information on this function's arguments see tanjun.SlashCommand.add_member_option . Note This will always result in hikari.interactions.base_interactions.InteractionMember . Examples: @with_member_slash_option ( \"member\" , \"member to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , member : hikari . InteractionMember ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_mentionable_slash_option # with_mentionable_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a mentionable option to a slash command. For information on this function's arguments see tanjun.SlashCommand.add_mentionable_option . Note This may target roles, guild members or users and results in hikari.User | hikari.InteractionMember | hikari.Role . Examples: @with_mentionable_slash_option ( \"mentionable\" , \"Mentionable entity to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , mentionable : [ Role , InteractionMember , User ]) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_multi_argument # with_multi_argument ( key , / , converters = (), * , default = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add a multi-argument to a message command through a decorator call. A multi argument will consume the remaining positional arguments and pass them to the converters through multiple calls while also requiring that at least one more positional argument is remaining unless a default is set and passing through the results to the command's callback as a sequence. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_multi_argument ( \"command\" , converters = int ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : collections . abc . Sequence [ int ]): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True . with_multi_option # with_multi_option ( key , name , / , * names , converters = (), default , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add an multi-option to a command's parser through a decorator call. A multi option will consume all the values provided for an option and pass them through to the converters as an array of strings while also requiring that at least one value is provided for the option unless a default is set. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_multi_option ( \"command\" , converters = int , default = ()) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : collections . abc . Sequence [ int ]): ... PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this argument to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this argument, unlike arguments this is required for options. TYPE: typing . Any converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this option is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True . with_nsfw_check # with_nsfw_check ( command = None , / , * , error = None , error_message = 'Command can only be used in NSFW channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a channel that's marked as nsfw. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.NsfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in NSFW channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to. with_option # with_option ( key , name , / , * names , converters = (), default , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add an option to a message command through a decorator call. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_option ( \"command\" , converters = int , default = 42 ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : int ): ... PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this argument to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this argument, unlike arguments this is required for options. TYPE: typing . Any converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi If this option can be provided multiple times. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this option is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True . with_own_permission_check # with_own_permission_check ( permissions , * , error = None , error_message = \"Bot doesn't have the permissions required to run this command\" , follow_wrapped = False , halt_execution = False ) Only let a command run if we have certain permissions in the current channel. Note This will only pass for commands in DMs if permissions is valid for a DM context (e.g. can't have any moderation permissions) PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"Bot doesn't have the permissions required to run this command\" follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check. with_owner_check # with_owner_check ( command = None , / , * , error = None , error_message = 'Only bot owners can use this command' , follow_wrapped = False , halt_execution = False ) Only let a command run if it's being triggered by one of the bot's owners. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnerCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Only bot owners can use this command' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to. with_parser # with_parser ( command ) Add a shlex parser command parser to a supported command. Example # @tanjun . with_argument ( \"arg\" , converters = int ) @tanjun . with_parser @tanjun . as_message_command ( \"hi\" ) async def hi ( ctx : tanjun . MessageContext , arg : int ) -> None : ... PARAMETER DESCRIPTION command The message command to set the parser on. TYPE: _CommandT RETURNS DESCRIPTION tanjun . abc . MessageCommand The command with the parser set. RAISES DESCRIPTION ValueError If the command already has a parser set. with_role_slash_option # with_role_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a role option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_role_option . Examples: @with_role_slash_option ( \"role\" , \"Role to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , role : hikari . Role ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_sfw_check # with_sfw_check ( command = None , / , * , error = None , error_message = 'Command can only be used in SFW channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a channel that's marked as sfw. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.SfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in SFW channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to. with_str_slash_option # with_str_slash_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_length = None , max_length = None , pass_as_kwarg = True ) Add a string option to a slash command. For more information on this function's parameters see tanjun.commands.SlashCommand.add_str_option . Examples: @with_str_slash_option ( \"name\" , \"A name.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , name : str ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_user_slash_option # with_user_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a user option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_user_option . Note This may result in hikari.interactions.base_interactions.InteractionMember or hikari.users.User if the user isn't in the current guild or if this command was executed in a DM channel. Examples: @with_user_slash_option ( \"user\" , \"user to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , user : Union [ InteractionMember , User ]) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"tanjun"},{"location":"reference/#tanjun_1","text":"A flexible command framework designed to extend Hikari. Examples: A Tanjun client can be quickly initialised from a Hikari gateway bot through tanjun.Client.from_gateway_bot , this enables both slash (interaction) and message command execution: bot = hikari . GatewayBot ( \"BOT_TOKEN\" ) # As a note, unless event_managed=False is passed here then this client # will be managed based on gateway startup and stopping events. # mention_prefix=True instructs the client to also set mention prefixes on the # first startup. client = tanjun . Client . from_gateway_bot ( bot , declare_global_commands = True , mention_prefix = True ) component = tanjun . Component () client . add_component ( component ) # Declare a message command with some basic parser logic. @component . with_command @tanjun . with_greedy_argument ( \"name\" , default = \"World\" ) @tanjun . as_message_command ( \"test\" ) async def test_command ( ctx : tanjun . abc . Context , name : str ) -> None : await ctx . respond ( f \"Hello, { name } !\" ) # Declare a ping slash command @component . with_command @tanjun . with_user_slash_option ( \"user\" , \"The user facing command option's description\" , default = None ) @tanjun . as_slash_command ( \"hello\" , \"The command's user facing description\" ) async def hello ( ctx : tanjun . abc . Context , user : hikari . User | None ) -> None : user = user or ctx . author await ctx . respond ( f \"Hello, { user } !\" ) Alternatively, the client can also be built from a RESTBot but this will only enable slash (interaction) command execution: bot = hikari . RESTBot ( \"BOT_TOKEN\" , \"Bot\" ) # declare_global_commands=True instructs the client to set the global commands # for the relevant bot on first startup (this will replace any previously # declared commands). # # `bot_managed=True` has to be explicitly passed here to indicate that the client # should automatically start when the linked REST bot starts. client = tanjun . Client . from_rest_bot ( bot , bot_managed = True , declare_global_commands = True ) # This will load components from modules based on loader functions. # For more information on this see [tanjun.as_loader][]. client . load_modules ( \"module.paths\" ) # Thanks to `bot_managed=True`, this will also start the client. bot . run () For more extensive examples see the repository's examples . There are also written tutorials that cover making a bot from scratch through to advanced concepts like Dependency Injection.","title":"tanjun"},{"location":"reference/#tanjun.AnyHooks","text":"AnyHooks = Hooks [ tanjun . Context ] Hooks that can be used with any context. Note This is shorthand for Hooks[tanjun.abc.Context] .","title":"AnyHooks"},{"location":"reference/#tanjun.MessageHooks","text":"MessageHooks = Hooks [ tanjun . MessageContext ] Hooks that can be used with a message context. Note This is shorthand for Hooks[tanjun.abc.MessageContext] .","title":"MessageHooks"},{"location":"reference/#tanjun.MissingDependencyError","text":"MissingDependencyError = alluka . MissingDependencyError Type alias of alluka.MissingDependencyError .","title":"MissingDependencyError"},{"location":"reference/#tanjun.SlashHooks","text":"SlashHooks = Hooks [ tanjun . SlashContext ] Hooks that can be used with a slash context. Note This is shorthand for Hooks[tanjun.abc.SlashContext] .","title":"SlashHooks"},{"location":"reference/#tanjun.to_channel","text":"to_channel : typing . Final [ ToChannel ] = ToChannel () Convert user input to a hikari.channels.PartialChannel object.","title":"to_channel"},{"location":"reference/#tanjun.to_colour","text":"to_colour : typing . Final [ collections . Callable [[ _ArgumentT ], hikari . Color ]] = to_color Convert user input to a hikari.colors.Color object.","title":"to_colour"},{"location":"reference/#tanjun.to_emoji","text":"to_emoji : typing . Final [ ToEmoji ] = ToEmoji () Convert user input to a cached hikari.emojis.KnownCustomEmoji object. Note If you just want to convert inpute to a hikari.emojis.Emoji , hikari.emojis.CustomEmoji or hikari.emojis.UnicodeEmoji without making any cache or REST calls then you can just use the relevant hikari.emojis.Emoji.parse , hikari.emojis.CustomEmoji.parse or hikari.emojis.UnicodeEmoji.parse methods.","title":"to_emoji"},{"location":"reference/#tanjun.to_guild","text":"to_guild : typing . Final [ ToGuild ] = ToGuild () Convert user input to a hikari.guilds.Guild object.","title":"to_guild"},{"location":"reference/#tanjun.to_invite","text":"to_invite : typing . Final [ ToInvite ] = ToInvite () Convert user input to a cached hikari.invites.InviteWithMetadata object.","title":"to_invite"},{"location":"reference/#tanjun.to_invite_with_metadata","text":"to_invite_with_metadata : typing . Final [ ToInviteWithMetadata ] = ToInviteWithMetadata () Convert user input to a hikari.invites.Invite object.","title":"to_invite_with_metadata"},{"location":"reference/#tanjun.to_member","text":"to_member : typing . Final [ ToMember ] = ToMember () Convert user input to a hikari.guilds.Member object.","title":"to_member"},{"location":"reference/#tanjun.to_message","text":"to_message : typing . Final [ ToMessage ] = ToMessage () Convert user input to a hikari.messages.Message object.","title":"to_message"},{"location":"reference/#tanjun.to_presence","text":"to_presence : typing . Final [ ToPresence ] = ToPresence () Convert user input to a cached hikari.presences.MemberPresence .","title":"to_presence"},{"location":"reference/#tanjun.to_role","text":"to_role : typing . Final [ ToRole ] = ToRole () Convert user input to a hikari.guilds.Role object.","title":"to_role"},{"location":"reference/#tanjun.to_snowflake","text":"to_snowflake : typing . Final [ collections . Callable [[ _ArgumentT ], hikari . Snowflake ]] = parse_snowflake Convert user input to a hikari.snowflakes.Snowflake . Note This also range validates the input.","title":"to_snowflake"},{"location":"reference/#tanjun.to_user","text":"to_user : typing . Final [ ToUser ] = ToUser () Convert user input to a hikari.users.User object.","title":"to_user"},{"location":"reference/#tanjun.to_voice_state","text":"to_voice_state : typing . Final [ ToVoiceState ] = ToVoiceState () Convert user input to a cached hikari.voices.VoiceState .","title":"to_voice_state"},{"location":"reference/#tanjun.BucketResource","text":"Bases: int , enum . Enum Resource target types used within command calldowns and concurrency limiters.","title":"BucketResource"},{"location":"reference/#tanjun.dependencies.limiters.BucketResource.CHANNEL","text":"CHANNEL = 2 A per-channel resource bucket.","title":"CHANNEL"},{"location":"reference/#tanjun.dependencies.limiters.BucketResource.GLOBAL","text":"GLOBAL = 7 A global resource bucket.","title":"GLOBAL"},{"location":"reference/#tanjun.dependencies.limiters.BucketResource.GUILD","text":"GUILD = 6 A per-guild resource bucket. When executed in a DM this will be per-DM.","title":"GUILD"},{"location":"reference/#tanjun.dependencies.limiters.BucketResource.MEMBER","text":"MEMBER = 1 A per-guild member resource bucket. When executed in a DM this will be per-DM.","title":"MEMBER"},{"location":"reference/#tanjun.dependencies.limiters.BucketResource.PARENT_CHANNEL","text":"PARENT_CHANNEL = 3 A per-parent channel resource bucket. For DM channels this will be per-DM, for guild channels with no parents this'll be per-guild.","title":"PARENT_CHANNEL"},{"location":"reference/#tanjun.dependencies.limiters.BucketResource.TOP_ROLE","text":"TOP_ROLE = 5 A per-highest role resource bucket. When executed in a DM this will be per-DM, with this defaulting to targeting the @everyone role if they have no real roles.","title":"TOP_ROLE"},{"location":"reference/#tanjun.dependencies.limiters.BucketResource.USER","text":"USER = 0 A per-user resource bucket.","title":"USER"},{"location":"reference/#tanjun.Client","text":"Bases: tanjun . Client Tanjun's standard tanjun.abc.Client implementation. This implementation supports dependency injection for checks, command callbacks, prefix getters and event listeners. For more information on how this works see alluka . When manually managing the lifetime of the client the linked rest app or bot must always be started before the Tanjun client. Note By default this client includes a parser error handling hook which will by overwritten if you call tanjun.Client.set_hooks .","title":"Client"},{"location":"reference/#tanjun.clients.Client.__init__","text":"__init__ ( rest , * , cache = None , events = None , server = None , shards = None , voice = None , event_managed = False , injector = None , mention_prefix = False , set_global_commands = False , declare_global_commands = False , command_ids = None , message_ids = None , user_ids = None , _stack_level = 0 ) Initialise a Tanjun client. Note For a quicker way to initiate this client around a standard bot aware client, see tanjun.Client.from_gateway_bot and tanjun.Client.from_rest_bot . PARAMETER DESCRIPTION rest The Hikari REST client this will use. TYPE: hikari . api . RESTClient cache The Hikari cache client this will use if applicable. TYPE: typing . Optional [ hikari . api . Cache ] DEFAULT: None events The Hikari event manager client this will use if applicable. This is necessary for message command dispatch and will also be necessary for interaction command dispatch if server isn't provided. TYPE: typing . Optional [ hikari . api . EventManager ] DEFAULT: None server The Hikari interaction server client this will use if applicable. This is used for interaction command dispatch if interaction events aren't being received from the event manager. TYPE: typing . Optional [ hikari . api . InteractionServer ] DEFAULT: None shards The Hikari shard aware client this will use if applicable. TYPE: typing . Optional [ hikari . ShardAware ] DEFAULT: None voice The Hikari voice component this will use if applicable. TYPE: typing . Optional [ hikari . api . VoiceComponent ] DEFAULT: None event_managed Whether or not this client is managed by the event manager. An event managed client will be automatically started and closed based on Hikari's lifetime events. This can only be passed as True if events is also provided. TYPE: bool DEFAULT: False injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None mention_prefix Whether or not mention prefixes should be automatically set when this client is first started. It should be noted that this only applies to message commands. TYPE: bool DEFAULT: False declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None RAISES DESCRIPTION ValueError Raises for the following reasons: If event_managed is True when event_manager is None . If command_ids is passed when multiple guild ids are provided for declare_global_commands . If command_ids is passed when declare_global_commands is False .","title":"__init__()"},{"location":"reference/#tanjun.clients.Client.add_check","text":"add_check ( check ) Add a generic check to this client. This will be applied to both message and slash command execution. PARAMETER DESCRIPTION check The check to add. This may be either synchronous or asynchronous and must take one positional argument of type tanjun.abc.Context with dependency injection being supported for its keyword arguments. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"add_check()"},{"location":"reference/#tanjun.clients.Client.add_component","text":"add_component ( component ) Add a component to this client. PARAMETER DESCRIPTION component The component to move to this client. TYPE: tanjun . Component RETURNS DESCRIPTION Self The client instance to allow chained calls. RAISES DESCRIPTION ValueError If the component's name is already registered.","title":"add_component()"},{"location":"reference/#tanjun.clients.Client.add_prefix","text":"add_prefix ( prefixes ) Add a prefix used to filter message command calls. This will be matched against the first character(s) in a message's content to determine whether the message command search stage of execution should be initiated. PARAMETER DESCRIPTION prefixes Either a single string or an iterable of strings to be used as prefixes. TYPE: typing . Union [ collections . Iterable [ str ], str ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"add_prefix()"},{"location":"reference/#tanjun.clients.Client.checks","text":"checks () Collection of the level tanjun.abc.Context checks registered to this client. Note These may be taking advantage of the standard dependency injection.","title":"checks()"},{"location":"reference/#tanjun.clients.Client.close","text":"close ( * , deregister_listeners = True ) Close the client. RAISES DESCRIPTION RuntimeError If the client isn't running.","title":"close()"},{"location":"reference/#tanjun.clients.Client.fetch_rest_application_id","text":"fetch_rest_application_id () Fetch the ID of the application this client is linked to. RETURNS DESCRIPTION hikari . Snowflake The application ID of the application this client is linked to.","title":"fetch_rest_application_id()"},{"location":"reference/#tanjun.clients.Client.from_gateway_bot","text":"from_gateway_bot ( bot , / , * , event_managed = True , injector = None , mention_prefix = False , declare_global_commands = False , set_global_commands = False , command_ids = None , message_ids = None , user_ids = None ) Build a tanjun.Client from a hikari.traits.GatewayBotAware instance. Note This defaults the client to human only mode and sets type dependency injectors for the hikari traits present in bot (including hikari.traits.GatewayBotAware ). PARAMETER DESCRIPTION bot The bot client to build from. This will be used to infer the relevant Hikari clients to use. TYPE: hikari . GatewayBotAware event_managed Whether or not this client is managed by the event manager. An event managed client will be automatically started and closed based on Hikari's lifetime events. TYPE: bool DEFAULT: True injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None mention_prefix Whether or not mention prefixes should be automatically set when this client is first started. It should be noted that this only applies to message commands. TYPE: bool DEFAULT: False declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the commands to update. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None","title":"from_gateway_bot()"},{"location":"reference/#tanjun.clients.Client.from_rest_bot","text":"from_rest_bot ( bot , / , * , bot_managed = False , declare_global_commands = False , injector = None , set_global_commands = False , command_ids = None , message_ids = None , user_ids = None ) Build a tanjun.Client from a hikari.traits.RESTBotAware instance. Note This sets type dependency injectors for the hikari traits present in bot (including hikari.traits.RESTBotAware ). PARAMETER DESCRIPTION bot The bot client to build from. TYPE: hikari . RESTBotAware declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False bot_managed Whether the client should be managed by the REST bot. A REST bot managed client will be automatically started and closed based on the REST bot's startup and shutdown callbacks. TYPE: bool DEFAULT: False injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None","title":"from_rest_bot()"},{"location":"reference/#tanjun.clients.Client.hooks","text":"hooks () Top level tanjun.abc.AnyHooks set for this client. These are called during both message, menu and slash command execution.","title":"hooks()"},{"location":"reference/#tanjun.clients.Client.interaction_accepts","text":"interaction_accepts () The types of interactions this client is executing.","title":"interaction_accepts()"},{"location":"reference/#tanjun.clients.Client.is_human_only","text":"is_human_only () Whether this client is only executing for non-bot/webhook users messages.","title":"is_human_only()"},{"location":"reference/#tanjun.clients.Client.menu_hooks","text":"menu_hooks () Top level tanjun.abc.MenuHooks set for this client. These are only called during menu command execution.","title":"menu_hooks()"},{"location":"reference/#tanjun.clients.Client.message_accepts","text":"message_accepts () Type of message create events this command client accepts for execution.","title":"message_accepts()"},{"location":"reference/#tanjun.clients.Client.message_hooks","text":"message_hooks () Top level tanjun.abc.MessageHooks set for this client. These are only called during message command execution.","title":"message_hooks()"},{"location":"reference/#tanjun.clients.Client.on_autocomplete_interaction_request","text":"on_autocomplete_interaction_request ( interaction ) Execute a command autocomplete based on received REST requests. PARAMETER DESCRIPTION interaction The interaction to execute autocomplete based on. TYPE: hikari . AutocompleteInteraction RETURNS DESCRIPTION hikari . api . InteractionAutocompleteBuilder The initial response to send back to Discord.","title":"on_autocomplete_interaction_request()"},{"location":"reference/#tanjun.clients.Client.on_command_interaction_request","text":"on_command_interaction_request ( interaction ) Execute an app command based on received REST requests. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . CommandInteraction RETURNS DESCRIPTION hikari . api . InteractionMessageBuilder | hikari . api . InteractionDeferredBuilder The initial response to send back to Discord.","title":"on_command_interaction_request()"},{"location":"reference/#tanjun.clients.Client.on_gateway_autocomplete_create","text":"on_gateway_autocomplete_create ( interaction ) Execute command autocomplete based on a received gateway interaction create. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . AutocompleteInteraction","title":"on_gateway_autocomplete_create()"},{"location":"reference/#tanjun.clients.Client.on_gateway_command_create","text":"on_gateway_command_create ( interaction ) Execute an app command based on a received gateway interaction create. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . CommandInteraction","title":"on_gateway_command_create()"},{"location":"reference/#tanjun.clients.Client.on_interaction_create_event","text":"on_interaction_create_event ( event ) Handle a gateway interaction create event. This will execute both application command and autocomplete interactions. PARAMETER DESCRIPTION event The event to execute commands based on. TYPE: hikari . InteractionCreateEvent","title":"on_interaction_create_event()"},{"location":"reference/#tanjun.clients.Client.on_message_create_event","text":"on_message_create_event ( event ) Execute a message command based on a gateway event. PARAMETER DESCRIPTION event The event to handle. TYPE: hikari . MessageCreateEvent","title":"on_message_create_event()"},{"location":"reference/#tanjun.clients.Client.open","text":"open ( * , register_listeners = True ) Start the client. If mention_prefix was passed to tanjun.Client. init or tanjun.Client.from_gateway_bot then this function may make a fetch request to Discord if it cannot get the current user from the cache. RAISES DESCRIPTION RuntimeError If the client is already active.","title":"open()"},{"location":"reference/#tanjun.clients.Client.prefix_getter","text":"prefix_getter () Prefix getter method set for this client. For more information on this callback's signature see tanjun.clients.PrefixGetterSig .","title":"prefix_getter()"},{"location":"reference/#tanjun.clients.Client.prefixes","text":"prefixes () Collection of the standard prefixes set for this client.","title":"prefixes()"},{"location":"reference/#tanjun.clients.Client.remove_check","text":"remove_check ( check ) Remove a check from the client. PARAMETER DESCRIPTION check The check to remove. TYPE: tanjun . CheckSig RAISES DESCRIPTION ValueError If the check was not previously added.","title":"remove_check()"},{"location":"reference/#tanjun.clients.Client.remove_prefix","text":"remove_prefix ( prefix ) Remove a message content prefix from the client. PARAMETER DESCRIPTION prefix The prefix to remove. TYPE: str RAISES DESCRIPTION ValueError If the prefix is not registered with the client. RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"remove_prefix()"},{"location":"reference/#tanjun.clients.Client.set_auto_defer_after","text":"set_auto_defer_after ( time ) Set when this client should automatically defer execution of commands. Warning If time is set to None then automatic deferrals will be disabled. This may lead to unexpected behaviour. PARAMETER DESCRIPTION time The time in seconds to defer interaction command responses after. TYPE: typing . Optional [ float ]","title":"set_auto_defer_after()"},{"location":"reference/#tanjun.clients.Client.set_autocomplete_ctx_maker","text":"set_autocomplete_ctx_maker ( maker = context . AutocompleteContext ) Set the autocomplete context maker to use when creating contexts. Warning The caller must return an instance of tanjun.context.AutocompleteContext rather than just any implementation of the AutocompleteContext abc due to this client relying on implementation detail of tanjun.context.AutocompleteContext . PARAMETER DESCRIPTION maker The autocomplete context maker to use. This is a callback which should match the signature of tanjun.context.AutocompleteContext. init and return an instance of tanjun.context.AutocompleteContext . TYPE: _AutocompleteContextMakerProto DEFAULT: context.AutocompleteContext RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_autocomplete_ctx_maker()"},{"location":"reference/#tanjun.clients.Client.set_case_sensitive","text":"set_case_sensitive ( state ) Set whether this client defaults to being case sensitive for message commands. PARAMETER DESCRIPTION state Whether this client's message commands should be matched case-sensitively. This may be overridden by component specific configuration. TYPE: bool","title":"set_case_sensitive()"},{"location":"reference/#tanjun.clients.Client.set_default_app_command_permissions","text":"set_default_app_command_permissions ( permissions ) Set the default member permissions needed for this client's commands. Warning This may be overridden by guild staff and does not apply to admins. PARAMETER DESCRIPTION permissions The default member permissions needed for this client's application commands. This may be overridden by tanjun.abc.AppCommand.default_member_permissions and tanjun.abc.Component.default_app_cmd_permissions ; if this is left as None then this config will be inherited from the parent client. TYPE: typing . Union [ int , hikari . Permissions ] RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_default_app_command_permissions()"},{"location":"reference/#tanjun.clients.Client.set_dms_enabled_for_app_cmds","text":"set_dms_enabled_for_app_cmds ( state ) Set whether this clients's commands should be enabled in DMs. PARAMETER DESCRIPTION state Whether to enable this client's commands in DMs. This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and tanjun.abc.Component.dms_enabled_for_app_cmds ; if this is left as None then this config will be inherited from the parent client. TYPE: bool RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_dms_enabled_for_app_cmds()"},{"location":"reference/#tanjun.clients.Client.set_ephemeral_default","text":"set_ephemeral_default ( state ) Set whether slash contexts spawned by this client should default to ephemeral responses. This defaults to False if not explicitly set. PARAMETER DESCRIPTION state Whether slash command contexts executed in this client should should default to ephemeral. This will be overridden by any response calls which specify flags. TYPE: bool RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_ephemeral_default()"},{"location":"reference/#tanjun.clients.Client.set_global_commands","text":"set_global_commands ( * , application = None , guild = hikari . UNDEFINED , force = False ) Alias of tanjun.Client.declare_global_commands . deprecated Since v2.1.1a1; use tanjun.Client.declare_global_commands instead.","title":"set_global_commands()"},{"location":"reference/#tanjun.clients.Client.set_hikari_trait_injectors","text":"set_hikari_trait_injectors ( bot ) Set type based dependency injection based on the hikari traits found in bot . This is a short hand for calling tanjun.Client.add_type_dependency for all the hikari trait types bot is valid for with bot. PARAMETER DESCRIPTION bot The hikari client to set dependency injectors for. TYPE: hikari . RESTAware","title":"set_hikari_trait_injectors()"},{"location":"reference/#tanjun.clients.Client.set_hooks","text":"set_hooks ( hooks ) Set the general command execution hooks for this client. The callbacks within this hook will be added to every slash and message command execution started by this client. PARAMETER DESCRIPTION hooks The general command execution hooks to set for this client. Passing None will remove all hooks. TYPE: typing . Optional [ tanjun . AnyHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_hooks()"},{"location":"reference/#tanjun.clients.Client.set_human_only","text":"set_human_only ( value = True ) Set whether or not message commands execution should be limited to \"human\" users. Note This doesn't apply to interaction commands as these can only be triggered by a \"human\" (normal user account). PARAMETER DESCRIPTION value Whether or not message commands execution should be limited to \"human\" users. Passing True here will prevent message commands from being executed based on webhook and bot messages. TYPE: bool DEFAULT: True","title":"set_human_only()"},{"location":"reference/#tanjun.clients.Client.set_interaction_accepts","text":"set_interaction_accepts ( accepts ) Set the kind of interactions this client should execute. PARAMETER DESCRIPTION accepts Bitfield of the interaction types this client should execute. TYPE: InteractionAcceptsEnum RAISES DESCRIPTION RuntimeError If called while the client is running.","title":"set_interaction_accepts()"},{"location":"reference/#tanjun.clients.Client.set_interaction_not_found","text":"set_interaction_not_found ( message ) Set the response message for when an interaction command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when an interaction command isn't found. TYPE: typing . Optional [ str ]","title":"set_interaction_not_found()"},{"location":"reference/#tanjun.clients.Client.set_menu_ctx_maker","text":"set_menu_ctx_maker ( maker = context . MenuContext ) Set the autocomplete context maker to use when creating contexts. Warning The caller must return an instance of tanjun.context.MenuContext rather than just any implementation of the MenuContext abc due to this client relying on implementation detail of tanjun.context.MenuContext . PARAMETER DESCRIPTION maker The autocomplete context maker to use. This is a callback which should match the signature of tanjun.context.MenuContext. init and return an instance of tanjun.context.MenuContext . TYPE: _MenuContextMakerProto DEFAULT: context.MenuContext RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_menu_ctx_maker()"},{"location":"reference/#tanjun.clients.Client.set_menu_hooks","text":"set_menu_hooks ( hooks ) Set the menu command execution hooks for this client. The callbacks within this hook will be added to every menu command execution started by this client. PARAMETER DESCRIPTION hooks The menu context specific command execution hooks to set for this client. Passing None will remove the hooks. TYPE: typing . Optional [ tanjun . MenuHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_menu_hooks()"},{"location":"reference/#tanjun.clients.Client.set_menu_not_found","text":"set_menu_not_found ( message ) Set the response message for when a menu command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when a menu command isn't found. TYPE: typing . Optional [ str ]","title":"set_menu_not_found()"},{"location":"reference/#tanjun.clients.Client.set_message_accepts","text":"set_message_accepts ( accepts ) Set the kind of messages commands should be executed based on. PARAMETER DESCRIPTION accepts The type of messages commands should be executed based on. TYPE: MessageAcceptsEnum RAISES DESCRIPTION RuntimeError If called while the client is running. ValueError If accepts is set to anything other than tanjun.clients.MessageAcceptsEnum.NONE when the client doesn't have a linked event manager.","title":"set_message_accepts()"},{"location":"reference/#tanjun.clients.Client.set_message_ctx_maker","text":"set_message_ctx_maker ( maker = context . MessageContext ) Set the message context maker to use when creating context for a message. Warning The caller must return an instance of tanjun.context.MessageContext rather than just any implementation of the MessageContext abc due to this client relying on implementation detail of tanjun.context.MessageContext . PARAMETER DESCRIPTION maker The message context maker to use. This is a callback which should match the signature of tanjun.context.MessageContext. init and return an instance of tanjun.context.MessageContext . TYPE: _MessageContextMakerProto DEFAULT: context.MessageContext RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_message_ctx_maker()"},{"location":"reference/#tanjun.clients.Client.set_message_hooks","text":"set_message_hooks ( hooks ) Set the message command execution hooks for this client. The callbacks within this hook will be added to every message command execution started by this client. PARAMETER DESCRIPTION hooks The message context specific command execution hooks to set for this client. Passing None will remove all hooks. TYPE: typing . Optional [ tanjun . MessageHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_message_hooks()"},{"location":"reference/#tanjun.clients.Client.set_prefix_getter","text":"set_prefix_getter ( getter ) Set the callback used to retrieve message prefixes set for the relevant guild. PARAMETER DESCRIPTION getter The callback which'll be used to retrieve prefixes for the guild a message context is from. If None is passed here then the callback will be unset. This should be an async callback which one argument of type tanjun.abc.MessageContext and returns an iterable of string prefixes. Dependency injection is supported for this callback's keyword arguments. TYPE: typing . Optional [ PrefixGetterSig ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_prefix_getter()"},{"location":"reference/#tanjun.clients.Client.set_slash_ctx_maker","text":"set_slash_ctx_maker ( maker = context . SlashContext ) Set the slash context maker to use when creating context for a slash command. Warning The caller must return an instance of tanjun.context.SlashContext rather than just any implementation of the SlashContext abc due to this client relying on implementation detail of tanjun.context.SlashContext . PARAMETER DESCRIPTION maker The slash context maker to use. This is a callback which should match the signature of tanjun.context.SlashContext. init and return an instance of tanjun.context.SlashContext . TYPE: _SlashContextMakerProto DEFAULT: context.SlashContext RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_slash_ctx_maker()"},{"location":"reference/#tanjun.clients.Client.set_slash_hooks","text":"set_slash_hooks ( hooks ) Set the slash command execution hooks for this client. The callbacks within this hook will be added to every slash command execution started by this client. PARAMETER DESCRIPTION hooks The slash context specific command execution hooks to set for this client. Passing None will remove the hooks. TYPE: typing . Optional [ tanjun . SlashHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_slash_hooks()"},{"location":"reference/#tanjun.clients.Client.set_slash_not_found","text":"set_slash_not_found ( message ) Set the response message for when a slash command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when a slash command isn't found. TYPE: typing . Optional [ str ]","title":"set_slash_not_found()"},{"location":"reference/#tanjun.clients.Client.slash_hooks","text":"slash_hooks () Top level tanjun.abc.SlashHooks set for this client. These are only called during slash command execution.","title":"slash_hooks()"},{"location":"reference/#tanjun.clients.Client.with_check","text":"with_check ( check ) Add a check to this client through a decorator call. PARAMETER DESCRIPTION check The check to add. This may be either synchronous or asynchronous and must take one positional argument of type tanjun.abc.Context with dependency injection being supported for its keyword arguments. TYPE: tanjun . abc . CheckSig RETURNS DESCRIPTION tanjun . abc . CheckSig The added check.","title":"with_check()"},{"location":"reference/#tanjun.clients.Client.with_prefix_getter","text":"with_prefix_getter ( getter ) Set the prefix getter callback for this client through decorator call. Examples: client = tanjun . Client . from_rest_bot ( bot ) @client . with_prefix_getter async def prefix_getter ( ctx : tanjun . abc . MessageContext ) -> collections . abc . Iterable [ str ]: raise NotImplementedError PARAMETER DESCRIPTION getter The callback which'll be to retrieve prefixes for the guild a message event is from. This should be an async callback which one argument of type tanjun.abc.MessageContext and returns an iterable of string prefixes. Dependency injection is supported for this callback's keyword arguments. TYPE: PrefixGetterSig RETURNS DESCRIPTION PrefixGetterSig The registered callback.","title":"with_prefix_getter()"},{"location":"reference/#tanjun.ClientCallbackNames","text":"Bases: str , enum . Enum Enum of the standard client callback names. These should be dispatched by all tanjun.abc.Client implementations.","title":"ClientCallbackNames"},{"location":"reference/#tanjun.abc.ClientCallbackNames.CLOSED","text":"CLOSED = 'closed' Called when the client has finished closing. No positional arguments are provided for this event.","title":"CLOSED"},{"location":"reference/#tanjun.abc.ClientCallbackNames.CLOSING","text":"CLOSING = 'closing' Called when the client is initially instructed to close. No positional arguments are provided for this event.","title":"CLOSING"},{"location":"reference/#tanjun.abc.ClientCallbackNames.COMPONENT_ADDED","text":"COMPONENT_ADDED = 'component_added' Called when a component is added to an active client. Warning This event isn't dispatched for components which were registered while the client is inactive. The first positional argument is the tanjun.abc.Component being added.","title":"COMPONENT_ADDED"},{"location":"reference/#tanjun.abc.ClientCallbackNames.COMPONENT_REMOVED","text":"COMPONENT_REMOVED = 'component_removed' Called when a component is added to an active client. Warning This event isn't dispatched for components which were removed while the client is inactive. The first positional argument is the tanjun.abc.Component being removed.","title":"COMPONENT_REMOVED"},{"location":"reference/#tanjun.abc.ClientCallbackNames.MENU_COMMAND_NOT_FOUND","text":"MENU_COMMAND_NOT_FOUND = 'menu_command_not_found' Called when a menu command is not found. tanjun.abc.MenuContext is provided as the first positional argument.","title":"MENU_COMMAND_NOT_FOUND"},{"location":"reference/#tanjun.abc.ClientCallbackNames.MESSAGE_COMMAND_NOT_FOUND","text":"MESSAGE_COMMAND_NOT_FOUND = 'message_command_not_found' Called when a message command is not found. tanjun.abc.MessageContext is provided as the first positional argument.","title":"MESSAGE_COMMAND_NOT_FOUND"},{"location":"reference/#tanjun.abc.ClientCallbackNames.SLASH_COMMAND_NOT_FOUND","text":"SLASH_COMMAND_NOT_FOUND = 'slash_command_not_found' Called when a slash command is not found. tanjun.abc.SlashContext is provided as the first positional argument.","title":"SLASH_COMMAND_NOT_FOUND"},{"location":"reference/#tanjun.abc.ClientCallbackNames.STARTED","text":"STARTED = 'started' Called when the client has finished starting. No positional arguments are provided for this event.","title":"STARTED"},{"location":"reference/#tanjun.abc.ClientCallbackNames.STARTING","text":"STARTING = 'starting' Called when the client is initially instructed to start. No positional arguments are provided for this event.","title":"STARTING"},{"location":"reference/#tanjun.CommandError","text":"Bases: TanjunError An error which is sent as a response to the command call.","title":"CommandError"},{"location":"reference/#tanjun.errors.CommandError.__init__","text":"__init__ ( content = hikari . UNDEFINED , * , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Initialise a command error. PARAMETER DESCRIPTION content The content to respond with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None attachment A singular attachment to respond with. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments A sequence of attachments to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this response. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this response. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to respond with. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RAISES DESCRIPTION ValueError Raised for any of the following reasons: When both attachment and attachments are provided. When both component and components are passed. When both embed and embeds are passed. If more than 100 entries are passed for role_mentions . If more than 100 entries are passed for user_mentions .","title":"__init__()"},{"location":"reference/#tanjun.errors.CommandError.send","text":"send ( ctx , / , * , ensure_result = False ) Send this error as a command response. PARAMETER DESCRIPTION ctx The command call context to respond to. TYPE: tanjun . Context ensure_result Ensure that this call will always return a message object. If True then this will always return hikari.messages.Message , otherwise this will return hikari.Message | None . It's worth noting that, under certain scenarios within the slash command flow, this may lead to an extre request being made. TYPE: bool DEFAULT: False RAISES DESCRIPTION ValueError If delete_after would be more than 15 minutes after the slash command was called. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"send()"},{"location":"reference/#tanjun.Component","text":"Bases: tanjun . Component Standard implementation of tanjun.abc.Component . This is a collcetion of commands (both message and slash), hooks and listener callbacks which can be added to a generic client. Note This implementation supports dependency injection for its checks, command callbacks and listeners when linked to a client which supports dependency injection.","title":"Component"},{"location":"reference/#tanjun.components.Component.__init__","text":"__init__ ( * , name = None , strict = False ) Initialise a new component. PARAMETER DESCRIPTION name The component's identifier. If not provided then this will be a random string. TYPE: typing . Optional [ str ] DEFAULT: None strict Whether this component should use a stricter (more optimal) approach for message command search. When this is True , message command names will not be allowed to contain spaces and will have to be unique to one command within the component. TYPE: bool DEFAULT: False","title":"__init__()"},{"location":"reference/#tanjun.components.Component.add_check","text":"add_check ( check ) Add a command check to this component to be used for all its commands. PARAMETER DESCRIPTION check The check to add. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self This component to enable method chaining.","title":"add_check()"},{"location":"reference/#tanjun.components.Component.add_client_callback","text":"add_client_callback ( name , callback ) Add a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] callback The callback to register. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to. TYPE: tanjun . MetaEventSig RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"add_client_callback()"},{"location":"reference/#tanjun.components.Component.add_command","text":"add_command ( command ) Add a command to this component. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . ExecutableCommand [ typing . Any ] RETURNS DESCRIPTION Self The current component to allow for chaining.","title":"add_command()"},{"location":"reference/#tanjun.components.Component.add_message_command","text":"add_message_command ( command ) Add a message command to the component. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The component to allow method chaining. RAISES DESCRIPTION ValueError If one of the command's name is already registered in a strict component.","title":"add_message_command()"},{"location":"reference/#tanjun.components.Component.add_on_close","text":"add_on_close ( callback ) Add a close callback to this component. Note Unlike the closing and closed client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The close callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION Self The component object to enable call chaining.","title":"add_on_close()"},{"location":"reference/#tanjun.components.Component.add_on_open","text":"add_on_open ( callback ) Add a open callback to this component. Note Unlike the starting and started client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The open callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION Self The component object to enable call chaining.","title":"add_on_open()"},{"location":"reference/#tanjun.components.Component.add_schedule","text":"add_schedule ( schedule ) Add a schedule to the component. PARAMETER DESCRIPTION schedule The schedule to add. TYPE: schedules_ . AbstractSchedule RETURNS DESCRIPTION Self The component itself for chaining.","title":"add_schedule()"},{"location":"reference/#tanjun.components.Component.checks","text":"checks () Collection of the checks being run against every command execution in this component.","title":"checks()"},{"location":"reference/#tanjun.components.Component.get_client_callbacks","text":"get_client_callbacks ( name ) Get a collection of the callbacks registered for a specific name. PARAMETER DESCRIPTION name The name to get the callbacks registered for. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Collection [ MetaEventSig ] Collection of the callbacks for the provided name.","title":"get_client_callbacks()"},{"location":"reference/#tanjun.components.Component.hooks","text":"hooks () The general command hooks set for this component, if any.","title":"hooks()"},{"location":"reference/#tanjun.components.Component.load_from_scope","text":"load_from_scope ( * , include_globals = False , scope = None ) Load entries such as top-level commands into the component from the calling scope. Note This will load schedules which support and commands AbstractComponentLoader (all standard implementations support this) and will ignore commands which are owned by command groups. Note This will detect entries from the calling scope which implement tanjun.components.AbstractComponentLoader unless scope is passed but this isn't possible in a stack-less python implementation; in stack-less environments the scope will have to be explicitly passed as scope . PARAMETER DESCRIPTION include_globals Whether to include global variables (along with local) while detecting from the calling scope. This cannot be True when scope is provided and will only ever be needed when the local scope is different from the global scope. TYPE: bool DEFAULT: False scope The scope to detect entries which implement tanjun.components.AbstractComponentLoader from. This overrides the default usage of stackframe introspection. TYPE: typing . Optional [ collections . Mapping [ str , typing . Any ]] DEFAULT: None RETURNS DESCRIPTION Self The current component to allow for chaining. RAISES DESCRIPTION RuntimeError If this is called in a python implementation which doesn't support stack frame inspection when scope is not provided. ValueError If scope is provided when include_globals is True.","title":"load_from_scope()"},{"location":"reference/#tanjun.components.Component.make_loader","text":"make_loader ( * , copy = True ) Make a loader/unloader for this component. This enables loading, unloading and reloading of this component into a client by targeting the module using tanjun.Client.load_modules , tanjun.Client.unload_modules and tanjun.Client.reload_modules . PARAMETER DESCRIPTION copy Whether to copy the component before loading it into a client. TYPE: bool DEFAULT: True RETURNS DESCRIPTION tanjun . abc . ClientLoader The loader for this component.","title":"make_loader()"},{"location":"reference/#tanjun.components.Component.menu_hooks","text":"menu_hooks () The menu command hooks set for this component, if any.","title":"menu_hooks()"},{"location":"reference/#tanjun.components.Component.message_hooks","text":"message_hooks () The message command hooks set for this component, if any.","title":"message_hooks()"},{"location":"reference/#tanjun.components.Component.remove_check","text":"remove_check ( check ) Remove a command check from this component. PARAMETER DESCRIPTION check The check to remove. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self This component to enable method chaining. RAISES DESCRIPTION ValueError If the check is not registered with this component.","title":"remove_check()"},{"location":"reference/#tanjun.components.Component.remove_client_callback","text":"remove_client_callback ( name , callback ) Remove a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: str callback The callback to remove from the client's callbacks. TYPE: tanjun . MetaEventSig RAISES DESCRIPTION KeyError If the provided name isn't found. ValueError If the provided callback isn't found. RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"remove_client_callback()"},{"location":"reference/#tanjun.components.Component.remove_command","text":"remove_command ( command ) Remove a command from this component. PARAMETER DESCRIPTION command The command to remove. TYPE: tanjun . ExecutableCommand [ typing . Any ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"remove_command()"},{"location":"reference/#tanjun.components.Component.remove_schedule","text":"remove_schedule ( schedule ) Remove a schedule from the component. PARAMETER DESCRIPTION schedule The schedule to remove TYPE: schedules_ . AbstractSchedule RETURNS DESCRIPTION Self The component itself for chaining. RAISES DESCRIPTION ValueError If the schedule isn't registered.","title":"remove_schedule()"},{"location":"reference/#tanjun.components.Component.schedules","text":"schedules () Collection of the schedules registered to this component.","title":"schedules()"},{"location":"reference/#tanjun.components.Component.set_case_sensitive","text":"set_case_sensitive ( state ) Set whether this component defaults to being case sensitive for component. PARAMETER DESCRIPTION state Whether this component's message commands should be matched case-sensitively. If this is left as None then the client's case-sensitive setting will be used. TYPE: typing . Optional [ bool ]","title":"set_case_sensitive()"},{"location":"reference/#tanjun.components.Component.set_default_app_command_permissions","text":"set_default_app_command_permissions ( permissions ) Set the default member permissions needed for this component's commands. Warning This may be overridden by guild staff and does not apply to admins. PARAMETER DESCRIPTION permissions The default member permissions needed for this component's application commands. If this is left as None then this config will be inherited from the parent client. This may be overridden by tanjun.abc.AppCommand.default_member_permissions and if this is left as None then this config will be inherited from the parent client. TYPE: typing . Union [ int , hikari . Permissions , None] RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_default_app_command_permissions()"},{"location":"reference/#tanjun.components.Component.set_dms_enabled_for_app_cmds","text":"set_dms_enabled_for_app_cmds ( state ) Set whether this component's commands should be enabled in DMs. PARAMETER DESCRIPTION state Whether to enable this component's commands in DMs. This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and if this is left as None then this config will be inherited from the parent client. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_dms_enabled_for_app_cmds()"},{"location":"reference/#tanjun.components.Component.set_ephemeral_default","text":"set_ephemeral_default ( state ) Set whether slash contexts executed in this component should default to ephemeral responses. PARAMETER DESCRIPTION state Whether slash command contexts executed in this component should should default to ephemeral. This will be overridden by any response calls which specify flags. Setting this to None will let the default set on the parent client propagate and decide the ephemeral default behaviour. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"set_ephemeral_default()"},{"location":"reference/#tanjun.components.Component.set_hooks","text":"set_hooks ( hooks ) Set hooks to be called during the execution of all of this component's commands. PARAMETER DESCRIPTION hooks The command hooks to set. TYPE: typing . Optional [ tanjun . AnyHooks ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"set_hooks()"},{"location":"reference/#tanjun.components.Component.set_menu_hooks","text":"set_menu_hooks ( hooks ) Set hooks to be called during the execution of this component's menu commands. PARAMETER DESCRIPTION hooks The menu command hooks to set. TYPE: typing . Optional [ tanjun . MenuHooks ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"set_menu_hooks()"},{"location":"reference/#tanjun.components.Component.set_message_hooks","text":"set_message_hooks ( hooks ) Set hooks to be called during the execution of this component's message commands. PARAMETER DESCRIPTION hooks The message command hooks to set. TYPE: typing . Optional [ tanjun . MessageHooks ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"set_message_hooks()"},{"location":"reference/#tanjun.components.Component.set_slash_hooks","text":"set_slash_hooks ( hooks ) Set hooks to be called during the execution of this component's slash commands. PARAMETER DESCRIPTION hooks The slash command hooks to set. TYPE: typing . Optional [ tanjun . SlashHooks ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"set_slash_hooks()"},{"location":"reference/#tanjun.components.Component.slash_hooks","text":"slash_hooks () The slash command hooks set for this component, if any.","title":"slash_hooks()"},{"location":"reference/#tanjun.components.Component.with_check","text":"with_check ( check ) Add a general command check to this component through a decorator call. PARAMETER DESCRIPTION check The check to add. TYPE: tanjun . abc . CheckSig RETURNS DESCRIPTION tanjun . abc . CheckSig The added check.","title":"with_check()"},{"location":"reference/#tanjun.components.Component.with_client_callback","text":"with_client_callback ( name ) Add a client callback through a decorator call. Examples: client = tanjun . Client . from_rest_bot ( bot ) @client . with_client_callback ( \"closed\" ) async def on_close () -> None : raise NotImplementedError PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MetaEventSig ], tanjun . abc . MetaEventSig ] Decorator callback used to register the client callback. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to.","title":"with_client_callback()"},{"location":"reference/#tanjun.components.Component.with_command","text":"with_command ( command = None , / , * , copy = False , follow_wrapped = False ) Add a command to this component through a decorator call. Examples: This may be used inconjunction with tanjun.as_slash_command and tanjun.as_message_command . @component . with_command @tanjun . with_slash_str_option ( \"option_name\" , \"option description\" ) @tanjun . as_slash_command ( \"command_name\" , \"command description\" ) async def slash_command ( ctx : tanjun . abc . Context , arg : str ) -> None : await ctx . respond ( f \"Hi { arg } \" ) @component . with_command @tanjun . with_argument ( \"argument_name\" ) @tanjun . as_message_command ( \"command_name\" ) async def message_command ( ctx : tanjun . abc . Context , arg : str ) -> None : await ctx . respond ( f \"Hi { arg } \" ) PARAMETER DESCRIPTION command The command to add to this component. TYPE: typing . Optional [ _CommandT ] DEFAULT: None copy Whether to copy the command before adding it to this component. TYPE: bool DEFAULT: False follow_wrapped Whether to also add any commands command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The added command.","title":"with_command()"},{"location":"reference/#tanjun.components.Component.with_on_close","text":"with_on_close ( callback ) Add a close callback to this component through a decorator call. Note Unlike the closing and closed client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The close callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION OnCallbackSig The added close callback.","title":"with_on_close()"},{"location":"reference/#tanjun.components.Component.with_on_open","text":"with_on_open ( callback ) Add a open callback to this component through a decorator call. Note Unlike the starting and started client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The open callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION OnCallbackSig The added open callback.","title":"with_on_open()"},{"location":"reference/#tanjun.components.Component.with_schedule","text":"with_schedule ( schedule ) Add a schedule to the component through a decorator call.","title":"with_schedule()"},{"location":"reference/#tanjun.components.Component.with_schedule--example","text":"This may be used in conjunction with tanjun.as_interval . @component . with_schedule @tanjun . as_interval ( 60 ) async def my_schedule (): print ( \"I'm running every minute!\" ) PARAMETER DESCRIPTION schedule The schedule to add. TYPE: tanjun . schedules . AbstractSchedule RETURNS DESCRIPTION tanjun . schedules . AbstractSchedule The added schedule.","title":"Example"},{"location":"reference/#tanjun.ConversionError","text":"Bases: ParserError Error raised by a parser parameter when it failed to converter a value.","title":"ConversionError"},{"location":"reference/#tanjun.errors.ConversionError.parameter","text":"parameter : str Name of the parameter this error was raised for.","title":"parameter"},{"location":"reference/#tanjun.errors.ConversionError.__init__","text":"__init__ ( message , parameter , / , errors = ()) Initialise a conversion error. PARAMETER DESCRIPTION parameter The parameter this was raised by. TYPE: str errors An iterable of the source value errors which were raised during conversion. TYPE: collections . Iterable [ ValueError ] DEFAULT: ()","title":"__init__()"},{"location":"reference/#tanjun.FailedCheck","text":"Bases: TanjunError , RuntimeError Error raised as an alternative to returning False in a check.","title":"FailedCheck"},{"location":"reference/#tanjun.FailedModuleImport","text":"Bases: FailedModuleLoad Error raised when a module failed to import. This is a specialisation of tanjun.errors.FailedModuleLoad .","title":"FailedModuleImport"},{"location":"reference/#tanjun.FailedModuleLoad","text":"Bases: TanjunError Error raised when a module fails to load. This may be raised by the module failing to import or by one of its loaders erroring. This source error can be accessed at FailedModuleLoad. cause .","title":"FailedModuleLoad"},{"location":"reference/#tanjun.errors.FailedModuleLoad.__cause__","text":"__cause__ : Exception The root error.","title":"__cause__"},{"location":"reference/#tanjun.errors.FailedModuleLoad.path","text":"path () The path of the module which caused the error.","title":"path()"},{"location":"reference/#tanjun.FailedModuleUnload","text":"Bases: TanjunError Error raised when a module fails to unload. This may be raised by the module failing to import or by one of its unloaders erroring. The source error can be accessed at FailedModuleUnload. cause .","title":"FailedModuleUnload"},{"location":"reference/#tanjun.errors.FailedModuleUnload.__cause__","text":"__cause__ : Exception The root error.","title":"__cause__"},{"location":"reference/#tanjun.errors.FailedModuleUnload.path","text":"path () The path of the module which caused the error.","title":"path()"},{"location":"reference/#tanjun.HaltExecution","text":"Bases: TanjunError Error raised while looking for a command in-order to end-execution early. For the most part, this will be raised during checks in-order to prevent other commands from being tried.","title":"HaltExecution"},{"location":"reference/#tanjun.Hooks","text":"Bases: tanjun . Hooks [ _ContextT_contra ] Standard implementation of tanjun.abc.Hooks used for command execution. This will take either tanjun.abc.Context , tanjun.abc.MessageContext or tanjun.abc.SlashContext dependent on what its bound by (generic wise). Note This implementation adds a concept of parser errors which won't be dispatched to general \"error\" hooks and do not share the error suppression semantics as they favour to always suppress the error if a registered handler is found.","title":"Hooks"},{"location":"reference/#tanjun.hooks.Hooks.__init__","text":"__init__ () Initialise a command hook object.","title":"__init__()"},{"location":"reference/#tanjun.hooks.Hooks.add_to_command","text":"add_to_command ( command ) Add this hook object to a command. Note This will likely override any previously added hooks. Examples: This method may be used as a command decorator: @standard_hooks . add_to_command @as_message_command ( \"command\" ) async def command_command ( ctx : tanjun . abc . Context ) -> None : await ctx . respond ( \"You've called a command!\" ) PARAMETER DESCRIPTION command The command to add the hooks to. TYPE: tanjun . abc . ExecutableCommand RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command with the hooks added.","title":"add_to_command()"},{"location":"reference/#tanjun.hooks.Hooks.copy","text":"copy () Copy this hook object.","title":"copy()"},{"location":"reference/#tanjun.hooks.Hooks.set_on_error","text":"set_on_error ( callback ) Set the error callback for this hook object. Note This will not be called for tanjun.ParserError s as these are generally speaking expected. To handle those see Hooks.set_on_parser_error . PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take two positional arguments (of type tanjun.abc.Context and Exception ) and may be either synchronous or asynchronous. Returning True indicates that the error should be suppressed, False that it should be re-raised and None that no decision has been made. This will be accounted for along with the decisions other error hooks make by majority rule. TYPE: typing . Optional [ tanjun . ErrorHookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"set_on_error()"},{"location":"reference/#tanjun.hooks.Hooks.set_on_parser_error","text":"set_on_parser_error ( callback ) Set the parser error callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take two positional arguments (of type tanjun.abc.Context and tanjun.ParserError ), return None and may be either synchronous or asynchronous. It's worth noting that, unlike general error handlers, this will always suppress the error. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"set_on_parser_error()"},{"location":"reference/#tanjun.hooks.Hooks.set_on_success","text":"set_on_success ( callback ) Set the success callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"set_on_success()"},{"location":"reference/#tanjun.hooks.Hooks.set_post_execution","text":"set_post_execution ( callback ) Set the post-execution callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"set_post_execution()"},{"location":"reference/#tanjun.hooks.Hooks.set_pre_execution","text":"set_pre_execution ( callback ) Set the pre-execution callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"set_pre_execution()"},{"location":"reference/#tanjun.HotReloader","text":"Manages hot reloading modules for a Tanjun client.. Warning An instance of this can only be linked to 1 client. Examples: client = tanjun . Client . from_gateway_bot ( bot ) ( tanjun . dependencies . HotReloader () . add_modules ( \"python.module.path\" , pathlib . Path ( \"./module.py\" )) . add_directory ( \"./modules/\" ) . add_to_client ( client ) )","title":"HotReloader"},{"location":"reference/#tanjun.dependencies.reloaders.HotReloader.__init__","text":"__init__ ( * , commands_guild = None , interval = datetime . timedelta ( microseconds = 500000 ), redeclare_cmds_after = datetime . timedelta ( seconds = 10 ), unload_on_delete = True ) Initialise a hot reloader. Warning redeclare_cmds_after is not aware of commands declared outside of the reloader and will lead to commands being redeclared on startup when mixed with tanjun.clients.Client. init 's declare_global_commands argument when it is not None . PARAMETER DESCRIPTION commands_guild Object or ID of the guild to declare commands in if redeclare_cmds_after is not None . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: None interval How often this should scan files and directories for changes in seconds. TYPE: typing . Union [ int , float , datetime . timedelta ] DEFAULT: datetime.timedelta(microseconds=500000) redeclare_cmds_after How often to redeclare application commands after a change to the commands is detected. If None is passed here then this will not redeclare the application's commands. TYPE: typing . Union [ int , float , datetime . timedelta , None] DEFAULT: datetime.timedelta(seconds=10) unload_on_delete Whether this should unload modules when their relevant file is deleted. TYPE: bool DEFAULT: True","title":"__init__()"},{"location":"reference/#tanjun.dependencies.reloaders.HotReloader.add_directory","text":"add_directory ( directory , / , * , namespace = None ) Add a directory for this hot reloader to track. Note This will only reload modules directly in the target directory and will not scan sub-directories. PARAMETER DESCRIPTION directory Path of the directory to hot reload. TYPE: typing . Union [ str , pathlib . Path ] namespace The python namespace this directory's modules should be imported from, if applicable. This work as {namespace}.{file.name.removesuffix(\".py\")} and will have the same behaviour as when a str is passed to tanjun.abc.Client.load_modules if passed. If left as None then this will have the same behaviour as when a pathlib.Path is passed to tanjun.abc.Client.load_modules . TYPE: typing . Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Self The hot reloader to enable chained calls. RAISES DESCRIPTION FileNotFoundError If the directory cannot be found","title":"add_directory()"},{"location":"reference/#tanjun.dependencies.reloaders.HotReloader.add_directory_async","text":"add_directory_async ( directory , / , * , namespace = None ) Asynchronous variant of tanjun.dependencies.reloaders.HotReloader.add_directory . Unlike tanjun.dependencies.reloaders.HotReloader.add_directory , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.dependencies.reloaders.HotReloader.add_directory .","title":"add_directory_async()"},{"location":"reference/#tanjun.dependencies.reloaders.HotReloader.add_modules","text":"add_modules ( * paths ) Add modules for this hot reloader to track. PARAMETER DESCRIPTION *paths Module paths for this hot reloader to track. This has the same behaviour as [tanjun.abc.Client.load_modules][ for how [pathlib.Path][] and str are treated. TYPE: typing . Union [ str , pathlib . Path ] DEFAULT: () RAISES DESCRIPTION FileNotFoundError If the module's file doesn't exist anymore. ModuleNotFoundError If the str module path cannot be imported.","title":"add_modules()"},{"location":"reference/#tanjun.dependencies.reloaders.HotReloader.add_modules_async","text":"add_modules_async ( * paths ) Asynchronous variant of tanjun.dependencies.reloaders.HotReloader.add_modules . Unlike tanjun.dependencies.reloaders.HotReloader.add_modules , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.abc.Client.load_modules .","title":"add_modules_async()"},{"location":"reference/#tanjun.dependencies.reloaders.HotReloader.add_to_client","text":"add_to_client ( client ) Add this to a tanjun.abc.Client instance. This registers start and closing callbacks which handle the lifetime of this and adds this as a type dependency. PARAMETER DESCRIPTION client The client to link this hot reloader to. TYPE: tanjun . Client","title":"add_to_client()"},{"location":"reference/#tanjun.dependencies.reloaders.HotReloader.scan","text":"scan ( client ) Manually scan this hot reloader's tracked modules for changes. PARAMETER DESCRIPTION client The client to reload and unload modules in. TYPE: tanjun . Client","title":"scan()"},{"location":"reference/#tanjun.dependencies.reloaders.HotReloader.start","text":"start ( client ) Start the hot reloader. RAISES DESCRIPTION RuntimeError If the hot reloader is already running.","title":"start()"},{"location":"reference/#tanjun.dependencies.reloaders.HotReloader.stop","text":"stop () Stop the hot reloader. RAISES DESCRIPTION RuntimeError If the hot reloader isn't running.","title":"stop()"},{"location":"reference/#tanjun.InMemoryConcurrencyLimiter","text":"Bases: AbstractConcurrencyLimiter In-memory standard implementation of AbstractConcurrencyLimiter . Examples: InMemoryConcurrencyLimiter.set_bucket may be used to set the concurrency limits for a specific bucket: ( InMemoryConcurrencyLimiter () # Set the default bucket template to 10 concurrent uses of the command per-user. . set_bucket ( \"default\" , tanjun . BucketResource . USER , 10 ) # Set the \"moderation\" bucket with a limit of 5 concurrent uses per-guild. . set_bucket ( \"moderation\" , tanjun . BucketResource . GUILD , 5 ) . set_bucket () # add_to_client will setup the concurrency manager (setting it as an # injected dependency and registering callbacks to manage it). . add_to_client ( client ) )","title":"InMemoryConcurrencyLimiter"},{"location":"reference/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter.add_to_client","text":"add_to_client ( client ) Add this concurrency manager to a tanjun client. Note This registers the manager as a type dependency and manages opening and closing the manager based on the client's life cycle. PARAMETER DESCRIPTION client The client to add this concurrency manager to. TYPE: tanjun . Client","title":"add_to_client()"},{"location":"reference/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter.close","text":"close () Stop the concurrency manager. RAISES DESCRIPTION RuntimeError If the concurrency manager is not running.","title":"close()"},{"location":"reference/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter.disable_bucket","text":"disable_bucket ( bucket_id ) Disable a concurrency limit bucket. This will stop the bucket from ever hitting a concurrency limit and also prevents the bucket from defaulting. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The bucket to disable. TYPE: str RETURNS DESCRIPTION Self This concurrency manager to allow for chaining.","title":"disable_bucket()"},{"location":"reference/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter.open","text":"open ( * , _loop = None ) Start the concurrency manager. RAISES DESCRIPTION RuntimeError If the concurrency manager is already running. If called in a thread with no running event loop.","title":"open()"},{"location":"reference/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter.set_bucket","text":"set_bucket ( bucket_id , resource , limit ) Set the concurrency limit for a specific bucket. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The ID of the bucket to set the concurrency limit for. TYPE: str resource The type of resource to target for the concurrency limit. TYPE: BucketResource limit The maximum number of concurrent uses to allow. TYPE: int RETURNS DESCRIPTION Self The concurrency manager to allow call chaining. RAISES DESCRIPTION ValueError If an invalid resource type is given. if limit is less 0 or negative.","title":"set_bucket()"},{"location":"reference/#tanjun.InMemoryCooldownManager","text":"Bases: AbstractCooldownManager In-memory standard implementation of AbstractCooldownManager . Examples: InMemoryCooldownManager.set_bucket may be used to set the cooldown for a specific bucket: ( InMemoryCooldownManager () # Set the default bucket template to a per-user 10 uses per-60 seconds cooldown. . set_bucket ( \"default\" , tanjun . BucketResource . USER , 10 , 60 ) # Set the \"moderation\" bucket to a per-guild 100 uses per-5 minutes cooldown. . set_bucket ( \"moderation\" , tanjun . BucketResource . GUILD , 100 , datetime . timedelta ( minutes = 5 )) . set_bucket () # add_to_client will setup the cooldown manager (setting it as an # injected dependency and registering callbacks to manage it). . add_to_client ( client ) )","title":"InMemoryCooldownManager"},{"location":"reference/#tanjun.dependencies.limiters.InMemoryCooldownManager.add_to_client","text":"add_to_client ( client ) Add this cooldown manager to a tanjun client. Note This registers the manager as a type dependency and manages opening and closing the manager based on the client's life cycle. PARAMETER DESCRIPTION client The client to add this cooldown manager to. TYPE: tanjun . Client","title":"add_to_client()"},{"location":"reference/#tanjun.dependencies.limiters.InMemoryCooldownManager.close","text":"close () Stop the cooldown manager. RAISES DESCRIPTION RuntimeError If the cooldown manager is not running.","title":"close()"},{"location":"reference/#tanjun.dependencies.limiters.InMemoryCooldownManager.disable_bucket","text":"disable_bucket ( bucket_id ) Disable a cooldown bucket. This will stop the bucket from ever hitting a cooldown and also prevents the bucket from defaulting. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The bucket to disable. TYPE: str RETURNS DESCRIPTION Self This cooldown manager to allow for chaining.","title":"disable_bucket()"},{"location":"reference/#tanjun.dependencies.limiters.InMemoryCooldownManager.open","text":"open ( * , _loop = None ) Start the cooldown manager. RAISES DESCRIPTION RuntimeError If the cooldown manager is already running. If called in a thread with no running event loop.","title":"open()"},{"location":"reference/#tanjun.dependencies.limiters.InMemoryCooldownManager.set_bucket","text":"set_bucket ( bucket_id , resource , limit , reset_after ) Set the cooldown for a specific bucket. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The ID of the bucket to set the cooldown for. TYPE: str resource The type of resource to target for the cooldown. TYPE: BucketResource limit The number of uses per cooldown period. TYPE: int reset_after The cooldown period. TYPE: typing . Union [ int , float , datetime . timedelta ] RETURNS DESCRIPTION Self The cooldown manager to allow call chaining. RAISES DESCRIPTION ValueError If an invalid resource type is given. If reset_after or limit are negative, 0 or invalid. if limit is less 0 or negative.","title":"set_bucket()"},{"location":"reference/#tanjun.InteractionAcceptsEnum","text":"Bases: enum . IntFlag The possible configurations for which interaction this client should execute.","title":"InteractionAcceptsEnum"},{"location":"reference/#tanjun.clients.InteractionAcceptsEnum.ALL","text":"ALL = AUTOCOMPLETE | COMMANDS Execute all the interaction types Tanjun supports.","title":"ALL"},{"location":"reference/#tanjun.clients.InteractionAcceptsEnum.AUTOCOMPLETE","text":"AUTOCOMPLETE = enum . auto () Execute autocomplete interactions.","title":"AUTOCOMPLETE"},{"location":"reference/#tanjun.clients.InteractionAcceptsEnum.COMMANDS","text":"COMMANDS = enum . auto () Execute command interactions. This includes slash command and context menu calls.","title":"COMMANDS"},{"location":"reference/#tanjun.clients.InteractionAcceptsEnum.NONE","text":"NONE = 0 Set the client to execute no interactions.","title":"NONE"},{"location":"reference/#tanjun.LazyConstant","text":"Bases: typing . Generic [ _T ] Injected type used to hold and generate lazy constants. Note To easily resolve this type use inject_lc .","title":"LazyConstant"},{"location":"reference/#tanjun.dependencies.data.LazyConstant.__init__","text":"__init__ ( callback ) Initiate a new lazy constant. PARAMETER DESCRIPTION callback Callback used to resolve this to a constant value. This supports dependency injection and may either be sync or asynchronous. TYPE: alluka . abc . CallbackSig [ _T ]","title":"__init__()"},{"location":"reference/#tanjun.dependencies.data.LazyConstant.acquire","text":"acquire () Acquire this lazy constant as an asynchronous lock. This is used to ensure that the value is only generated once and should be kept acquired until LazyConstant.set_value has been called. RETURNS DESCRIPTION contextlib . AbstractAsyncContextManager [ typing . Any ] Context manager that can be used to acquire the lock.","title":"acquire()"},{"location":"reference/#tanjun.dependencies.data.LazyConstant.callback","text":"callback () Descriptor of the callback used to get this constant's initial value.","title":"callback()"},{"location":"reference/#tanjun.dependencies.data.LazyConstant.get_value","text":"get_value () Get the value of this constant if set, else None .","title":"get_value()"},{"location":"reference/#tanjun.dependencies.data.LazyConstant.reset","text":"reset () Clear the internally stored value.","title":"reset()"},{"location":"reference/#tanjun.dependencies.data.LazyConstant.set_value","text":"set_value ( value ) Set the constant value. PARAMETER DESCRIPTION value The value to set. TYPE: _T RAISES DESCRIPTION RuntimeError If the constant has already been set.","title":"set_value()"},{"location":"reference/#tanjun.MenuCommand","text":"Bases: base . PartialCommand [ tanjun . MenuContext ] , tanjun . MenuCommand [ _MenuCommandCallbackSigT , _MenuTypeT ] Base class used for the standard menu command implementations.","title":"MenuCommand"},{"location":"reference/#tanjun.commands.menu.MenuCommand.__init__","text":"__init__ ( callback , type_ , name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , _wrapped_command = None ) Initialise a user or message menu command. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MenuContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MenuContext , ...], collections . abc . Coroutine [ Any , ANy , None]] type_ The type of menu command this is. Only hikari.commands.CommandType.USER and hikari.commands.CommandType.MESSAGE are valid here. TYPE: hikari . commands . CommandType name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters.","title":"__init__()"},{"location":"reference/#tanjun.commands.menu.MenuCommand.set_ephemeral_default","text":"set_ephemeral_default ( state ) Set whether this command's responses should default to ephemeral. PARAMETER DESCRIPTION state Whether this command's responses should default to ephemeral. This will be overridden by any response calls which specify flags. Setting this to None will let the default set on the parent command(s), component or client propagate and decide the ephemeral default for contexts used by this command. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This command to allow for chaining.","title":"set_ephemeral_default()"},{"location":"reference/#tanjun.commands.menu.MenuCommand.wrapped_command","text":"wrapped_command () The command object this wraps, if any.","title":"wrapped_command()"},{"location":"reference/#tanjun.MessageAcceptsEnum","text":"Bases: str , enum . Enum The possible configurations for which events tanjun.Client should execute commands based on.","title":"MessageAcceptsEnum"},{"location":"reference/#tanjun.clients.MessageAcceptsEnum.ALL","text":"ALL = 'ALL' Set the client to execute commands based on both DM and guild message create events.","title":"ALL"},{"location":"reference/#tanjun.clients.MessageAcceptsEnum.DM_ONLY","text":"DM_ONLY = 'DM_ONLY' Set the client to execute commands based only DM message create events.","title":"DM_ONLY"},{"location":"reference/#tanjun.clients.MessageAcceptsEnum.GUILD_ONLY","text":"GUILD_ONLY = 'GUILD_ONLY' Set the client to execute commands based only guild message create events.","title":"GUILD_ONLY"},{"location":"reference/#tanjun.clients.MessageAcceptsEnum.NONE","text":"NONE = 'NONE' Set the client to not execute commands based on message create events.","title":"NONE"},{"location":"reference/#tanjun.clients.MessageAcceptsEnum.get_event_type","text":"get_event_type () Get the base event type this mode listens to. RETURNS DESCRIPTION type [ hikari . events . MessageCreateEvent ] | None The type object of the MessageCreateEvent class this mode will register a listener for. This will be None if this mode disables listening to message create events.","title":"get_event_type()"},{"location":"reference/#tanjun.MessageCommand","text":"Bases: base . PartialCommand [ tanjun . MessageContext ] , tanjun . MessageCommand [ _CommandCallbackSigT ] Standard implementation of a message command.","title":"MessageCommand"},{"location":"reference/#tanjun.commands.message.MessageCommand.__init__","text":"__init__ ( callback , name , / , * names , validate_arg_keys = True , _wrapped_command = None ) Initialise a message command. PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MessageContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MessageContext , ...], collections . abc . Coroutine [None]] name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True","title":"__init__()"},{"location":"reference/#tanjun.commands.message.MessageCommand.wrapped_command","text":"wrapped_command () The command object this wraps, if any.","title":"wrapped_command()"},{"location":"reference/#tanjun.MessageCommandGroup","text":"Bases: MessageCommand [ _CommandCallbackSigT ] , tanjun . MessageCommandGroup [ _CommandCallbackSigT ] Standard implementation of a message command group.","title":"MessageCommandGroup"},{"location":"reference/#tanjun.commands.message.MessageCommandGroup.__init__","text":"__init__ ( callback , name , / , * names , strict = False , validate_arg_keys = True , _wrapped_command = None ) Initialise a message command group. PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MessageContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MessageContext , ...], collections . abc . Coroutine [None]] name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True","title":"__init__()"},{"location":"reference/#tanjun.commands.message.MessageCommandGroup.add_command","text":"add_command ( command ) Add a command to this group. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The group instance to enable chained calls. RAISES DESCRIPTION ValueError If one of the command's names is already registered in a strict command group.","title":"add_command()"},{"location":"reference/#tanjun.commands.message.MessageCommandGroup.as_sub_command","text":"as_sub_command ( name , / , * names , validate_arg_keys = True ) Build a message command in this group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a sub-command. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ).","title":"as_sub_command()"},{"location":"reference/#tanjun.commands.message.MessageCommandGroup.as_sub_group","text":"as_sub_group ( name , / , * names , strict = False , validate_arg_keys = True ) Build a message command group in this group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a sub-command group. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ).","title":"as_sub_group()"},{"location":"reference/#tanjun.ModuleMissingLoaders","text":"Bases: RuntimeError , TanjunError Error raised when a module is missing loaders.","title":"ModuleMissingLoaders"},{"location":"reference/#tanjun.errors.ModuleMissingLoaders.message","text":"message () The error message.","title":"message()"},{"location":"reference/#tanjun.errors.ModuleMissingLoaders.path","text":"path () The path of the module which is missing loaders.","title":"path()"},{"location":"reference/#tanjun.ModuleMissingUnloaders","text":"Bases: RuntimeError , TanjunError Error raised when a module is missing unloaders.","title":"ModuleMissingUnloaders"},{"location":"reference/#tanjun.errors.ModuleMissingUnloaders.message","text":"message () The error message.","title":"message()"},{"location":"reference/#tanjun.errors.ModuleMissingUnloaders.path","text":"path () The path of the module which is missing unloaders.","title":"path()"},{"location":"reference/#tanjun.ModuleStateConflict","text":"Bases: ValueError , TanjunError Error raised when a module cannot be (un)loaded due to a state conflict.","title":"ModuleStateConflict"},{"location":"reference/#tanjun.errors.ModuleStateConflict.message","text":"message () The error message.","title":"message()"},{"location":"reference/#tanjun.errors.ModuleStateConflict.path","text":"path () The path of the module which caused the error.","title":"path()"},{"location":"reference/#tanjun.NotEnoughArgumentsError","text":"Bases: ParserError Error raised by the parser when not enough arguments are found for a parameter.","title":"NotEnoughArgumentsError"},{"location":"reference/#tanjun.errors.NotEnoughArgumentsError.parameter","text":"parameter : str Name of the parameter this error was raised for.","title":"parameter"},{"location":"reference/#tanjun.errors.NotEnoughArgumentsError.__init__","text":"__init__ ( message , parameter ) Initialise a not enough arguments error. PARAMETER DESCRIPTION message The error message. TYPE: str parameter The parameter this error was raised for. TYPE: str","title":"__init__()"},{"location":"reference/#tanjun.ParserError","text":"Bases: TanjunError , ValueError Base error raised by a parser or parameter during parsing. Note Expected errors raised by the parser will subclass this error.","title":"ParserError"},{"location":"reference/#tanjun.errors.ParserError.__init__","text":"__init__ ( message , parameter ) Initialise a parser error. PARAMETER DESCRIPTION message String message for this error. TYPE: str parameter Name of the parameter which caused this error, should be None if not applicable. TYPE: typing . Optional [ str ]","title":"__init__()"},{"location":"reference/#tanjun.ShlexParser","text":"Bases: AbstractOptionParser A shlex based AbstractOptionParser implementation.","title":"ShlexParser"},{"location":"reference/#tanjun.parsing.ShlexParser.__init__","text":"__init__ () Initialise a shlex parser.","title":"__init__()"},{"location":"reference/#tanjun.SlashCommand","text":"Bases: BaseSlashCommand , tanjun . SlashCommand [ _CommandCallbackSigT ] Standard implementation of a slash command.","title":"SlashCommand"},{"location":"reference/#tanjun.commands.slash.SlashCommand.__init__","text":"__init__ ( callback , name , description , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , sort_options = True , validate_arg_keys = True , _wrapped_command = None ) Initialise a slash command. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands within slash command groups. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.SlashContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . SlashContext , ...], collections . abc . Coroutine [ Any , Any , None]] name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"__init__()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.add_attachment_option","text":"add_attachment_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add an attachment option to the slash command. Note This will result in options of type hikari.messages.Attachment . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_attachment_option()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.add_bool_option","text":"add_bool_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a boolean option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_bool_option()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.add_channel_option","text":"add_channel_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , types = None , pass_as_kwarg = True ) Add a channel option to a slash command. Note This will always result in hikari.interactions.command_interactions.InteractionChannel . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT types A collection of the channel classes and types this option should accept. If left as None or empty then the option will allow all channel types. TYPE: typing . Optional [ collections . Collection [ typing . Union [ type [ hikari . PartialChannel ], int ]]] DEFAULT: None key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If an invalid type is passed in types . If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_channel_option()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.add_float_option","text":"add_float_option ( name , description , / , * , always_float = True , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True , _stack_level = 0 ) Add a float option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_float If this is set to True then the value will always be converted to a float (this will happen before it's passed to converters). This masks behaviour from Discord where we will either be provided a float or int dependent on what the user provided. TYPE: bool DEFAULT: True autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This is a mapping of [option_name, option_value] where option_name should be a string of up to 100 characters and option_value should be a float. TYPE: typing . Optional [ collections . Mapping [ str , float ]] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Collection [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_value The option's (inclusive) minimum value. TYPE: typing . Optional [ float ] DEFAULT: None max_value The option's (inclusive) maximum value. TYPE: typing . Optional [ float ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the fields coverters , and always_float will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If min_value is greater than max_value . If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_float_option()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.add_int_option","text":"add_int_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True , _stack_level = 0 ) Add an integer option to the slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type int . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This is a mapping of [option_name, option_value] where option_name should be a string of up to 100 characters and option_value should be an integer. TYPE: typing . Optional [ collections . Mapping [ str , int ]] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Collection [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_value The option's (inclusive) minimum value. TYPE: typing . Optional [ int ] DEFAULT: None max_value The option's (inclusive) maximum value. TYPE: typing . Optional [ int ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If min_value is greater than max_value . If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_int_option()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.add_member_option","text":"add_member_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None ) Add a member option to a slash command. Note This will always result in hikari.interactions.base_interactions.InteractionMember . Warning Unlike the other options, this is an artificial option which adds a restraint to the USER option type and therefore cannot have pass_as_kwarg set to False as this artificial constraint isn't present when its not being passed as a keyword argument. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_member_option()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.add_mentionable_option","text":"add_mentionable_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a mentionable option to a slash command. Note This may target roles, guild members or users and results in hikari.User | hikari.InteractionMember | hikari.Role . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_mentionable_option()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.add_role_option","text":"add_role_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a role option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_role_option()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.add_str_option","text":"add_str_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_length = None , max_length = None , pass_as_kwarg = True , _stack_level = 0 ) Add a string option to the slash command. Note As a shorthand, choices also supports passing a list of strings rather than a dict of names to values (each string will used as both the choice's name and value with the names being capitalised). PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This either a mapping of [option_name, option_value] where both option_name and option_value should be strings of up to 100 characters or a sequence of strings where the string will be used for both the choice's name and value. TYPE: typing . Union [ collections . Mapping [ str , str ], collections . Sequence [ str ], None] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Sequence [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_length The minimum length of this string. This must be greater than or equal to 0, and less than or equal to max_length and 6000 . TYPE: typing . Optional [ int ] DEFAULT: None max_length The maximum length of this string. This must be greater then or equal to min_length and 1, and less than or equal to 6000 . TYPE: typing . Optional [ int ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . If min_length is greater than max_length . If min_length is less than 0 or greater than 6000 . If max_length is less than 1 or greater than 6000 .","title":"add_str_option()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.add_user_option","text":"add_user_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a user option to a slash command. Note This may result in hikari.interactions.base_interactions.InteractionMember or hikari.users.User if the user isn't in the current guild or if this command was executed in a DM channel. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_user_option()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.set_float_autocomplete","text":"set_float_autocomplete ( name , callback ) Set the autocomplete callback for a float option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . Passing None here will remove the autocomplete callback for the option. TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type float .","title":"set_float_autocomplete()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.set_int_autocomplete","text":"set_int_autocomplete ( name , callback ) Set the autocomplete callback for a string option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . Passing None here will remove the autocomplete callback for the option. TYPE: tanjun . AutocompleteCallbackSig RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str .","title":"set_int_autocomplete()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.set_str_autocomplete","text":"set_str_autocomplete ( name , callback ) Set the autocomplete callback for a str option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . Passing None here will remove the autocomplete callback for the option. TYPE: tanjun . AutocompleteCallbackSig RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str .","title":"set_str_autocomplete()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.with_float_autocomplete","text":"with_float_autocomplete ( name ) Set the autocomplete callback for a float option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type float .","title":"with_float_autocomplete()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.with_int_autocomplete","text":"with_int_autocomplete ( name ) Set the autocomplete callback for a integer option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type int . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type int .","title":"with_int_autocomplete()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.with_str_autocomplete","text":"with_str_autocomplete ( name ) Set the autocomplete callback for a string option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str .","title":"with_str_autocomplete()"},{"location":"reference/#tanjun.commands.slash.SlashCommand.wrapped_command","text":"wrapped_command () The command object this wraps, if any.","title":"wrapped_command()"},{"location":"reference/#tanjun.SlashCommandGroup","text":"Bases: BaseSlashCommand , tanjun . SlashCommandGroup Standard implementation of a slash command group. Note Unlike message command groups, slash command groups cannot be callable functions themselves.","title":"SlashCommandGroup"},{"location":"reference/#tanjun.commands.slash.SlashCommandGroup.__init__","text":"__init__ ( name , description , / , * , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Initialise a slash command group. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands groups within another slash command groups. PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"__init__()"},{"location":"reference/#tanjun.commands.slash.SlashCommandGroup.add_command","text":"add_command ( command ) Add a slash command to this group. Warning Command groups are only supported within top-level groups. PARAMETER DESCRIPTION command Command to add to this group. TYPE: tanjun . BaseSlashCommand RETURNS DESCRIPTION Self Object of this group to enable chained calls.","title":"add_command()"},{"location":"reference/#tanjun.commands.slash.SlashCommandGroup.as_sub_command","text":"as_sub_command ( name , description , / , * , always_defer = False , default_to_ephemeral = None , sort_options = True , validate_arg_keys = True ) Build a tanjun.SlashCommand in this command group by decorating a function. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description. This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], SlashCommand ] The decorator callback used to make a sub-command. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand tanjun.SlashCommand ). RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"as_sub_command()"},{"location":"reference/#tanjun.commands.slash.SlashCommandGroup.make_sub_group","text":"make_sub_group ( name , description , / , * , default_to_ephemeral = None ) Create a sub-command group in this group. Note Unlike message command groups, slash command groups cannot be callable functions themselves. PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None RETURNS DESCRIPTION SlashCommandGroup The created sub-command group. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"make_sub_group()"},{"location":"reference/#tanjun.commands.slash.SlashCommandGroup.remove_command","text":"remove_command ( command ) Remove a command from this group. PARAMETER DESCRIPTION command Command to remove from this group. TYPE: tanjun . BaseSlashCommand RETURNS DESCRIPTION Self Object of this group to enable chained calls.","title":"remove_command()"},{"location":"reference/#tanjun.commands.slash.SlashCommandGroup.with_command","text":"with_command ( command ) Add a slash command to this group through a decorator call. PARAMETER DESCRIPTION command Command to add to this group. TYPE: tanjun . abc . BaseSlashCommand RETURNS DESCRIPTION tanjun . abc . BaseSlashCommand Command which was added to this group.","title":"with_command()"},{"location":"reference/#tanjun.TanjunError","text":"Bases: Exception The base class for all errors raised by Tanjun.","title":"TanjunError"},{"location":"reference/#tanjun.TooManyArgumentsError","text":"Bases: ParserError Error raised by the parser when too many arguments are found for a parameter.","title":"TooManyArgumentsError"},{"location":"reference/#tanjun.errors.TooManyArgumentsError.parameter","text":"parameter : str Name of the parameter this error was raised for.","title":"parameter"},{"location":"reference/#tanjun.errors.TooManyArgumentsError.__init__","text":"__init__ ( message , parameter ) Initialise a too many arguments error. PARAMETER DESCRIPTION message The error message. TYPE: str parameter The parameter this error was raised for. TYPE: str","title":"__init__()"},{"location":"reference/#tanjun.as_interval","text":"as_interval ( interval , / , * , fatal_exceptions = (), ignored_exceptions = (), max_runs = None ) Decorator to create an schedule. Examples: @component . with_schedule @tanjun . as_interval ( datetime . timedelta ( minutes = 5 )) # This will run every 5 minutes async def interval ( client : alluka . Injected [ tanjun . abc . Client ]) -> None : ... This should be loaded into a component using either Component.with_schedule or Component.load_from_scope , and will be started and stopped with the linked tanjun client. PARAMETER DESCRIPTION interval The interval between calls. Passed as a timedelta, or a number of seconds. TYPE: typing . Union [ int , float , datetime . timedelta ] fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () max_runs The maximum amount of times the schedule runs. TYPE: typing . Optional [ int ] DEFAULT: None RETURNS DESCRIPTION collections . Callable [[ _CallbackSigT ], tanjun . scheduling . IntervalSchedule [ _CallbackSigT ]] The decorator used to create the schedule. This should be decorating an asynchronous function which takes no positional arguments, returns None and may use dependency injection.","title":"as_interval()"},{"location":"reference/#tanjun.as_loader","text":"as_loader ( callback = None , / , * , standard_impl = True ) Mark a callback as being used to load Tanjun components from a module. Note This is only necessary if you wish to use tanjun.Client.load_modules . PARAMETER DESCRIPTION callback The callback used to load Tanjun components from a module. This should take one argument of type tanjun.Client (or tanjun.abc.Client if standard_impl is False ), return nothing and will be expected to initiate and add utilities such as components to the provided client. TYPE: typing . Union [ collections . Callable [[ tanjun . Client ], None], collections . Callable [[ Client ], None], None] DEFAULT: None standard_impl Whether this loader should only allow instances of tanjun.Client as opposed to tanjun.abc.Client . TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections.abc.Callable[[tanjun.abc.Client], None]] The decorated load callback.","title":"as_loader()"},{"location":"reference/#tanjun.as_message_command","text":"as_message_command ( name , / , * names , validate_arg_keys = True ) Build a message command from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a tanjun.MessageCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope .","title":"as_message_command()"},{"location":"reference/#tanjun.as_message_command_group","text":"as_message_command_group ( name , / , * names , strict = False , validate_arg_keys = True ) Build a message command group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a tanjun.MessageCommandGroup . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope .","title":"as_message_command_group()"},{"location":"reference/#tanjun.as_message_menu","text":"as_message_menu ( name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Build a message tanjun.MenuCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_message_menu ( \"message\" ) async def message_command ( self , ctx : tanjun . abc . MenuContext , message : hikari . Message ) -> None : await ctx . respond ( embed = hikari . Embed ( title = \"Message content\" , description = message . content or \"N/A\" ) ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters.","title":"as_message_menu()"},{"location":"reference/#tanjun.as_self_injecting","text":"as_self_injecting ( client ) Make a callback self-inecting by linking it to a client through a decorator call. Examples: def make_callback ( client : tanjun . Client ) -> collections . abc . Callable [[], int ]: @tanjun . as_self_injected ( client ) async def get_int_value ( redis : redis . Client = tanjun . inject ( type = redis . Client ) ) -> int : return int ( await redis . get ( 'key' )) return get_int_value PARAMETER DESCRIPTION client The client to use to resolve dependencies. TYPE: tanjun . abc . Client RETURNS DESCRIPTION collections . abc . Callable [[ alluka . abc . CallbackSig ], alluka . AsyncSelfInjecting ] Decorator callback that returns a self-injecting callback.","title":"as_self_injecting()"},{"location":"reference/#tanjun.as_slash_command","text":"as_slash_command ( name , description , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , sort_options = True , validate_arg_keys = True ) Build a tanjun.SlashCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands within slash command groups. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_slash_command ( \"ping\" , \"Get the bot's latency\" ) async def ping_command ( self , ctx : tanjun . abc . SlashContext ) -> None : start_time = time . perf_counter () await ctx . rest . fetch_my_user () time_taken = ( time . perf_counter () - start_time ) * 1_000 await ctx . respond ( f \"PONG \\n - REST: { time_taken : .0f } mss\" ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], SlashCommand ] The decorator callback used to make a tanjun.SlashCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"as_slash_command()"},{"location":"reference/#tanjun.as_time_schedule","text":"as_time_schedule ( * , months = (), weekly = False , days = (), hours = (), minutes = (), seconds = 0 , fatal_exceptions = (), ignored_exceptions = (), timezone = None ) Create a time schedule through a decorator call. Examples: @component . with_schedule @tanjun . as_time_schedule ( # This will run every week day at 8:00 and 16:00 UTC. minutes = 0 , hours = [ 8 , 16 ], days = range ( 0 , 5 ), weekly = True , timezone = datetime . timezone . utc ) async def interval ( client : alluka . Injected [ tanjun . abc . Client ]) -> None : ... This should be loaded into a component using either Component.with_schedule or Component.load_from_scope , and will be started and stopped with the linked tanjun client. PARAMETER DESCRIPTION months Either one or multiple months the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all months. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () weekly Whether the schedule should run on a weekly basis. TYPE: bool DEFAULT: False days Either one or multiple days the schedule should run on. When weekly is True , days will refer to the days of the week ( range(7) ). Otherwise this will refer to the days of the month ( range(32) ). For months where less than 31 days exist, numbers which are too large will be ignored. If this is not specified or an empty sequence, then the schedule will on all days. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () hours Either one or multiple hours the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all hours. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () minutes Either one or multiple minutes the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all minutes. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () seconds Either one or multiple seconds the schedule should run on. Defaults to the start of the minute if not specified or an empty sequence. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: 0 fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () timezone The timezone to use for the schedule. If this is not specified then the system's local timezone will be used. TYPE: typing . Optional [ datetime . timezone ] DEFAULT: None RETURNS DESCRIPTION collections . Callable [[ _CallbackSigT ], tanjun . scheduling . TimeSchedule [ _CallbackSigT ]] The decorator used to create the schedule. This should be decorating an asynchronous function which takes no positional arguments, returns None and may use dependency injection. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If months has any values outside the range of range(1, 13) . If days has any values outside the range of range(1, 32) when weekly is False or outside the range of range(1, 7) when weekly is True . If hours has any values outside the range of range(0, 24) . If minutes has any values outside the range of range(0, 60) . If seconds has any values outside the range of range(0, 60) .","title":"as_time_schedule()"},{"location":"reference/#tanjun.as_unloader","text":"as_unloader ( callback = None , / , * , standard_impl = True ) Mark a callback as being used to unload a module's utilities from a client. Note This is the inverse of tanjun.as_loader and is only necessary if you wish to use the tanjun.Client.unload_modules or tanjun.Client.reload_modules . PARAMETER DESCRIPTION callback The callback used to unload Tanjun components from a module. This should take one argument of type tanjun.Client (or tanjun.abc.Client if standard_impl is False ), return nothing and will be expected to remove utilities such as components from the provided client. TYPE: typing . Union [ collections . Callable [[ Client ], None], collections . Callable [[ tanjun . Client ], None], None] DEFAULT: None standard_impl Whether this unloader should only allow instances of tanjun.Client as opposed to tanjun.abc.Client . TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections.abc.Callable[[tanjun.abc.Client], None]] The decorated unload callback.","title":"as_unloader()"},{"location":"reference/#tanjun.as_user_menu","text":"as_user_menu ( name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Build a user tanjun.MenuCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_user_menu ( \"user\" ) async def user_command ( self , ctx : tanjun . abc . MenuContext , user : hikari . User | hikari . InteractionMember , ) -> None : await ctx . respond ( f \"Hello { user } \" ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters.","title":"as_user_menu()"},{"location":"reference/#tanjun.cached_inject","text":"cached_inject ( callback , / , * , expire_after = None ) Inject a callback with caching. This acts like alluka.inject and the result of it should also be assigned to a parameter's default to be used.","title":"cached_inject()"},{"location":"reference/#tanjun.cached_inject--example","text":"async def resolve_database ( client : tanjun . abc . Client = tanjun . inject ( type = tanjun . abc . Client ) ) -> Database : raise NotImplementedError @tanjun . as_message_command ( \"command name\" ) async def command ( ctx : tanjun . abc . Context , db : Database = tanjun . cached_inject ( resolve_database ) ) -> None : raise NotImplementedError PARAMETER DESCRIPTION callback The callback to inject. TYPE: alluka . abc . CallbackSig [ _T ] expire_after The amount of time to cache the result for in seconds. Leave this as None to cache for the runtime of the application. TYPE: typing . Union [ float , int , datetime . timedelta , None] DEFAULT: None RETURNS DESCRIPTION alluka . InjectedDescriptor [ _T ] Injector used to resolve the cached callback. RAISES DESCRIPTION ValueError If expire_after is not a valid value. If expire_after is not less than or equal to 0 seconds.","title":"Example"},{"location":"reference/#tanjun.inject_lc","text":"inject_lc ( type_ ) Make a LazyConstant injector. This acts like alluka.inject and the result of it should also be assigned to a parameter's default to be used. Note For this to work, a LazyConstant must've been set as a type dependency for the passed type_ . PARAMETER DESCRIPTION type_ The type of the constant to resolve. TYPE: type [ _T ] RETURNS DESCRIPTION alluka . InjectedDescriptor [ _T ] Injector used to resolve the LazyConstant.","title":"inject_lc()"},{"location":"reference/#tanjun.inject_lc--example","text":"@component . with_command @tanjun . as_message_command async def command ( ctx : tanjun . abc . MessageCommand , application : hikari . Application = tanjun . inject_lc ( hikari . Application ) ) -> None : raise NotImplementedError ... async def resolve_app ( client : tanjun . abc . Client = tanjun . inject ( type = tanjun . abc . Client ) ) -> hikari . Application : raise NotImplementedError tanjun . Client . from_gateway_bot ( ... ) . set_type_dependency ( tanjun . LazyConstant [ hikari . Application ] = tanjun . LazyConstant ( resolve_app ) )","title":"Example"},{"location":"reference/#tanjun.slash_command_group","text":"slash_command_group ( name , description , / , * , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Create a slash command group. Note Unlike message command groups, slash command groups cannot be callable functions themselves. Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for command groups within other slash command groups. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by [tanjun.Client.declare_global_commandsadd_command or when declare_global_commands is True Examples: Sub-commands can be added to the created slash command object through the following decorator based approach: help_group = tanjun . slash_command_group ( \"help\" , \"get help\" ) @help_group . with_command @tanjun . with_str_slash_option ( \"command_name\" , \"command name\" ) @tanjun . as_slash_command ( \"command\" , \"Get help with a command\" ) async def help_command_command ( ctx : tanjun . abc . SlashContext , command_name : str ) -> None : ... @help_group . with_command @tanjun . as_slash_command ( \"me\" , \"help me\" ) async def help_me_command ( ctx : tanjun . abc . SlashContext ) -> None : ... component = tanjun . Component () . add_slash_command ( help_group ) PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION SlashCommandGroup The command group. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"slash_command_group()"},{"location":"reference/#tanjun.to_bool","text":"to_bool ( value ) Convert user string input into a boolean value. PARAMETER DESCRIPTION value The value to convert. TYPE: str RETURNS DESCRIPTION bool The converted value. RAISES DESCRIPTION ValueError If the value cannot be converted.","title":"to_bool()"},{"location":"reference/#tanjun.to_color","text":"to_color ( argument ) Convert user input to a hikari.colors.Color object.","title":"to_color()"},{"location":"reference/#tanjun.to_datetime","text":"to_datetime ( value ) Parse a datetime from Discord's datetime format. More information on this format can be found at https://discord.com/developers/docs/reference#message-formatting-timestamp-styles PARAMETER DESCRIPTION value The value to parse. TYPE: str RETURNS DESCRIPTION datetime . datetime The parsed datetime. RAISES DESCRIPTION ValueError If the value cannot be parsed.","title":"to_datetime()"},{"location":"reference/#tanjun.with_all_checks","text":"with_all_checks ( check , / , * checks , follow_wrapped = False ) Add a check which will pass if all the provided checks pass through a decorator call. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . Context ], collections . abc . Coroutine [ typing . Any , typing . Any , bool ]] A check which will pass if all of the provided check callbacks pass.","title":"with_all_checks()"},{"location":"reference/#tanjun.with_any_checks","text":"with_any_checks ( check , / , * checks , error = None , error_message , follow_wrapped = False , halt_execution = False , suppress = ( errors . CommandError , errors . HaltExecution )) Add a check which'll pass if any of the provided checks pass through a decorator call. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.any_check\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False suppress Tuple of the exceptions to suppress when a check fails. TYPE: tuple [ type [ Exception ], ...] DEFAULT: (errors.CommandError, errors.HaltExecution) RETURNS DESCRIPTION collections . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator which adds the generated check to a command.","title":"with_any_checks()"},{"location":"reference/#tanjun.with_argument","text":"with_argument ( key , / , converters = (), * , default = UNDEFINED , greedy = False , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add an argument to a message command through a decorator call. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_argument ( \"command\" , converters = int , default = 42 ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : int ): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED greedy Whether or not this argument should be greedy (meaning that it takes in the remaining argument values). TYPE: bool DEFAULT: False min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi Whether this argument can be passed multiple times. RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True .","title":"with_argument()"},{"location":"reference/#tanjun.with_attachment_slash_option","text":"with_attachment_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add an attachment option to a slash command. For more information on this function's parameters see tanjun.SlashCommand.add_attachment_option . Examples: @with_attachment_slash_option ( \"name\" , \"A name.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , name : hikari . Attachment ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_attachment_slash_option()"},{"location":"reference/#tanjun.with_author_permission_check","text":"with_author_permission_check ( permissions , * , error = None , error_message = \"You don't have the permissions required to use this command\" , follow_wrapped = False , halt_execution = False ) Only let a command run if the author has certain permissions in the current channel. Note This will only pass for commands in DMs if permissions is valid for a DM context (e.g. can't have any moderation permissions) PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.AuthorPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"You don't have the permissions required to use this command\" follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check.","title":"with_author_permission_check()"},{"location":"reference/#tanjun.with_bool_slash_option","text":"with_bool_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a boolean option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_bool_option . Examples: @with_bool_slash_option ( \"flag\" , \"Whether this flag should be enabled.\" , default = False ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , flag : bool ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_bool_slash_option()"},{"location":"reference/#tanjun.with_channel_slash_option","text":"with_channel_slash_option ( name , description , / , * , types = None , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a channel option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_channel_option . Note This will always result in hikari.interactions.command_interactions.InteractionChannel . Examples: @with_channel_slash_option ( \"channel\" , \"channel to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , channel : hikari . InteractionChannel ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_channel_slash_option()"},{"location":"reference/#tanjun.with_check","text":"with_check ( check , / , * , follow_wrapped = False ) Add a generic check to a command. PARAMETER DESCRIPTION check The check to add to this command. TYPE: tanjun . CheckSig follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check.","title":"with_check()"},{"location":"reference/#tanjun.with_concurrency_limit","text":"with_concurrency_limit ( bucket_id , / , * , error = None , error_message = 'This resource is currently busy; please try again later.' , follow_wrapped = False ) Add the hooks used to manage a command's concurrency limit through a decorator call. Warning Concurrency limiters will only work if there's a setup injected AbstractConcurrencyLimiter dependency with InMemoryConcurrencyLimiter being usable as a standard in-memory concurrency manager. PARAMETER DESCRIPTION bucket_id The concurrency limit bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two one str argument which is the limiting bucket's ID. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if this fails to acquire the concurrency limit. This supports localisation and uses the check name \"tanjun.concurrency\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This resource is currently busy; please try again later.' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator that adds the concurrency limiter hooks to a command.","title":"with_concurrency_limit()"},{"location":"reference/#tanjun.with_cooldown","text":"with_cooldown ( bucket_id , / , * , error = None , error_message = 'This command is currently in cooldown. Try again {cooldown} .' , follow_wrapped = False , owners_exempt = True ) Add a pre-execution hook used to manage a command's cooldown through a decorator call. Warning Cooldowns will only work if there's a setup injected AbstractCooldownManager dependency with InMemoryCooldownManager being usable as a standard in-memory cooldown manager. PARAMETER DESCRIPTION bucket_id The cooldown bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two arguments one of type str and datetime.datetime where the first is the limiting bucket's ID and the second is when said bucket can be used again. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str , datetime . datetime ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.cooldown\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This command is currently in cooldown. Try again {cooldown}.' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False owners_exempt Whether owners should be exempt from the cooldown. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator that adds a CooldownPreExecution hook to the command.","title":"with_cooldown()"},{"location":"reference/#tanjun.with_dm_check","text":"with_dm_check ( command = None , / , * , error = None , error_message = 'Command can only be used in DMs' , follow_wrapped = False , halt_execution = False ) Only let a command run in a DM channel. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.DmCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in DMs' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to.","title":"with_dm_check()"},{"location":"reference/#tanjun.with_float_slash_option","text":"with_float_slash_option ( name , description , / , * , always_float = True , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True ) Add a float option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_float_option . Examples: @with_float_slash_option ( \"float_value\" , \"Float value.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , float_value : float ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_float_slash_option()"},{"location":"reference/#tanjun.with_greedy_argument","text":"with_greedy_argument ( key , / , converters = (), * , default = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add a greedy argument to a message command through a decorator call. A greedy argument will consume the remaining positional arguments and pass them through to the converters as one joined string while also requiring that at least one more positional argument is remaining unless a default is set. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_greedy_argument ( \"command\" , converters = StringView ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : StringView ): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True .","title":"with_greedy_argument()"},{"location":"reference/#tanjun.with_guild_check","text":"with_guild_check ( command = None , / , * , error = None , error_message = 'Command can only be used in guild channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a guild channel. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.GuildCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in guild channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommanmd The command this check was added to.","title":"with_guild_check()"},{"location":"reference/#tanjun.with_int_slash_option","text":"with_int_slash_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True ) Add an integer option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_int_option . Examples: @with_int_slash_option ( \"int_value\" , \"Int value.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , int_value : int ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_int_slash_option()"},{"location":"reference/#tanjun.with_member_slash_option","text":"with_member_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None ) Add a member option to a slash command. For information on this function's arguments see tanjun.SlashCommand.add_member_option . Note This will always result in hikari.interactions.base_interactions.InteractionMember . Examples: @with_member_slash_option ( \"member\" , \"member to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , member : hikari . InteractionMember ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_member_slash_option()"},{"location":"reference/#tanjun.with_mentionable_slash_option","text":"with_mentionable_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a mentionable option to a slash command. For information on this function's arguments see tanjun.SlashCommand.add_mentionable_option . Note This may target roles, guild members or users and results in hikari.User | hikari.InteractionMember | hikari.Role . Examples: @with_mentionable_slash_option ( \"mentionable\" , \"Mentionable entity to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , mentionable : [ Role , InteractionMember , User ]) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_mentionable_slash_option()"},{"location":"reference/#tanjun.with_multi_argument","text":"with_multi_argument ( key , / , converters = (), * , default = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add a multi-argument to a message command through a decorator call. A multi argument will consume the remaining positional arguments and pass them to the converters through multiple calls while also requiring that at least one more positional argument is remaining unless a default is set and passing through the results to the command's callback as a sequence. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_multi_argument ( \"command\" , converters = int ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : collections . abc . Sequence [ int ]): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True .","title":"with_multi_argument()"},{"location":"reference/#tanjun.with_multi_option","text":"with_multi_option ( key , name , / , * names , converters = (), default , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add an multi-option to a command's parser through a decorator call. A multi option will consume all the values provided for an option and pass them through to the converters as an array of strings while also requiring that at least one value is provided for the option unless a default is set. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_multi_option ( \"command\" , converters = int , default = ()) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : collections . abc . Sequence [ int ]): ... PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this argument to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this argument, unlike arguments this is required for options. TYPE: typing . Any converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this option is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True .","title":"with_multi_option()"},{"location":"reference/#tanjun.with_nsfw_check","text":"with_nsfw_check ( command = None , / , * , error = None , error_message = 'Command can only be used in NSFW channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a channel that's marked as nsfw. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.NsfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in NSFW channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to.","title":"with_nsfw_check()"},{"location":"reference/#tanjun.with_option","text":"with_option ( key , name , / , * names , converters = (), default , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add an option to a message command through a decorator call. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_option ( \"command\" , converters = int , default = 42 ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : int ): ... PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this argument to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this argument, unlike arguments this is required for options. TYPE: typing . Any converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi If this option can be provided multiple times. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this option is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True .","title":"with_option()"},{"location":"reference/#tanjun.with_own_permission_check","text":"with_own_permission_check ( permissions , * , error = None , error_message = \"Bot doesn't have the permissions required to run this command\" , follow_wrapped = False , halt_execution = False ) Only let a command run if we have certain permissions in the current channel. Note This will only pass for commands in DMs if permissions is valid for a DM context (e.g. can't have any moderation permissions) PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"Bot doesn't have the permissions required to run this command\" follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check.","title":"with_own_permission_check()"},{"location":"reference/#tanjun.with_owner_check","text":"with_owner_check ( command = None , / , * , error = None , error_message = 'Only bot owners can use this command' , follow_wrapped = False , halt_execution = False ) Only let a command run if it's being triggered by one of the bot's owners. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnerCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Only bot owners can use this command' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to.","title":"with_owner_check()"},{"location":"reference/#tanjun.with_parser","text":"with_parser ( command ) Add a shlex parser command parser to a supported command.","title":"with_parser()"},{"location":"reference/#tanjun.with_parser--example","text":"@tanjun . with_argument ( \"arg\" , converters = int ) @tanjun . with_parser @tanjun . as_message_command ( \"hi\" ) async def hi ( ctx : tanjun . MessageContext , arg : int ) -> None : ... PARAMETER DESCRIPTION command The message command to set the parser on. TYPE: _CommandT RETURNS DESCRIPTION tanjun . abc . MessageCommand The command with the parser set. RAISES DESCRIPTION ValueError If the command already has a parser set.","title":"Example"},{"location":"reference/#tanjun.with_role_slash_option","text":"with_role_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a role option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_role_option . Examples: @with_role_slash_option ( \"role\" , \"Role to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , role : hikari . Role ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_role_slash_option()"},{"location":"reference/#tanjun.with_sfw_check","text":"with_sfw_check ( command = None , / , * , error = None , error_message = 'Command can only be used in SFW channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a channel that's marked as sfw. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.SfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in SFW channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to.","title":"with_sfw_check()"},{"location":"reference/#tanjun.with_str_slash_option","text":"with_str_slash_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_length = None , max_length = None , pass_as_kwarg = True ) Add a string option to a slash command. For more information on this function's parameters see tanjun.commands.SlashCommand.add_str_option . Examples: @with_str_slash_option ( \"name\" , \"A name.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , name : str ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_str_slash_option()"},{"location":"reference/#tanjun.with_user_slash_option","text":"with_user_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a user option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_user_option . Note This may result in hikari.interactions.base_interactions.InteractionMember or hikari.users.User if the user isn't in the current guild or if this command was executed in a DM channel. Examples: @with_user_slash_option ( \"user\" , \"user to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , user : Union [ InteractionMember , User ]) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_user_slash_option()"},{"location":"reference/abc/","text":"tanjun.abc # Interfaces of the objects and clients used within Tanjun. AnyHooks module-attribute # AnyHooks = Hooks [ Context ] Execution hooks for any context. AutocompleteCallbackSig module-attribute # AutocompleteCallbackSig = collections . Callable [ Ellipsis , _CoroT [ None ]] Type hint of the callback an autocomplete callback should have. This will be called when handling autocomplete and should be an asynchronous callback which two positional arguments of type tanjun.abc.AutocompleteContext and str | int | float (with the 2nd argument type being decided by the autocomplete type), returns None and may use dependency injection. CheckSig module-attribute # CheckSig = typing . Union [ collections . Callable [ Ellipsis , _CoroT [ bool ]], collections . Callable [ Ellipsis , bool ]] Type hint of a general context check used with Tanjun tanjun.abc.ExecutableCommand classes. This may be registered with a tanjun.abc.ExecutableCommand to add a rule which decides whether it should execute for each context passed to it. This should take one positional argument of type tanjun.abc.Context and may either be a synchronous or asynchronous callback which returns bool where returning False or raising tanjun.FailedCheck will indicate that the current context shouldn't lead to an execution. CommandCallbackSig module-attribute # CommandCallbackSig = collections . Callable [ Ellipsis , _CoroT [ None ]] Type hint of the callback a callable tanjun.abc.ExecutableCommand instance will operate on. This will be called when executing a command and will need to take one positional argument of type tanjun.abc.Context where any other required or optional keyword arguments will be based on the parser instance for the command if applicable and dependency injection. Note This will have to be asynchronous. ErrorHookSig module-attribute # ErrorHookSig = typing . Union [ collections . Callable [ Ellipsis , typing . Optional [ bool ]], collections . Callable [ Ellipsis , _CoroT [ typing . Optional [ bool ]]]] Type hint of the callback used as a unexpected command error hook. This will be called whenever an unexpected Exception is raised during the execution stage of a command (not including expected tanjun.TanjunError ). This should take two positional arguments - of type tanjun.abc.Context and Exception - and may be either a synchronous or asynchronous callback which returns bool or None and may take advantage of dependency injection. True is returned to indicate that the exception should be suppressed and False is returned to indicate that the exception should be re-raised. HookSig module-attribute # HookSig = typing . Union [ collections . Callable [ Ellipsis , None ], collections . Callable [ Ellipsis , _CoroT [ None ]]] Type hint of the callback used as a general command hook. Note This may be asynchronous or synchronous, dependency injection is supported for this callback's keyword arguments and the positional arguments which are passed dependent on the type of hook this is being registered as. ListenerCallbackSig module-attribute # ListenerCallbackSig = collections . Callable [ Ellipsis , _CoroT [ None ]] Type hint of a hikari event manager callback. This is guaranteed one positional arg of type hikari.events.base_events.Event regardless of implementation and must be a coruotine function which returns None . MenuCommandCallbackSig module-attribute # MenuCommandCallbackSig = collections . Callable [ Ellipsis , _CoroT [ None ]] Type hint of a context menu command callback. This is guaranteed two positional; arguments of type tanjun.abc.MenuContext and either hikari.User | hikari.InteractionMember and/or hikari.messages.Message dependent on the type(s) of menu this is. MenuHooks module-attribute # MenuHooks = Hooks [ MenuContext ] Execution hooks for menu commands. MessageHooks module-attribute # MessageHooks = Hooks [ MessageContext ] Execution hooks for messages commands. MetaEventSig module-attribute # MetaEventSig = typing . Union [ collections . Callable [ Ellipsis , _CoroT [ None ]], collections . Callable [ Ellipsis , None ]] Type hint of a client callback. The positional arguments this is guaranteed depend on the event name its being subscribed to (more information the standard client callbacks can be found at tanjun.abc.ClientCallbackNames ) and may be either synchronous or asynchronous but must return None . SlashHooks module-attribute # SlashHooks = Hooks [ SlashContext ] Execution hooks for slash commands. AppCommand # Bases: ExecutableCommand [ _AppCommandContextT ] Base class for all application command classes. build abstractmethod # build ( * , component = None ) Get a builder object for this command. PARAMETER DESCRIPTION component The component to inherit config like default_member_permissions and is_dm_enabled from if not explicitly set on the command. This defaults to the command's linked component. TYPE: typing . Optional [ Component ] DEFAULT: None RETURNS DESCRIPTION hikari . api . CommandBuilder A builder object for this command. Use to declare this command on globally or for a specific guild. default_member_permissions abstractmethod property # default_member_permissions () The default guild member permissions required to use this command. Warning This can be overridden by guild staff and does not apply to admins. Warning For commands within command groups the state of this flag is inherited regardless of what it's set as on the child command. defaults_to_ephemeral abstractmethod property # defaults_to_ephemeral () Whether contexts executed by this command should default to ephemeral responses. This effects calls to tanjun.abc.SlashContext.create_followup , tanjun.abc.SlashContext.create_initial_response , tanjun.abc.SlashContext.defer and tanjun.abc.SlashContext.respond unless the flags field is provided for the methods which support it. Note If this is None then the default from the parent command(s), component or client is used. is_dm_enabled abstractmethod property # is_dm_enabled () Whether this command is enabled in DM contexts. Note If this is None then the default from the parent component or client is used. Warning For commands within command groups the state of this flag is inherited regardless of what it's set as on the child command. is_global abstractmethod property # is_global () Whether the command should be declared globally or not. Warning For commands within command groups the state of this flag is inherited regardless of what it's set as on the child command. name abstractmethod property # name () Name of the command. set_tracked_command abstractmethod # set_tracked_command ( command ) Set the global command this tracks. PARAMETER DESCRIPTION command Object of the global command this tracks. TYPE: hikari . PartialCommand RETURNS DESCRIPTION Self The command instance to enable chained calls. tracked_command abstractmethod property # tracked_command () Object of the actual command this object tracks if set. tracked_command_id abstractmethod property # tracked_command_id () ID of the actual command this object tracks if set. type abstractmethod property # type () The type of this application command. AppCommandContext # Bases: Context , abc . ABC Base class for application command contexts. create_followup abstractmethod async # create_followup ( content = hikari . UNDEFINED , * , delete_after = None , ephemeral = False , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED , tts = hikari . UNDEFINED , flags = hikari . UNDEFINED ) Create a followup response for this context. Warning Calling this on a context which hasn't had an initial response yet will lead to a hikari.errors.NotFoundError being raised. PARAMETER DESCRIPTION content If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None ephemeral Whether the deferred response should be ephemeral. Passing True here is a shorthand for including 1 << 64 in the passed flags. TYPE: bool DEFAULT: False attachment If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this message. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this message. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed If provided, the message embed. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds If provided, the message embeds. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED tts If provided, whether the message will be sent as a TTS message. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED flags The flags to set for this response. As of writing this can only flag which can be provided is EPHEMERAL, other flags are just ignored. TYPE: typing . Union [ hikari . UndefinedType , int , hikari . MessageFlag ] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . Message The created message object. RAISES DESCRIPTION hikari . NotFoundError If the current interaction is not found or it hasn't had an initial response yet. hikari . BadRequestError This can be raised if the file is too large; if the embed exceeds the defined limits; if the message content is specified only and empty or greater than 2000 characters; if neither content, file or embeds are specified. If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer. ValueError If more than 100 unique objects/entities are passed for role_mentions or `user_mentions. If the interaction will have expired before delete_after is reached. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. create_initial_response abstractmethod async # create_initial_response ( content = hikari . UNDEFINED , * , delete_after = None , ephemeral = False , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED , flags = hikari . UNDEFINED , tts = hikari . UNDEFINED ) Create the initial response for this context. Warning Calling this on a context which already has an initial response will result in this raising a hikari.errors.NotFoundError . This includes if the REST interaction server has already responded to the request and deferrals. PARAMETER DESCRIPTION content The content to edit the last response with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None ephemeral Whether the deferred response should be ephemeral. Passing True here is a shorthand for including 1 << 64 in the passed flags. TYPE: bool DEFAULT: False content If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED attachment If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this message. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this message. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed If provided, the message embed. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds If provided, the message embeds. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED flags If provided, the message flags this response should have. As of writing the only message flag which can be set here is hikari.messages.MessageFlag.EPHEMERAL . TYPE: typing . Union [ int , hikari . MessageFlag , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED tts If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all user mentions will be detected. If provided, and False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all role mentions will be detected. If provided, and False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of [hikari.snowflakes.Snowflake], or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RAISES DESCRIPTION ValueError If more than 100 unique objects/entities are passed for role_mentions or user_mentions . If the interaction will have expired before delete_after is reached. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; invalid image URLs in embeds. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . NotFoundError If the interaction is not found or if the interaction's initial response has already been created. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. defaults_to_ephemeral abstractmethod property # defaults_to_ephemeral () Whether the context is marked as defaulting to ephemeral response. This effects calls to tanjun.abc.SlashContext.create_followup , tanjun.abc.SlashContext.create_initial_response , tanjun.abc.SlashContext.defer and tanjun.abc.SlashContext.respond unless the flags field is provided for the methods which support it. defer abstractmethod async # defer ( * , ephemeral = False , flags = hikari . UNDEFINED ) Defer the initial response for this context. Note The ephemeral state of the first response is decided by whether the deferral is ephemeral. PARAMETER DESCRIPTION ephemeral Whether the deferred response should be ephemeral. Passing True here is a shorthand for including 1 << 64 in the passed flags. TYPE: bool DEFAULT: False flags The flags to use for the initial response. TYPE: typing . Union [ hikari . UndefinedType , int , hikari . MessageFlag ] DEFAULT: hikari.UNDEFINED expires_at abstractmethod property # expires_at () When this application command context expires. After this time is reached, the message/response methods on this context will always raise hikari.errors.NotFoundError . has_been_deferred abstractmethod property # has_been_deferred () Whether the initial response for this context has been deferred. Warning If this is True when tanjun.abc.SlashContext.has_responded is False then tanjun.abc.SlashContext.edit_initial_response will need to be used to create the initial response rather than tanjun.abc.SlashContext.create_initial_response . interaction abstractmethod property # interaction () Interaction this context is for. mark_not_found abstractmethod async # mark_not_found () Mark this context as not found. Dependent on how the client is configured this may lead to a not found response message being sent. member abstractmethod property # member () Object of the member that triggered this command if this is in a guild. set_ephemeral_default abstractmethod # set_ephemeral_default ( state ) Set the ephemeral default state for this context. PARAMETER DESCRIPTION state The new ephemeral default state. If this is True then all calls to the response creating methods on this context will default to being ephemeral. TYPE: bool type abstractmethod property # type () Type of application command this context is for. AutocompleteContext # Bases: alluka . Context Interface of an autocomplete context. author abstractmethod property # author () Object of the user who triggered this autocomplete. cache abstractmethod property # cache () Hikari cache instance this context's client was initialised with. channel_id abstractmethod property # channel_id () ID of the channel this autocomplete was triggered in. client abstractmethod property # client () Tanjun tanjun.abc.Client implementation this context was spawned by. created_at abstractmethod property # created_at () When this context was created. Note This will either refer to a message or integration's creation date. events abstractmethod property # events () Object of the event manager this context's client was initialised with. fetch_channel abstractmethod async # fetch_channel () Fetch the channel the context was invoked in. Note This performs an API call. Consider using tanjun.abc.AutocompleteContext.get_channel if you have hikari.api.config.CacheComponents.GUILD_CHANNELS cache component enabled. RETURNS DESCRIPTION hikari . TextableChannel The textable DM or guild channel the context was invoked in. RAISES DESCRIPTION hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the READ_MESSAGES permission in the channel. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. fetch_guild abstractmethod async # fetch_guild () Fetch the guild the context was invoked in. Note This performs an API call. Consider using tanjun.abc.AutocompleteContext.get_guild if you have hikari.api.config.CacheComponents.GUILDS cache component enabled. RETURNS DESCRIPTION hikari . Guild | None An optional guild the context was invoked in. None will be returned if the context was invoked in a DM channel. RAISES DESCRIPTION hikari . ForbiddenError If you are not part of the guild. hikari . NotFoundError If the guild is not found. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. focused abstractmethod property # focused () The option being autocompleted. get_channel abstractmethod # get_channel () Retrieve the channel the context was invoked in from the cache. Note This method requires the hikari.api.config.CacheComponents.GUILD_CHANNELS cache component. RETURNS DESCRIPTION hikari . TextableGuildChannel | None An optional guild channel the context was invoked in. None will be returned if the channel was not found or if it is DM channel. get_guild abstractmethod # get_guild () Fetch the guild that the context was invoked in. Note This method requires hikari.api.config.CacheComponents.GUILDS cache component enabled. RETURNS DESCRIPTION hikari . Guild | None An optional guild the context was invoked in. None will be returned if the guild was not found. guild_id abstractmethod property # guild_id () ID of the guild this autocomplete was triggered in. Will be None for all DM autocomplete executions. has_responded abstractmethod property # has_responded () Whether the choices have been set for this autocomplete. interaction abstractmethod property # interaction () Interaction this context is for. member abstractmethod property # member () Guild member object of this autocomplete's author. Will be None for DM autocomplete executions. options abstractmethod property # options () Mapping of option names to the values provided for them. rest abstractmethod property # rest () Object of the Hikari REST client this context's client was initialised with. server abstractmethod property # server () Object of the Hikari interaction server provided for this context's client. set_choices abstractmethod async # set_choices ( choices = Ellipsis , / , ** kwargs ) Set the choices for this autocomplete. Note Only up to (and including) 25 choices may be set for an autocomplete. PARAMETER DESCRIPTION choices Mapping of string option names to their values. The values should match the focused option's relevant type. TYPE: collections . abc . Mapping [ str , str | float | int ] DEFAULT: Ellipsis **kwargs Keyword arguments mapping string option names to their values. The value should match the focused option's relevant type. TYPE: str | float | int DEFAULT: {} RAISES DESCRIPTION RuntimeError If the context has already had the choices set for it. ValueError If more than 25 choices are passed. shard abstractmethod property # shard () Shard that triggered the context. Note This will be None if tanjun.abc.AutocompleteContext.shards is also None . shards abstractmethod property # shards () Object of the Hikari shard manager this context's client was initialised with. triggering_name abstractmethod property # triggering_name () Full command name this autocomplete was triggered for. voice abstractmethod property # voice () Object of the Hikari voice component this context's client was initialised with. BaseSlashCommand # Bases: AppCommand [ SlashContext ] , abc . ABC Base class for all slash command classes. build abstractmethod # build ( * , component = None ) Get a builder object for this command. PARAMETER DESCRIPTION component The component to inherit config like default_member_permissions and is_dm_enabled from if not explicitly set on the command. This defaults to the command's linked component. TYPE: typing . Optional [ Component ] DEFAULT: None RETURNS DESCRIPTION hikari . api . SlashCommandBuilder A builder object for this command. Use to declare this command on globally or for a specific guild. copy abstractmethod # copy ( * , parent = None ) Create a copy of this command. PARAMETER DESCRIPTION parent The parent of the copy. TYPE: typing . Optional [ SlashCommandGroup ] DEFAULT: None RETURNS DESCRIPTION Self The copy. parent abstractmethod property # parent () Object of the group this command is in. tracked_command abstractmethod property # tracked_command () Object of the actual command this object tracks if set. type abstractmethod property # type () The type of this command. Client # Bases: abc . ABC Abstract interface of a Tanjun client. This should manage both message and slash command execution based on the provided hikari clients. add_client_callback abstractmethod # add_client_callback ( name , callback ) Add a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , ClientCallbackNames ] callback The callback to register. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to. TYPE: MetaEventSig RETURNS DESCRIPTION Self The client instance to enable chained calls. add_component abstractmethod # add_component ( component ) Add a component to this client. PARAMETER DESCRIPTION component The component to move to this client. TYPE: Component RETURNS DESCRIPTION Self The client instance to allow chained calls. add_listener abstractmethod # add_listener ( event_type , callback ) Add a listener to the client. PARAMETER DESCRIPTION event_type The event type to add a listener for. TYPE: type [ hikari . Event ] callback The callback to register as a listener. This callback must be a coroutine function which returns None and always takes one positional arg of type hikari.events.base_events.Event regardless of client implementation detail. TYPE: ListenerCallbackSig RETURNS DESCRIPTION Self The client instance to enable chained calls. cache abstractmethod property # cache () Hikari cache instance this command client was initialised with. check_message_name abstractmethod # check_message_name ( name , / , * , case_sensitive = True ) Check whether a message command name is present in the current client. Note Dependent on implementation this may partial check name against the message command's name based on command_name.startswith(name). PARAMETER DESCRIPTION name The name to match commands against. TYPE: str case_sensitive Whether to match case sensitively. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Iterator [ tuple [ str , MessageCommand ]] Iterator of the matched command names to the matched message command objects. check_slash_name abstractmethod # check_slash_name ( name ) Check whether a slash command name is present in the current client. Note This won't check the commands within command groups. PARAMETER DESCRIPTION name Name to check against. TYPE: str RETURNS DESCRIPTION collections . abc . Iterator [ BaseSlashCommand ] Iterator of the matched slash command objects. clear_application_commands abstractmethod async # clear_application_commands ( * , application = None , guild = hikari . UNDEFINED ) Clear the commands declared either globally or for a specific guild. Note The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). PARAMETER DESCRIPTION application The application to clear commands for. If left as None then this will be inferred from the authorization being used by tanjun.abc.Client.rest . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialApplication ]] DEFAULT: None guild Object or ID of the guild to clear commands for. If left as None global commands will be cleared. TYPE: hikari . UndefinedOr [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: hikari.UNDEFINED components abstractmethod property # components () Collection of the components this command client is using. declare_application_command abstractmethod async # declare_application_command ( command , / , command_id = None , * , application = None , guild = hikari . UNDEFINED ) Declare a single slash command for a bot. Warning Providing command_id when updating a command helps avoid any permissions set for the command being lose (e.g. when changing the command's name). PARAMETER DESCRIPTION command The command to register. TYPE: AppCommand [ typing . Any ] application The application to register the command with. If left as None then this will be inferred from the authorization being used by tanjun.abc.Client.rest . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialApplication ]] DEFAULT: None command_id ID of the command to update. TYPE: typing . Optional [ hikari . Snowflakeish ] DEFAULT: None guild Object or ID of the guild to register the command with. If left as None then the command will be registered globally. TYPE: hikari . UndefinedOr [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . PartialCommand API representation of the command that was registered. declare_application_commands abstractmethod async # declare_application_commands ( commands , / , command_ids = None , * , application = None , guild = hikari . UNDEFINED , message_ids = None , user_ids = None , force = False ) Declare a collection of slash commands for a bot. Note The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). PARAMETER DESCRIPTION commands Iterable of the commands objects or builders to register. TYPE: collections . Iterable [ typing . Union [ AppCommand [ typing . Any ], hikari . api . CommandBuilder ]] command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. While optional, this can be helpful when updating commands as providing the current IDs will prevent changes such as renames from leading to other state set for commands (e.g. permissions) from being lost. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None application The application to register the commands with. If left as None then this will be inferred from the authorization being used by tanjun.abc.Client.rest . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialApplication ]] DEFAULT: None guild Object or ID of the guild to register the commands with. If left as None then the commands will be registered globally. TYPE: hikari . UndefinedOr [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: hikari.UNDEFINED message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None force Force this to declare the commands regardless of whether or not they match the current state of the declared commands. The default behaviour helps avoid issues with the 2 request per minute (per-guild or globally) ratelimit and the other limit of only 200 application command creates per day (per guild or globally). TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Sequence [ hikari . PartialCommand ] API representations of the commands which were registered. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If conflicting command names are found (multiple commanbds have the same top-level name). If more than 100 top-level commands are passed. declare_global_commands abstractmethod async # declare_global_commands ( command_ids = None , * , application = None , guild = hikari . UNDEFINED , message_ids = None , user_ids = None , force = False ) Set the global application commands for a bot based on the loaded components. Warning This will overwrite any previously set application commands and only targets commands marked as global. Note The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). PARAMETER DESCRIPTION command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None application Object or ID of the application to set the global commands for. If left as None then this will be inferred from the authorization being used by tanjun.abc.Client.rest . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialApplication ]] DEFAULT: None guild Object or ID of the guild to set the global commands to. If left as None global commands will be set. TYPE: hikari . UndefinedOr [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: hikari.UNDEFINED message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None force Force this to declare the commands regardless of whether or not they match the current state of the declared commands. The default behaviour helps avoid issues with the 2 request per minute (per-guild or globally) ratelimit and the other limit of only 200 application command creates per day (per guild or globally). TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Sequence [ hikari . commands . PartialCommand ] API representations of the set commands. default_app_cmd_permissions abstractmethod property # default_app_cmd_permissions () Default required guild member permissions for the commands in this client. This may be overridden by tanjun.abc.Component.default_app_cmd_permissions and tanjun.abc.AppCommand.default_member_permissions ; this defaults to no required permissions. Warning This may be overridden by guild staff and does not apply to admins. defaults_to_ephemeral abstractmethod property # defaults_to_ephemeral () Whether slash contexts spawned by this client should default to ephemeral responses. This effects calls to tanjun.abc.SlashContext.create_followup , tanjun.abc.SlashContext.create_initial_response , tanjun.abc.SlashContext.defer and tanjun.abc.SlashContext.respond unless the flags field is provided for the methods which support it. This defaults to False . Note This may be overridden by tanjun.abc.AppCommand.defaults_to_ephemeral and tanjun.abc.Component.defaults_to_ephemeral and only effects slash command execution. dispatch_client_callback abstractmethod async # dispatch_client_callback ( name , / , * args ) Dispatch a client callback. PARAMETER DESCRIPTION name The name of the callback to dispatch. TYPE: typing . Union [ str , ClientCallbackNames ] *args Positional arguments to pass to the callback(s). TYPE: typing . Any DEFAULT: () RAISES DESCRIPTION KeyError If no callbacks are registered for the given name. dms_enabled_for_app_cmds abstractmethod property # dms_enabled_for_app_cmds () Whether application commands in this client should be enabled in DMs by default. This defaults to True . Note This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and tanjun.abc.Component.dms_enabled_for_app_cmds . events abstractmethod property # events () Object of the event manager this client was initialised with. This is used for executing message commands if set. get_callback_override abstractmethod # get_callback_override ( callback ) Get the override for a specific injected callback. PARAMETER DESCRIPTION callback The injected callback to get the override for. TYPE: alluka . CallbackSig [ _T ] RETURNS DESCRIPTION alluka . abc . CallbackSig | None The override if found, else None . get_client_callbacks abstractmethod # get_client_callbacks ( name ) Get a collection of the callbacks registered for a specific name. PARAMETER DESCRIPTION name The name to get the callbacks registered for. This is case-insensitive. TYPE: typing . Union [ str , ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Collection [ MetaEventSig ] Collection of the callbacks for the provided name. get_component_by_name abstractmethod # get_component_by_name ( name ) Get a component from this client by name. PARAMETER DESCRIPTION name Name to get a component by. TYPE: str RETURNS DESCRIPTION Component | None The component instance if found, else None . get_type_dependency abstractmethod # get_type_dependency ( type_ ) Get the implementation for an injected type. PARAMETER DESCRIPTION type_ The associated type. TYPE: type [ _T ] RETURNS DESCRIPTION _T | alluka . abc . Undefined The resolved type if found, else alluka.abc.UNDEFINED . injector abstractmethod property # injector () The attached alluka dependency injection client. is_alive abstractmethod property # is_alive () Whether this client is alive. is_case_sensitive abstractmethod property # is_case_sensitive () Whether this client should treat message command names case sensitive in search. iter_commands abstractmethod # iter_commands () Iterate over all the commands (both message and slash) registered to this client. RETURNS DESCRIPTION collections . abc . Iterator [ ExecutableCommand [ Context ]] Iterator of all the commands registered to this client. iter_menu_commands abstractmethod # iter_menu_commands ( * , global_only = False , type = None ) Iterator over the menu commands registered to this client. PARAMETER DESCRIPTION global_only Whether to only iterate over global menu commands. TYPE: bool DEFAULT: False type Menu command type to filter by. TYPE: typing . Optional [ hikari . CommandType ] DEFAULT: None RETURNS DESCRIPTION collections . abc . Iterator [ MenuCommand ] Iterator of the menu commands registered to this client. iter_message_commands abstractmethod # iter_message_commands () Iterate over all the message commands registered to this client. RETURNS DESCRIPTION collections . abc . Iterator [ MessageCommand ] Iterator of all the message commands registered to this client. iter_slash_commands abstractmethod # iter_slash_commands ( * , global_only = False ) Iterate over all the slash commands registered to this client. PARAMETER DESCRIPTION global_only Whether to only iterate over global slash commands. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Iterator [ BaseSlashCommand ] Iterator of the slash commands registered to this client. listeners abstractmethod property # listeners () Mapping of event types to the listeners registered in this client. load_directory abstractmethod # load_directory ( directory , / , * , namespace = None ) Load entities into this client from the modules in a directory. The same loading rules for tanjun.abc.Client.load_modules mostly apply here but modules with no loaders are quietly ignored. PARAMETER DESCRIPTION directory Name of the directory to load modules from. TYPE: typing . Union [ str , pathlib . Path ] namespace The python namespace this directory's modules should be imported from, if applicable. This work as {namespace}.{file.name.removesuffix(\".py\")} and will have the same behaviour as when a str is passed to tanjun.abc.Client.load_modules if passed. If left as None then this will have the same behaviour as when a pathlib.Path is passed to tanjun.abc.Client.load_modules . TYPE: typing . Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Self This client instance to enable chained calls. RAISES DESCRIPTION tanjun . FailedModuleLoad If any of the modules in this directory failed to load. This includes if it failed to import or if one of its loaders raised. The source error can be found at tanjun.FailedModuleLoad. cause . Modules with no loaders are ignored. ModuleNotFoundError If any of the modules aren't found. load_directory_async abstractmethod async # load_directory_async ( directory , / , * , namespace = None ) Asynchronous variant of tanjun.abc.Client.load_directory . Unlike tanjun.abc.Client.load_directory , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.abc.Client.load_directory . load_modules abstractmethod # load_modules ( * modules ) Load entities into this client from modules based on present loaders. Note If an __all__ is present in the target module then it will be used to find loaders. Examples: For this to work the target module has to have at least one loader present. @tanjun . as_loader def load_module ( client : tanjun . Client ) -> None : client . add_component ( component . copy ()) or loader = tanjun . Component ( name = \"trans component\" ) . load_from_scope () . make_loader () PARAMETER DESCRIPTION *modules Path(s) of the modules to load from. When str this will be treated as a normal import path which is absolute ( \"foo.bar.baz\" ). It's worth noting that absolute module paths may be imported from the current location if the top level module is a valid module file or module directory in the current working directory. When pathlib.Path the module will be imported directly from the given path. In this mode any relative imports in the target module will fail to resolve. TYPE: typing . Union [ str , pathlib . Path ] DEFAULT: () RETURNS DESCRIPTION Self This client instance to enable chained calls. RAISES DESCRIPTION tanjun . FailedModuleLoad If the new version of a module failed to load. This includes if it failed to import or if one of its loaders raised. The source error can be found at tanjun.FailedModuleLoad. cause . tanjun . ModuleStateConflict If the module is already loaded. tanjun . ModuleMissingLoaders If no loaders are found in the module. ModuleNotFoundError If the module is not found. load_modules_async abstractmethod async # load_modules_async ( * modules ) Asynchronous variant of tanjun.abc.Client.load_modules . Unlike tanjun.abc.Client.load_modules , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.abc.Client.load_modules . loop abstractmethod property # loop () The loop this client is bound to if it's alive. metadata abstractmethod property # metadata () Mutable mapping of the metadata set for this client. Note Any modifications made to this mutable mapping will be preserved by the client. prefixes abstractmethod property # prefixes () Collection of the prefixes set for this client. These are only use during message command execution to match commands to this command client. reload_modules abstractmethod # reload_modules ( * modules ) Reload entities in this client based on the loaders in loaded module(s). Note If an __all__ is present in the target module then it will be used to find loaders and unloaders. Examples: For this to work the module has to have at least one ClientLoader which handles loading and one which handles unloading present. PARAMETER DESCRIPTION *modules Paths of one or more module to unload. These should be the same paths which were passed to tanjun.abc.Client.load_modules . TYPE: typing . Union [ str , pathlib . Path ] DEFAULT: () RETURNS DESCRIPTION Self This client instance to enable chained calls. RAISES DESCRIPTION tanjun . FailedModuleLoad If the new version of a module failed to load. This includes if it failed to import or if one of its loaders raised. The source error can be found at tanjun.FailedModuleLoad. cause . tanjun . FailedModuleUnload If the old version of a module failed to unload. This indicates that one of its unloaders raised. The source error can be found at tanjun.FailedModuleUnload. cause . tanjun . ModuleStateConflict If the module hasn't been loaded. tanjun . ModuleMissingLoaders If no loaders are found in the new state of the module. tanjun . ModuleMissingUnloaders If no unloaders are found in the current state of the module. ModuleNotFoundError If the module can no-longer be found at the provided path. reload_modules_async abstractmethod async # reload_modules_async ( * modules ) Asynchronous variant of tanjun.abc.Client.reload_modules . Unlike tanjun.abc.Client.reload_modules , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.abc.Client.reload_modules . remove_callback_override abstractmethod # remove_callback_override ( callback ) Remove a callback override. PARAMETER DESCRIPTION callback The injected callback to remove the override for. TYPE: alluka . CallbackSig [ _T ] RETURNS DESCRIPTION Self The client instance to allow chaining. RAISES DESCRIPTION KeyError If no override is found for the callback. remove_client_callback abstractmethod # remove_client_callback ( name , callback ) Remove a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , ClientCallbackNames ] callback The callback to remove from the client's callbacks. TYPE: MetaEventSig RAISES DESCRIPTION KeyError If the provided name isn't found. ValueError If the provided callback isn't found. RETURNS DESCRIPTION Self The client instance to enable chained calls. remove_component abstractmethod # remove_component ( component ) Remove a component from this client. This will unsubscribe any client callbacks, commands and listeners registered in the provided component. PARAMETER DESCRIPTION component The component to remove from this client. TYPE: Component RAISES DESCRIPTION ValueError If the provided component isn't found. RETURNS DESCRIPTION Self The client instance to allow chained calls. remove_component_by_name abstractmethod # remove_component_by_name ( name ) Remove a component from this client by name. This will unsubscribe any client callbacks, commands and listeners registered in the provided component. PARAMETER DESCRIPTION name Name of the component to remove from this client. TYPE: str RAISES DESCRIPTION KeyError If the provided component name isn't found. remove_listener abstractmethod # remove_listener ( event_type , callback ) Remove a listener from the client. PARAMETER DESCRIPTION event_type The event type to remove a listener for. TYPE: type [ hikari . Event ] callback The callback to remove. TYPE: ListenerCallbackSig RAISES DESCRIPTION KeyError If the provided event type isn't found. ValueError If the provided callback isn't found. RETURNS DESCRIPTION Self The client instance to enable chained calls. remove_type_dependency abstractmethod # remove_type_dependency ( type_ ) Remove a type dependency. PARAMETER DESCRIPTION type_ The associated type. TYPE: type [ typing . Any ] RETURNS DESCRIPTION Self The client instance to allow chaining. RAISES DESCRIPTION KeyError If type is not registered. rest abstractmethod property # rest () Object of the Hikari REST client this client was initialised with. server abstractmethod property # server () Object of the Hikari interaction server provided for this client. This is used for executing application commands if set. set_callback_override abstractmethod # set_callback_override ( callback , override ) Override a specific injected callback. PARAMETER DESCRIPTION callback The injected callback to override. TYPE: alluka . CallbackSig [ _T ] override The callback to use instead. TYPE: alluka . CallbackSig [ _T ] RETURNS DESCRIPTION Self The client instance to allow chaining. set_metadata abstractmethod # set_metadata ( key , value ) Set a field in the client's metadata. PARAMETER DESCRIPTION key Metadata key to set. TYPE: typing . Any value Metadata value to set. TYPE: typing . Any RETURNS DESCRIPTION Self The client instance to enable chained calls. set_type_dependency abstractmethod # set_type_dependency ( type_ , value ) Set a callback to be called to resolve a injected type. PARAMETER DESCRIPTION type_ The type of the dependency to add an implementation for. TYPE: type [ _T ] value The value of the dependency. TYPE: _T RETURNS DESCRIPTION Self The client instance to allow chaining. shards abstractmethod property # shards () Object of the Hikari shard manager this client was initialised with. unload_modules abstractmethod # unload_modules ( * modules ) Unload entities from this client based on unloaders in one or more modules. Note If an __all__ is present in the target module then it will be used to find unloaders. Examples: For this to work the module has to have at least one unloading enabled tanjun.abc.ClientLoader present. @tanjun . as_unloader def unload_component ( client : tanjun . Client ) -> None : client . remove_component_by_name ( component . name ) or # make_loader's returned ClientLoader handles both loading and unloading. loader = tanjun . Component ( name = \"trans component\" ) . load_from_scope () . make_loader () PARAMETER DESCRIPTION *modules Path of one or more modules to unload. These should be the same path(s) which were passed to tanjun.abc.Client.load_modules . TYPE: typing . Union [ str , pathlib . Path ] DEFAULT: () RETURNS DESCRIPTION Self This client instance to enable chained calls. RAISES DESCRIPTION tanjun . ModuleStateConflict If the module hasn't been loaded. tanjun . ModuleMissingUnloaders If no unloaders are found in the module. tanjun . FailedModuleUnload If the old version of a module failed to unload. This indicates that one of its unloaders raised. The source error can be found at tanjun.FailedModuleUnload. cause . voice abstractmethod property # voice () Object of the Hikari voice component this client was initialised with. with_client_callback abstractmethod # with_client_callback ( name ) Add a client callback through a decorator call. Examples: client = tanjun . Client . from_rest_bot ( bot ) @client . with_client_callback ( \"closed\" ) async def on_close () -> None : raise NotImplementedError PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Callable [[ MetaEventSig ], MetaEventSig ] Decorator callback used to register the client callback. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to. with_listener abstractmethod # with_listener ( * event_types ) Add an event listener to this client through a decorator call. Examples: client = tanjun . Client . from_gateway_bot ( bot ) @client . with_listener ( hikari . MessageCreateEvent ) async def on_message_create ( event : hikari . MessageCreateEvent ) -> None : raise NotImplementedError PARAMETER DESCRIPTION *event_types One or more event types to listen for. If none are provided then the event type(s) will be inferred from the callback's type-hints. TYPE: type [ hikari . Event ] DEFAULT: () RETURNS DESCRIPTION collections . abc . Callable [[ ListenerCallbackSig ], ListenerCallbackSig ] Decorator callback used to register the event callback. The callback must be a coroutine function which returns None and always takes at least one positional arg of type hikari.events.base_events.Event regardless of client implementation detail. RAISES DESCRIPTION ValueError If nothing was passed for event_types and no subclasses of hikari.events.base_events.Event are found in the type-hint for the callback's first argument. ClientCallbackNames # Bases: str , enum . Enum Enum of the standard client callback names. These should be dispatched by all tanjun.abc.Client implementations. CLOSED class-attribute # CLOSED = 'closed' Called when the client has finished closing. No positional arguments are provided for this event. CLOSING class-attribute # CLOSING = 'closing' Called when the client is initially instructed to close. No positional arguments are provided for this event. COMPONENT_ADDED class-attribute # COMPONENT_ADDED = 'component_added' Called when a component is added to an active client. Warning This event isn't dispatched for components which were registered while the client is inactive. The first positional argument is the tanjun.abc.Component being added. COMPONENT_REMOVED class-attribute # COMPONENT_REMOVED = 'component_removed' Called when a component is added to an active client. Warning This event isn't dispatched for components which were removed while the client is inactive. The first positional argument is the tanjun.abc.Component being removed. MENU_COMMAND_NOT_FOUND class-attribute # MENU_COMMAND_NOT_FOUND = 'menu_command_not_found' Called when a menu command is not found. tanjun.abc.MenuContext is provided as the first positional argument. MESSAGE_COMMAND_NOT_FOUND class-attribute # MESSAGE_COMMAND_NOT_FOUND = 'message_command_not_found' Called when a message command is not found. tanjun.abc.MessageContext is provided as the first positional argument. SLASH_COMMAND_NOT_FOUND class-attribute # SLASH_COMMAND_NOT_FOUND = 'slash_command_not_found' Called when a slash command is not found. tanjun.abc.SlashContext is provided as the first positional argument. STARTED class-attribute # STARTED = 'started' Called when the client has finished starting. No positional arguments are provided for this event. STARTING class-attribute # STARTING = 'starting' Called when the client is initially instructed to start. No positional arguments are provided for this event. ClientLoader # Bases: abc . ABC Interface of logic used to load and unload components into a generic client. has_load abstractmethod property # has_load () Whether this loader will load anything. has_unload abstractmethod property # has_unload () Whether this loader will unload anything. load abstractmethod # load ( client ) Load logic into a client instance. PARAMETER DESCRIPTION client The client to load commands and listeners for. TYPE: Client RETURNS DESCRIPTION bool Whether anything was loaded. unload abstractmethod # unload ( client ) Unload logic from a client instance. PARAMETER DESCRIPTION client The client to unload commands and listeners from. TYPE: Client RETURNS DESCRIPTION bool Whether anything was unloaded. Component # Bases: abc . ABC Standard interface of a Tanjun component. This is a collection of message and application commands, and listeners with logic for command search + execution and loading the listeners into a tanjun client. add_listener abstractmethod # add_listener ( event , listener ) Add a listener to this component. PARAMETER DESCRIPTION event The event to listen for. TYPE: type [ hikari . Event ] listener The listener to add. TYPE: ListenerCallbackSig RETURNS DESCRIPTION Self The component to enable chained calls. add_menu_command abstractmethod # add_menu_command ( command ) Add a menu command to this component. PARAMETER DESCRIPTION command The command to add. TYPE: MenuCommand [ typing . Any , typing . Any ] RETURNS DESCRIPTION Self The component to enable chained calls. add_message_command abstractmethod # add_message_command ( command ) Add a message command to this component. PARAMETER DESCRIPTION command The command to add. TYPE: MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The component to enable chained calls. add_slash_command abstractmethod # add_slash_command ( command ) Add a slash command to this component. PARAMETER DESCRIPTION command The command to add. TYPE: BaseSlashCommand RETURNS DESCRIPTION Self The component to enable chained calls. check_message_name abstractmethod # check_message_name ( name , / , * , case_sensitive = True ) Check whether a name matches any of this component's registered message commands. Note This only checks for name matches against the top level command and will not account for sub-commands. Note Dependent on implementation detail this may partial check name against command names using name.startswith(command_name), hence why it also returns the name a command was matched by. PARAMETER DESCRIPTION name The name to check for command matches. TYPE: str case_sensitive Whether to perform a case-sensitive match. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Iterator [ tuple [ str , MessageCommand [ typing . Any ]]] Iterator of tuples of command name matches to the relevant message command objects. check_slash_name abstractmethod # check_slash_name ( name ) Check whether a name matches any of this component's registered slash commands. Note This won't check for sub-commands and will expect name to simply be the top level command name. PARAMETER DESCRIPTION name The name to check for command matches. TYPE: str RETURNS DESCRIPTION collections . abc . Iterator [ BaseSlashCommand ] An iterator of the matching slash commands. client abstractmethod property # client () Tanjun client this component is bound to. close abstractmethod async # close ( * , unbind = False ) Close the component. PARAMETER DESCRIPTION unbind Whether to unbind from the client after this is closed. TYPE: bool DEFAULT: False RAISES DESCRIPTION RuntimeError If the component isn't running. default_app_cmd_permissions abstractmethod property # default_app_cmd_permissions () Default required guild member permissions for the commands in this component. This may be overridden by tanjun.abc.AppCommand.default_member_permissions and if this is None then the default from the parent client is used. Warning This may be overridden by guild staff and does not apply to admins. defaults_to_ephemeral abstractmethod property # defaults_to_ephemeral () Whether slash contexts executed in this component should default to ephemeral responses. This effects calls to tanjun.abc.SlashContext.create_followup , tanjun.abc.SlashContext.create_initial_response , tanjun.abc.SlashContext.defer and tanjun.abc.SlashContext.respond unless the flags field is provided for the methods which support it. Note This may be overridden by tanjun.abc.AppCommand.defaults_to_ephemeral and only effects slash command execution; if this is None then the default from the parent client is used. dms_enabled_for_app_cmds abstractmethod property # dms_enabled_for_app_cmds () Whether application commands in this component should be enabled in DMs. Note This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and if both that and this are None then the default from the parent client is used. execute_autocomplete abstractmethod # execute_autocomplete ( ctx ) Execute an autocomplete context. Note Unlike the other execute methods, this shouldn't be expected to raise tanjun.HaltExecution nor tanjun.CommandError . PARAMETER DESCRIPTION ctx The context to execute. TYPE: AutocompleteContext RETURNS DESCRIPTION collections . abc . Coroutine [ typing . Any , typing . Any , None] | None Coroutine used to wait for the command execution to finish. This may be awaited or left to run as a background task. If this is None then the client should carry on its search for a component with a matching autocomplete. execute_menu abstractmethod async # execute_menu ( ctx , / , * , hooks = None ) Execute a menu context. PARAMETER DESCRIPTION ctx The context to execute. TYPE: MenuContext hooks Set of hooks to include in this command execution. TYPE: typing . Optional [ collections . MutableSet [ MenuHooks ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Coroutine [ typing . Any , typing . Any , None] | None Coroutine used to wait for the command execution to finish. This may be awaited or left to run as a background task. If this is None then the client should carry on its search for a component with a matching command. RAISES DESCRIPTION tanjun . CommandError To end the command's execution with an error response message. tanjun . HaltExecution To indicate that the client should stop searching for commands to execute with the current context. execute_message abstractmethod async # execute_message ( ctx , / , * , hooks = None ) Execute a message context. PARAMETER DESCRIPTION ctx The context to execute. TYPE: MessageContext hooks Set of hooks to include in this command execution. TYPE: typing . Optional [ collections . MutableSet [ MessageHooks ]] DEFAULT: None RETURNS DESCRIPTION bool Whether a message command was executed in this component with the provided context. If False then the client should carry on its search for a component with a matching command. RAISES DESCRIPTION tanjun . CommandError To end the command's execution with an error response message. tanjun . HaltExecution To indicate that the client should stop searching for commands to execute with the current context. execute_slash abstractmethod async # execute_slash ( ctx , / , * , hooks = None ) Execute a slash context. PARAMETER DESCRIPTION ctx The context to execute. TYPE: SlashContext hooks Set of hooks to include in this command execution. TYPE: typing . Optional [ collections . MutableSet [ SlashHooks ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Coroutine [ typing . Any , typing . Any , None] | None Coroutine used to wait for the command execution to finish. This may be awaited or left to run as a background task. If this is None then the client should carry on its search for a component with a matching command. RAISES DESCRIPTION tanjun . CommandError To end the command's execution with an error response message. tanjun . HaltExecution To indicate that the client should stop searching for commands to execute with the current context. is_case_sensitive abstractmethod property # is_case_sensitive () Whether this component should treat message command names case sensitive in search. If this is None then the client's case sensitivity will be used. listeners abstractmethod property # listeners () Mapping of event types to the listeners registered for them in this component. loop abstractmethod property # loop () The asyncio loop this client is bound to if it has been opened. menu_commands abstractmethod property # menu_commands () Collection of the menu commands in this component. message_commands abstractmethod property # message_commands () Collection of the message commands in this component. metadata abstractmethod property # metadata () Mutable mapping of the metadata set for this component. Note Any modifications made to this mutable mapping will be preserved by the component. name abstractmethod property # name () Component's unique identifier. Note This will be preserved between copies of a component. open abstractmethod async # open () Start the component. RAISES DESCRIPTION RuntimeError If the component is already open. If the component isn't bound to a client. remove_listener abstractmethod # remove_listener ( event , listener ) Remove a listener from this component. PARAMETER DESCRIPTION event The event to listen for. TYPE: type [ hikari . Event ] listener The listener to remove. TYPE: ListenerCallbackSig RAISES DESCRIPTION ValueError If the listener is not registered for the provided event. RETURNS DESCRIPTION Self The component to enable chained calls. remove_menu_command abstractmethod # remove_menu_command ( command ) Remove a menu command from this component. PARAMETER DESCRIPTION command Object of the menu command to remove. TYPE: MenuCommand [ typing . Any , typing . Any ] RETURNS DESCRIPTION Self The component to enable chained calls. remove_message_command abstractmethod # remove_message_command ( command ) Remove a message command from this component. PARAMETER DESCRIPTION command The command to remove. TYPE: MessageCommand [ typing . Any ] RAISES DESCRIPTION ValueError If the provided command isn't found. RETURNS DESCRIPTION Self The component to enable chained calls. remove_slash_command abstractmethod # remove_slash_command ( command ) Remove a slash command from this component. PARAMETER DESCRIPTION command The command to remove. TYPE: BaseSlashCommand RAISES DESCRIPTION ValueError If the provided command isn't found. RETURNS DESCRIPTION Self The component to enable chained calls. set_metadata abstractmethod # set_metadata ( key , value ) Set a field in the component's metadata. PARAMETER DESCRIPTION key Metadata key to set. TYPE: typing . Any value Metadata value to set. TYPE: typing . Any RETURNS DESCRIPTION Self The component instance to enable chained calls. slash_commands abstractmethod property # slash_commands () Collection of the slash commands in this component. with_listener abstractmethod # with_listener ( * event_types ) Add a listener to this component through a decorator call. PARAMETER DESCRIPTION *event_types One or more event types to listen for. If none are provided then the event type(s) will be inferred from the callback's type-hints. TYPE: type [ hikari . Event ] DEFAULT: () RETURNS DESCRIPTION collections . abc . Callable [[ ListenerCallbackSig ], ListenerCallbackSig ] Decorator callback which takes listener to add. RAISES DESCRIPTION ValueError If nothing was passed for event_types and no subclasses of hikari.events.base_events.Event are found in the type-hint for the callback's first argument. with_menu_command abstractmethod # with_menu_command ( command = None , / , * , copy = False ) Add a menu command to this component through a decorator call. PARAMETER DESCRIPTION command The command to add. TYPE: MenuCommand DEFAULT: None copy Whether to copy the command before adding it. TYPE: bool DEFAULT: False RETURNS DESCRIPTION MenuCommand The added command. with_message_command abstractmethod # with_message_command ( command = None , / , * , copy = False ) Add a message command to this component through a decorator call. PARAMETER DESCRIPTION command The command to add. TYPE: MessageCommand DEFAULT: None copy Whether to copy the command before adding it. TYPE: bool DEFAULT: False RETURNS DESCRIPTION MessageCommand The added command. with_slash_command abstractmethod # with_slash_command ( command = None , / , * , copy = False ) Add a slash command to this component through a decorator call. PARAMETER DESCRIPTION command The command to add. TYPE: BaseSlashCommand DEFAULT: None copy Whether to copy the command before adding it. TYPE: bool DEFAULT: False RETURNS DESCRIPTION BaseSlashCommand The added command. Context # Bases: alluka . Context Interface for the context of a command execution. author abstractmethod property # author () Object of the user who triggered this command. cache abstractmethod property # cache () Hikari cache instance this context's command client was initialised with. channel_id abstractmethod property # channel_id () ID of the channel this command was triggered in. client abstractmethod property # client () Tanjun tanjun.abc.Client implementation this context was spawned by. command abstractmethod property # command () Object of the command this context is bound to. Note This will only be None before this has been bound to a specific command but never during command execution. component abstractmethod property # component () Object of the tanjun.abc.Component this context is bound to. Note This will only be None before this has been bound to a specific command but never during command execution nor checks. created_at abstractmethod property # created_at () When this context was created. delete_initial_response abstractmethod async # delete_initial_response () Delete the initial response after invoking this context. RAISES DESCRIPTION LookupError , hikari . NotFoundError The last context has no initial response. delete_last_response abstractmethod async # delete_last_response () Delete the last response after invoking this context. RAISES DESCRIPTION LookupError , hikari . NotFoundError The last context has no responses. edit_initial_response abstractmethod async # edit_initial_response ( content = hikari . UNDEFINED , * , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Edit the initial response for this context. PARAMETER DESCRIPTION content The content to edit the initial response with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None attachment A singular attachment to edit the initial response with. TYPE: hikari . UndefinedNoneOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments A sequence of attachments to edit the initial response with. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to set for this message. This component will replace any previously set components and passing None will remove all components. TYPE: hikari . UndefinedNoneOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects set for this message. These components will replace any previously set components and passing None or an empty sequence will remove all components. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to replace the initial response with. TYPE: hikari . UndefinedNoneOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to replace the initial response with. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . Message The message that has been edited. RAISES DESCRIPTION ValueError If more than 100 unique objects/entities are passed for role_mentions or user_mentions . If delete_after would be more than 15 minutes after the slash command was called. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. edit_last_response abstractmethod async # edit_last_response ( content = hikari . UNDEFINED , * , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Edit the last response for this context. PARAMETER DESCRIPTION content The content to edit the last response with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None attachment A singular attachment to edit the last response with. TYPE: hikari . UndefinedNoneOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments A sequence of attachments to edit the last response with. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to set for this message. This component will replace any previously set components and passing None will remove all components. TYPE: hikari . UndefinedNoneOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects set for this message. These components will replace any previously set components and passing None or an empty sequence will remove all components. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to replace the last response with. TYPE: hikari . UndefinedNoneOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to replace the last response with. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . Message The message that has been edited. RAISES DESCRIPTION ValueError If more than 100 unique objects/entities are passed for role_mentions or user_mentions . If delete_after would be more than 15 minutes after the slash command was called. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. events abstractmethod property # events () Object of the event manager this context's client was initialised with. fetch_channel abstractmethod async # fetch_channel () Fetch the channel the context was invoked in. Note This performs an API call. Consider using tanjun.abc.Context.get_channel if you have hikari.api.config.CacheComponents.GUILD_CHANNELS cache component enabled. RETURNS DESCRIPTION hikari . TextableChannel The textable DM or guild channel the context was invoked in. RAISES DESCRIPTION hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the READ_MESSAGES permission in the channel. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. fetch_guild abstractmethod async # fetch_guild () Fetch the guild the context was invoked in. Note This performs an API call. Consider using tanjun.abc.Context.get_guild if you have hikari.api.config.CacheComponents.GUILDS cache component enabled. RETURNS DESCRIPTION hikari . Guild | None An optional guild the context was invoked in. None will be returned if the context was invoked in a DM channel. RAISES DESCRIPTION hikari . ForbiddenError If you are not part of the guild. hikari . NotFoundError If the guild is not found. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. fetch_initial_response abstractmethod async # fetch_initial_response () Fetch the initial response for this context. RAISES DESCRIPTION LookupError , hikari . NotFoundError The response was not found. fetch_last_response abstractmethod async # fetch_last_response () Fetch the last response for this context. RAISES DESCRIPTION LookupError , hikari . NotFoundError The response was not found. get_channel abstractmethod # get_channel () Retrieve the channel the context was invoked in from the cache. Note This method requires the hikari.api.config.CacheComponents.GUILD_CHANNELS cache component. RETURNS DESCRIPTION hikari . TextableGuildChannel | None An optional guild channel the context was invoked in. None will be returned if the channel was not found or if it is DM channel. get_guild abstractmethod # get_guild () Fetch the guild that the context was invoked in. Note This method requires hikari.api.config.CacheComponents.GUILDS cache component enabled. RETURNS DESCRIPTION hikari . Guild | None An optional guild the context was invoked in. None will be returned if the guild was not found. guild_id abstractmethod property # guild_id () ID of the guild this command was executed in. Will be None for all DM command executions. has_responded abstractmethod property # has_responded () Whether an initial response has been made for this context. is_human abstractmethod property # is_human () Whether this command execution was triggered by a human. Will be False for bot and webhook triggered commands. member abstractmethod property # member () Guild member object of this command's author. Will be None for DM command executions. respond abstractmethod async # respond ( content = hikari . UNDEFINED , * , ensure_result = False , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Respond to this context. PARAMETER DESCRIPTION content The content to respond with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED ensure_result Ensure that this call will always return a message object. If True then this will always return hikari.messages.Message , otherwise this will return hikari.Message | None . It's worth noting that, under certain scenarios within the slash command flow, this may lead to an extre request being made. TYPE: bool DEFAULT: False delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None attachment If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this response. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this response. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to respond with. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . Message | None The message that has been created if it was immedieatly available or ensure_result was set to True , else None . RAISES DESCRIPTION ValueError If more than 100 unique objects/entities are passed for role_mentions or user_mentions . If delete_after would be more than 15 minutes after the slash command was called. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. rest abstractmethod property # rest () Object of the Hikari REST client this context's client was initialised with. server abstractmethod property # server () Object of the Hikari interaction server provided for this context's client. shard abstractmethod property # shard () Shard that triggered the context. Note This will be None if tanjun.abc.Context.shards is also None . shards abstractmethod property # shards () Object of the Hikari shard manager this context's client was initialised with. triggering_name abstractmethod property # triggering_name () Command name this execution was triggered with. voice abstractmethod property # voice () Object of the Hikari voice component this context's client was initialised with. ExecutableCommand # Bases: abc . ABC , typing . Generic [ _ContextT_co ] Base class for all commands that can be executed. add_check abstractmethod # add_check ( check ) Add a check to the command. PARAMETER DESCRIPTION check The check to add. TYPE: CheckSig RETURNS DESCRIPTION Self This command to enable chained calls checks abstractmethod property # checks () Collection of checks that must be met before the command can be executed. component abstractmethod property # component () Component that the command is registered with. copy abstractmethod # copy () Create a copy of this command. RETURNS DESCRIPTION Self A copy of this command. hooks abstractmethod property # hooks () Hooks that are triggered when the command is executed. metadata abstractmethod property # metadata () Mutable mapping of metadata set for this command. Note Any modifications made to this mutable mapping will be preserved by the command. remove_check abstractmethod # remove_check ( check ) Remove a check from the command. PARAMETER DESCRIPTION check The check to remove. TYPE: CheckSig RAISES DESCRIPTION ValueError If the provided check isn't found. RETURNS DESCRIPTION Self This command to enable chained calls set_hooks abstractmethod # set_hooks ( hooks ) Set the hooks that are triggered when the command is executed. PARAMETER DESCRIPTION hooks The hooks that are triggered when the command is executed. TYPE: Hooks [ Context ] | None RETURNS DESCRIPTION Self This command to enable chained calls set_metadata abstractmethod # set_metadata ( key , value ) Set a field in the command's metadata. PARAMETER DESCRIPTION key Metadata key to set. TYPE: typing . Any value Metadata value to set. TYPE: typing . Any RETURNS DESCRIPTION Self The command instance to enable chained calls. Hooks # Bases: abc . ABC , typing . Generic [ _ContextT_contra ] Interface of a collection of callbacks called during set stage of command execution. add_on_error abstractmethod # add_on_error ( callback ) Add an error callback to this hook object. Note This won't be called for expected tanjun.TanjunError derived errors. PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take two positional arguments (of type tanjun.abc.Context and Exception ) and may be either synchronous or asynchronous. Returning True indicates that the error should be suppressed, False that it should be re-raised and None that no decision has been made. This will be accounted for along with the decisions other error hooks make by majority rule. TYPE: ErrorHookSig RETURNS DESCRIPTION Self The hook object to enable method chaining. add_on_parser_error abstractmethod # add_on_parser_error ( callback ) Add a parser error callback to this hook object. PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take two positional arguments (of type tanjun.abc.Context and tanjun.ParserError ), return None and may be either synchronous or asynchronous. It's worth noting that this unlike general error handlers, this will always suppress the error. TYPE: HookSig RETURNS DESCRIPTION Self The hook object to enable method chaining. add_on_success abstractmethod # add_on_success ( callback ) Add a success callback to this hook object. PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION Self The hook object to enable method chaining. add_post_execution abstractmethod # add_post_execution ( callback ) Add a post-execution callback to this hook object. PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION Self The hook object to enable method chaining. add_pre_execution abstractmethod # add_pre_execution ( callback ) Add a pre-execution callback for this hook object. PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION Self The hook object to enable method chaining. with_on_error abstractmethod # with_on_error ( callback ) Add an error callback to this hook object through a decorator call. Note This won't be called for expected tanjun.TanjunError derived errors. Examples: hooks = AnyHooks () @hooks . with_on_error async def on_error ( ctx : tanjun . abc . Context , error : Exception ) -> bool : if isinstance ( error , SomeExpectedType ): await ctx . respond ( \"You dun goofed\" ) return True # Indicating that it should be suppressed. await ctx . respond ( f \"An error occurred: { error } \" ) return False # Indicating that it should be re-raised PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take two positional arguments (of type tanjun.abc.Context and Exception ) and may be either synchronous or asynchronous. Returning True indicates that the error should be suppressed, False that it should be re-raised and None that no decision has been made. This will be accounted for along with the decisions other error hooks make by majority rule. TYPE: ErrorHookSig RETURNS DESCRIPTION ErrorHookSig The hook callback which was added. with_on_parser_error abstractmethod # with_on_parser_error ( callback ) Add a parser error callback to this hook object through a decorator call. Examples: hooks = AnyHooks () @hooks . with_on_parser_error async def on_parser_error ( ctx : tanjun . abc . Context , error : tanjun . ParserError ) -> None : await ctx . respond ( f \"You gave invalid input: { error } \" ) PARAMETER DESCRIPTION callback The parser error callback to add to this hook. This callback should take two positional arguments (of type tanjun.abc.Context and tanjun.ParserError ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION HookSig The callback which was added. with_on_success abstractmethod # with_on_success ( callback ) Add a success callback to this hook object through a decorator call. Examples: hooks = AnyHooks () @hooks . with_on_success async def on_success ( ctx : tanjun . abc . Context ) -> None : await ctx . respond ( \"You did something\" ) PARAMETER DESCRIPTION callback The success callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION HookSig The success callback which was added. with_post_execution abstractmethod # with_post_execution ( callback ) Add a post-execution callback to this hook object through a decorator call. Examples: hooks = AnyHooks () @hooks . with_post_execution async def post_execution ( ctx : tanjun . abc . Context ) -> None : await ctx . respond ( \"You did something\" ) PARAMETER DESCRIPTION callback The post-execution callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION HookSig The post-execution callback which was seaddedt. with_pre_execution abstractmethod # with_pre_execution ( callback ) Add a pre-execution callback to this hook object through a decorator call. Examples: hooks = AnyHooks () @hooks . with_pre_execution async def pre_execution ( ctx : tanjun . abc . Context ) -> None : await ctx . respond ( \"You did something\" ) PARAMETER DESCRIPTION callback The pre-execution callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION HookSig The pre-execution callback which was added. MenuCommand # Bases: AppCommand [ MenuContext ] , typing . Generic [ _MenuCommandCallbackSigT , _MenuTypeT ] A contextmenu command. build abstractmethod # build ( * , component = None ) Get a builder object for this command. PARAMETER DESCRIPTION component The component to inherit config like default_member_permissions and is_dm_enabled from if not explicitly set on the command. This defaults to the command's linked component. TYPE: typing . Optional [ Component ] DEFAULT: None RETURNS DESCRIPTION hikari . api . ContextMenuCommandBuilder A builder object for this command. Use to declare this command on globally or for a specific guild. callback abstractmethod property # callback () Callback which is called during execution. tracked_command abstractmethod property # tracked_command () Object of the actual command this object tracks if set. type abstractmethod property # type () The menu type(s) this is for. MenuContext # Bases: AppCommandContext , abc . ABC Interface of a menu command context. command abstractmethod property # command () Command that was invoked. Note This should always be set during command check execution and command hook execution but isn't guaranteed for client callbacks nor component/client checks. resolve_to_member abstractmethod # resolve_to_member ( * , default = Ellipsis ) Resolve a user context menu context to a member object. RETURNS DESCRIPTION hikari . Member The resolved member. RAISES DESCRIPTION TypeError If the context is not a user menu context. LookupError If the member was not found for this user menu context. This will happen if this was executed in a DM or the target user isn't in the current guild. resolve_to_message abstractmethod # resolve_to_message () Resolve a message context menu to a message object. RETURNS DESCRIPTION hikari . Message The resolved message. RAISES DESCRIPTION TypeEror if the context is not for a message menu. resolve_to_user abstractmethod # resolve_to_user () Resolve a user context menu context to a user object. RETURNS DESCRIPTION hikari . User | hikari . Member The resolved user. RAISES DESCRIPTION TypeError If the context is not a user menu context. set_command abstractmethod # set_command ( command ) Set the command for this context. PARAMETER DESCRIPTION command The command this context is for. TYPE: typing . Optional [ MenuCommand [ typing . Any , typing . Any ]] target abstractmethod property # target () Object of the entity this menu targets. target_id abstractmethod property # target_id () ID of the entity this menu command context targets. type abstractmethod property # type () The type of context menu this context is for. MessageCommand # Bases: ExecutableCommand [ MessageContext ] , abc . ABC , typing . Generic [ _CommandCallbackSigT ] Standard interface of a message command. callback abstractmethod property # callback () Callback which is called during execution. Note For command groups, this is called when none of the inner-commands matches the message. copy abstractmethod # copy ( * , parent = None ) Create a copy of this command. PARAMETER DESCRIPTION parent The parent of the copy. TYPE: typing . Optional [ MessageCommandGroup [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION Self The copy. names abstractmethod property # names () Collection of this command's names. parent abstractmethod property # parent () Parent group of this command if applicable. parser abstractmethod property # parser () Parser for this command. set_parent abstractmethod # set_parent ( parent ) Set the parent of this command. PARAMETER DESCRIPTION parent The parent of this command. TYPE: typing . Optional [ MessageCommandGroup [ typing . Any ]] RETURNS DESCRIPTION Self The command instance to enable chained calls. set_parser abstractmethod # set_parser ( parser ) Set the for this message command. PARAMETER DESCRIPTION parser The parser to set. TYPE: MessageParser RETURNS DESCRIPTION Self The command instance to enable chained calls. RAISES DESCRIPTION ValueError If this parser's option keys aren't valid for this command when validate_arg_keys is True . MessageCommandGroup # Bases: MessageCommand [ _CommandCallbackSigT ] , abc . ABC Standard interface of a message command group. add_command abstractmethod # add_command ( command ) Add a command to this group. PARAMETER DESCRIPTION command The command to add. TYPE: MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The group instance to enable chained calls. commands abstractmethod property # commands () Collection of the commands in this group. Note This may include command groups. remove_command abstractmethod # remove_command ( command ) Remove a command from this group. PARAMETER DESCRIPTION command The command to remove. TYPE: MessageCommand [ typing . Any ] RAISES DESCRIPTION ValueError If the provided command isn't found. RETURNS DESCRIPTION Self The group instance to enable chained calls. with_command abstractmethod # with_command ( command ) Add a command to this group through a decorator call. PARAMETER DESCRIPTION command The command to add. TYPE: MessageCommand RETURNS DESCRIPTION MessageCommand The added command. MessageContext # Bases: Context , abc . ABC Interface of a message command specific context. command abstractmethod property # command () Command that was invoked. Note This is always set during command, command check and parser converter execution but isn't guaranteed during client callback nor client/component check execution. content abstractmethod property # content () Content of the context's message minus the triggering name and prefix. message abstractmethod property # message () Message that triggered the context. respond abstractmethod async # respond ( content = hikari . UNDEFINED , * , ensure_result = True , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , tts = hikari . UNDEFINED , reply = False , mentions_everyone = hikari . UNDEFINED , mentions_reply = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Respond to this context. PARAMETER DESCRIPTION content The content to respond with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED ensure_result Ensure this method call will return a message object. This does nothing for message command contexts as the result w ill always be immedieatly available. TYPE: bool DEFAULT: True delete_after If provided, the seconds after which the response message should be deleted. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None tts Whether to respond with tts/text to speech or no. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED reply Whether to reply instead of sending the content to the context. Passing True here indicates a reply to tanjun.abc.MessageContext.message . TYPE: typing . Union [ bool , hikari . SnowflakeishOr [ hikari . PartialMessage ], hikari . UndefinedType ] DEFAULT: False attachment A singular attachment to respond with. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments A sequence of attachments to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this message. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this message. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to respond with. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . Message The message that has been created. RAISES DESCRIPTION ValueError If more than 100 unique objects/entities are passed for role_mentions or user_mentions . If the interaction will have expired before delete_after is reached. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; if reply is not found or not in the same channel as channel ; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. triggering_prefix abstractmethod property # triggering_prefix () Prefix that triggered the context. MessageParser # Bases: abc . ABC Base class for a message parser. copy abstractmethod # copy () Copy the parser. RETURNS DESCRIPTION Self A copy of the parser. parse abstractmethod async # parse ( ctx ) Parse a message context. Warning This relies on the prefix and command name(s) having been removed from tanjun.abc.MessageContext.content . PARAMETER DESCRIPTION ctx The message context to parse. TYPE: MessageContext RETURNS DESCRIPTION dict [ str , typing . Any ] Dictionary of argument names to the parsed values for them. RAISES DESCRIPTION tanjun . ParserError If the message could not be parsed. validate_arg_keys abstractmethod # validate_arg_keys ( callback_name , names ) Validate that callback's keyword arguments are all valid for this parser. PARAMETER DESCRIPTION callback_name The callback's name for use in raised errors. TYPE: str names Key names of the callback's keyword arguments. TYPE: collections . Container [ str ] RAISES DESCRIPTION ValueError If any of the parameter keys aren't valid for this parser. SlashCommand # Bases: BaseSlashCommand , abc . ABC , typing . Generic [ _CommandCallbackSigT ] A command that can be executed in a slash context. callback abstractmethod property # callback () Callback which is called during execution. float_autocompletes abstractmethod property # float_autocompletes () Collection of the float option autocompletes. int_autocompletes abstractmethod property # int_autocompletes () Collection of the integer option autocompletes. str_autocompletes abstractmethod property # str_autocompletes () Collection of the string option autocompletes. SlashCommandGroup # Bases: BaseSlashCommand , abc . ABC Standard interface of a slash command group. Note Unlike tanjun.abc.MessageCommandGroup , slash command groups do not have their own callback. add_command abstractmethod # add_command ( command ) Add a command to this group. PARAMETER DESCRIPTION command The command to add. TYPE: BaseSlashCommand RETURNS DESCRIPTION Self The command group instance to enable chained calls. commands abstractmethod property # commands () Collection of the commands in this group. remove_command abstractmethod # remove_command ( command ) Remove a command from this group. PARAMETER DESCRIPTION command The command to remove. TYPE: BaseSlashCommand RAISES DESCRIPTION ValueError If the provided command isn't found. RETURNS DESCRIPTION Self The command group instance to enable chained calls. with_command abstractmethod # with_command ( command ) Add a command to this group through a decorator call. PARAMETER DESCRIPTION command The command to add. TYPE: _BaseSlashCommandT RETURNS DESCRIPTION BaseSlashCommand The added command. SlashContext # Bases: AppCommandContext , abc . ABC Interface of a slash command specific context. command abstractmethod property # command () Command that was invoked. Note This should always be set during command check execution and command hook execution but isn't guaranteed for client callbacks nor component/client checks. options abstractmethod property # options () Mapping of option names to the values provided for them. set_command abstractmethod # set_command ( command ) Set the command for this context. PARAMETER DESCRIPTION command The command this context is for. TYPE: typing . Optional [ BaseSlashCommand ] type abstractmethod property # type () Type of application command this context is for. SlashOption # Bases: abc . ABC Interface of slash command option with extra logic to help resolve it. boolean abstractmethod # boolean () Get the boolean value of this option. RAISES DESCRIPTION TypeError If tanjun.abc.SlashOption.type is not BOOLEAN. float abstractmethod # float () Get the float value of this option. RAISES DESCRIPTION TypeError If tanjun.abc.SlashOption.type is not FLOAT. ValueError If called on the focused option for an autocomplete interaction when it's a malformed (incomplete) float. integer abstractmethod # integer () Get the integer value of this option. RAISES DESCRIPTION TypeError If tanjun.abc.SlashOption.type is not INTEGER. ValueError If called on the focused option for an autocomplete interaction when it's a malformed (incomplete) integer. name abstractmethod property # name () Name of this option. resolve_to_attachment abstractmethod # resolve_to_attachment () Resolve this option to a channel object. RETURNS DESCRIPTION hikari . Attachment The attachment object. RAISES DESCRIPTION TypeError If the option is not an attachment. resolve_to_channel abstractmethod # resolve_to_channel () Resolve this option to a channel object. RETURNS DESCRIPTION hikari . InteractionChannel The channel object. RAISES DESCRIPTION TypeError If the option is not a channel. resolve_to_member abstractmethod # resolve_to_member ( * , default = Ellipsis ) Resolve this option to a member object. PARAMETER DESCRIPTION default The default value to return if this option cannot be resolved. If this is not provided, this method will raise a TypeError if this option cannot be resolved. TYPE: _T DEFAULT: Ellipsis RETURNS DESCRIPTION hikari . InteractionMember | _T The member object or default if it was provided and this option was a user type but had no member. RAISES DESCRIPTION LookupError If no member was found for this option and a default wasn't provided. This includes if the option is a mentionable type which targets a member-less user. This could happen if the user isn't in the current guild or if this command was executed in a DM and this option should still be resolvable to a user. TypeError If the option is not a user option and a default wasn't provided. This includes if the option is a mentionable type but doesn't target a user. resolve_to_mentionable abstractmethod # resolve_to_mentionable () Resolve this option to a mentionable object. RETURNS DESCRIPTION hikari . Role | hikari . User | hikari . Member The mentionable object. RAISES DESCRIPTION TypeError If the option is not a mentionable, user or role type. resolve_to_role abstractmethod # resolve_to_role () Resolve this option to a role object. RETURNS DESCRIPTION hikari . Role The role object. RAISES DESCRIPTION TypeError If the option is not a role. This includes mentionable options which point towards a user. resolve_to_user abstractmethod # resolve_to_user () Resolve this option to a user object. Note This will resolve to a hikari.guilds.Member first if the relevant command was executed within a guild and the option targeted one of the guild's members, otherwise it will resolve to hikari.users.User . It's also worth noting that hikari.Member inherits from hikari.User meaning that the return value of this can always be treated as a user. RETURNS DESCRIPTION hikari . User | hikari . Member The user object. RAISES DESCRIPTION TypeError If the option is not a user. This includes mentionable options which point towards a role. resolve_value abstractmethod # resolve_value () Resolve this option to an object value. RETURNS DESCRIPTION hikari . Attachment | hikari . InteractionChannel | hikari . InteractionMember | hikari . Role | hikari . User The object value of this option. RAISES DESCRIPTION TypeError If the option isn't resolvable. snowflake abstractmethod # snowflake () Get the ID of this option. RAISES DESCRIPTION TypeError If tanjun.abc.SlashOption.type is not one of CHANNEL, MENTIONABLE, ROLE or USER. string abstractmethod # string () Get the string value of this option. RAISES DESCRIPTION TypeError If tanjun.abc.SlashOption.type is not STRING. type abstractmethod property # type () Type of this option. value abstractmethod property # value () Value provided for this option. Note For discord entity option types (user, member, channel and role) this will be the entity's ID.","title":"tanjun.abc"},{"location":"reference/abc/#tanjunabc","text":"Interfaces of the objects and clients used within Tanjun.","title":"tanjun.abc"},{"location":"reference/abc/#tanjun.abc.AnyHooks","text":"AnyHooks = Hooks [ Context ] Execution hooks for any context.","title":"AnyHooks"},{"location":"reference/abc/#tanjun.abc.AutocompleteCallbackSig","text":"AutocompleteCallbackSig = collections . Callable [ Ellipsis , _CoroT [ None ]] Type hint of the callback an autocomplete callback should have. This will be called when handling autocomplete and should be an asynchronous callback which two positional arguments of type tanjun.abc.AutocompleteContext and str | int | float (with the 2nd argument type being decided by the autocomplete type), returns None and may use dependency injection.","title":"AutocompleteCallbackSig"},{"location":"reference/abc/#tanjun.abc.CheckSig","text":"CheckSig = typing . Union [ collections . Callable [ Ellipsis , _CoroT [ bool ]], collections . Callable [ Ellipsis , bool ]] Type hint of a general context check used with Tanjun tanjun.abc.ExecutableCommand classes. This may be registered with a tanjun.abc.ExecutableCommand to add a rule which decides whether it should execute for each context passed to it. This should take one positional argument of type tanjun.abc.Context and may either be a synchronous or asynchronous callback which returns bool where returning False or raising tanjun.FailedCheck will indicate that the current context shouldn't lead to an execution.","title":"CheckSig"},{"location":"reference/abc/#tanjun.abc.CommandCallbackSig","text":"CommandCallbackSig = collections . Callable [ Ellipsis , _CoroT [ None ]] Type hint of the callback a callable tanjun.abc.ExecutableCommand instance will operate on. This will be called when executing a command and will need to take one positional argument of type tanjun.abc.Context where any other required or optional keyword arguments will be based on the parser instance for the command if applicable and dependency injection. Note This will have to be asynchronous.","title":"CommandCallbackSig"},{"location":"reference/abc/#tanjun.abc.ErrorHookSig","text":"ErrorHookSig = typing . Union [ collections . Callable [ Ellipsis , typing . Optional [ bool ]], collections . Callable [ Ellipsis , _CoroT [ typing . Optional [ bool ]]]] Type hint of the callback used as a unexpected command error hook. This will be called whenever an unexpected Exception is raised during the execution stage of a command (not including expected tanjun.TanjunError ). This should take two positional arguments - of type tanjun.abc.Context and Exception - and may be either a synchronous or asynchronous callback which returns bool or None and may take advantage of dependency injection. True is returned to indicate that the exception should be suppressed and False is returned to indicate that the exception should be re-raised.","title":"ErrorHookSig"},{"location":"reference/abc/#tanjun.abc.HookSig","text":"HookSig = typing . Union [ collections . Callable [ Ellipsis , None ], collections . Callable [ Ellipsis , _CoroT [ None ]]] Type hint of the callback used as a general command hook. Note This may be asynchronous or synchronous, dependency injection is supported for this callback's keyword arguments and the positional arguments which are passed dependent on the type of hook this is being registered as.","title":"HookSig"},{"location":"reference/abc/#tanjun.abc.ListenerCallbackSig","text":"ListenerCallbackSig = collections . Callable [ Ellipsis , _CoroT [ None ]] Type hint of a hikari event manager callback. This is guaranteed one positional arg of type hikari.events.base_events.Event regardless of implementation and must be a coruotine function which returns None .","title":"ListenerCallbackSig"},{"location":"reference/abc/#tanjun.abc.MenuCommandCallbackSig","text":"MenuCommandCallbackSig = collections . Callable [ Ellipsis , _CoroT [ None ]] Type hint of a context menu command callback. This is guaranteed two positional; arguments of type tanjun.abc.MenuContext and either hikari.User | hikari.InteractionMember and/or hikari.messages.Message dependent on the type(s) of menu this is.","title":"MenuCommandCallbackSig"},{"location":"reference/abc/#tanjun.abc.MenuHooks","text":"MenuHooks = Hooks [ MenuContext ] Execution hooks for menu commands.","title":"MenuHooks"},{"location":"reference/abc/#tanjun.abc.MessageHooks","text":"MessageHooks = Hooks [ MessageContext ] Execution hooks for messages commands.","title":"MessageHooks"},{"location":"reference/abc/#tanjun.abc.MetaEventSig","text":"MetaEventSig = typing . Union [ collections . Callable [ Ellipsis , _CoroT [ None ]], collections . Callable [ Ellipsis , None ]] Type hint of a client callback. The positional arguments this is guaranteed depend on the event name its being subscribed to (more information the standard client callbacks can be found at tanjun.abc.ClientCallbackNames ) and may be either synchronous or asynchronous but must return None .","title":"MetaEventSig"},{"location":"reference/abc/#tanjun.abc.SlashHooks","text":"SlashHooks = Hooks [ SlashContext ] Execution hooks for slash commands.","title":"SlashHooks"},{"location":"reference/abc/#tanjun.abc.AppCommand","text":"Bases: ExecutableCommand [ _AppCommandContextT ] Base class for all application command classes.","title":"AppCommand"},{"location":"reference/abc/#tanjun.abc.AppCommand.build","text":"build ( * , component = None ) Get a builder object for this command. PARAMETER DESCRIPTION component The component to inherit config like default_member_permissions and is_dm_enabled from if not explicitly set on the command. This defaults to the command's linked component. TYPE: typing . Optional [ Component ] DEFAULT: None RETURNS DESCRIPTION hikari . api . CommandBuilder A builder object for this command. Use to declare this command on globally or for a specific guild.","title":"build()"},{"location":"reference/abc/#tanjun.abc.AppCommand.default_member_permissions","text":"default_member_permissions () The default guild member permissions required to use this command. Warning This can be overridden by guild staff and does not apply to admins. Warning For commands within command groups the state of this flag is inherited regardless of what it's set as on the child command.","title":"default_member_permissions()"},{"location":"reference/abc/#tanjun.abc.AppCommand.defaults_to_ephemeral","text":"defaults_to_ephemeral () Whether contexts executed by this command should default to ephemeral responses. This effects calls to tanjun.abc.SlashContext.create_followup , tanjun.abc.SlashContext.create_initial_response , tanjun.abc.SlashContext.defer and tanjun.abc.SlashContext.respond unless the flags field is provided for the methods which support it. Note If this is None then the default from the parent command(s), component or client is used.","title":"defaults_to_ephemeral()"},{"location":"reference/abc/#tanjun.abc.AppCommand.is_dm_enabled","text":"is_dm_enabled () Whether this command is enabled in DM contexts. Note If this is None then the default from the parent component or client is used. Warning For commands within command groups the state of this flag is inherited regardless of what it's set as on the child command.","title":"is_dm_enabled()"},{"location":"reference/abc/#tanjun.abc.AppCommand.is_global","text":"is_global () Whether the command should be declared globally or not. Warning For commands within command groups the state of this flag is inherited regardless of what it's set as on the child command.","title":"is_global()"},{"location":"reference/abc/#tanjun.abc.AppCommand.name","text":"name () Name of the command.","title":"name()"},{"location":"reference/abc/#tanjun.abc.AppCommand.set_tracked_command","text":"set_tracked_command ( command ) Set the global command this tracks. PARAMETER DESCRIPTION command Object of the global command this tracks. TYPE: hikari . PartialCommand RETURNS DESCRIPTION Self The command instance to enable chained calls.","title":"set_tracked_command()"},{"location":"reference/abc/#tanjun.abc.AppCommand.tracked_command","text":"tracked_command () Object of the actual command this object tracks if set.","title":"tracked_command()"},{"location":"reference/abc/#tanjun.abc.AppCommand.tracked_command_id","text":"tracked_command_id () ID of the actual command this object tracks if set.","title":"tracked_command_id()"},{"location":"reference/abc/#tanjun.abc.AppCommand.type","text":"type () The type of this application command.","title":"type()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext","text":"Bases: Context , abc . ABC Base class for application command contexts.","title":"AppCommandContext"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.create_followup","text":"create_followup ( content = hikari . UNDEFINED , * , delete_after = None , ephemeral = False , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED , tts = hikari . UNDEFINED , flags = hikari . UNDEFINED ) Create a followup response for this context. Warning Calling this on a context which hasn't had an initial response yet will lead to a hikari.errors.NotFoundError being raised. PARAMETER DESCRIPTION content If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None ephemeral Whether the deferred response should be ephemeral. Passing True here is a shorthand for including 1 << 64 in the passed flags. TYPE: bool DEFAULT: False attachment If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this message. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this message. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed If provided, the message embed. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds If provided, the message embeds. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED tts If provided, whether the message will be sent as a TTS message. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED flags The flags to set for this response. As of writing this can only flag which can be provided is EPHEMERAL, other flags are just ignored. TYPE: typing . Union [ hikari . UndefinedType , int , hikari . MessageFlag ] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . Message The created message object. RAISES DESCRIPTION hikari . NotFoundError If the current interaction is not found or it hasn't had an initial response yet. hikari . BadRequestError This can be raised if the file is too large; if the embed exceeds the defined limits; if the message content is specified only and empty or greater than 2000 characters; if neither content, file or embeds are specified. If any invalid snowflake IDs are passed; a snowflake may be invalid due to it being outside of the range of a 64 bit integer. ValueError If more than 100 unique objects/entities are passed for role_mentions or `user_mentions. If the interaction will have expired before delete_after is reached. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed.","title":"create_followup()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.create_initial_response","text":"create_initial_response ( content = hikari . UNDEFINED , * , delete_after = None , ephemeral = False , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED , flags = hikari . UNDEFINED , tts = hikari . UNDEFINED ) Create the initial response for this context. Warning Calling this on a context which already has an initial response will result in this raising a hikari.errors.NotFoundError . This includes if the REST interaction server has already responded to the request and deferrals. PARAMETER DESCRIPTION content The content to edit the last response with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None ephemeral Whether the deferred response should be ephemeral. Passing True here is a shorthand for including 1 << 64 in the passed flags. TYPE: bool DEFAULT: False content If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED attachment If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this message. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this message. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed If provided, the message embed. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds If provided, the message embeds. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED flags If provided, the message flags this response should have. As of writing the only message flag which can be set here is hikari.messages.MessageFlag.EPHEMERAL . TYPE: typing . Union [ int , hikari . MessageFlag , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED tts If provided, whether the message will be read out by a screen reader using Discord's TTS (text-to-speech) system. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all user mentions will be detected. If provided, and False , all user mentions will be ignored if appearing in the message body. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all role mentions will be detected. If provided, and False , all role mentions will be ignored if appearing in the message body. Alternatively this may be a collection of [hikari.snowflakes.Snowflake], or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RAISES DESCRIPTION ValueError If more than 100 unique objects/entities are passed for role_mentions or user_mentions . If the interaction will have expired before delete_after is reached. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; invalid image URLs in embeds. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . NotFoundError If the interaction is not found or if the interaction's initial response has already been created. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"create_initial_response()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.defaults_to_ephemeral","text":"defaults_to_ephemeral () Whether the context is marked as defaulting to ephemeral response. This effects calls to tanjun.abc.SlashContext.create_followup , tanjun.abc.SlashContext.create_initial_response , tanjun.abc.SlashContext.defer and tanjun.abc.SlashContext.respond unless the flags field is provided for the methods which support it.","title":"defaults_to_ephemeral()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.defer","text":"defer ( * , ephemeral = False , flags = hikari . UNDEFINED ) Defer the initial response for this context. Note The ephemeral state of the first response is decided by whether the deferral is ephemeral. PARAMETER DESCRIPTION ephemeral Whether the deferred response should be ephemeral. Passing True here is a shorthand for including 1 << 64 in the passed flags. TYPE: bool DEFAULT: False flags The flags to use for the initial response. TYPE: typing . Union [ hikari . UndefinedType , int , hikari . MessageFlag ] DEFAULT: hikari.UNDEFINED","title":"defer()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.expires_at","text":"expires_at () When this application command context expires. After this time is reached, the message/response methods on this context will always raise hikari.errors.NotFoundError .","title":"expires_at()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.has_been_deferred","text":"has_been_deferred () Whether the initial response for this context has been deferred. Warning If this is True when tanjun.abc.SlashContext.has_responded is False then tanjun.abc.SlashContext.edit_initial_response will need to be used to create the initial response rather than tanjun.abc.SlashContext.create_initial_response .","title":"has_been_deferred()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.interaction","text":"interaction () Interaction this context is for.","title":"interaction()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.mark_not_found","text":"mark_not_found () Mark this context as not found. Dependent on how the client is configured this may lead to a not found response message being sent.","title":"mark_not_found()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.member","text":"member () Object of the member that triggered this command if this is in a guild.","title":"member()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.set_ephemeral_default","text":"set_ephemeral_default ( state ) Set the ephemeral default state for this context. PARAMETER DESCRIPTION state The new ephemeral default state. If this is True then all calls to the response creating methods on this context will default to being ephemeral. TYPE: bool","title":"set_ephemeral_default()"},{"location":"reference/abc/#tanjun.abc.AppCommandContext.type","text":"type () Type of application command this context is for.","title":"type()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext","text":"Bases: alluka . Context Interface of an autocomplete context.","title":"AutocompleteContext"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.author","text":"author () Object of the user who triggered this autocomplete.","title":"author()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.cache","text":"cache () Hikari cache instance this context's client was initialised with.","title":"cache()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.channel_id","text":"channel_id () ID of the channel this autocomplete was triggered in.","title":"channel_id()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.client","text":"client () Tanjun tanjun.abc.Client implementation this context was spawned by.","title":"client()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.created_at","text":"created_at () When this context was created. Note This will either refer to a message or integration's creation date.","title":"created_at()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.events","text":"events () Object of the event manager this context's client was initialised with.","title":"events()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.fetch_channel","text":"fetch_channel () Fetch the channel the context was invoked in. Note This performs an API call. Consider using tanjun.abc.AutocompleteContext.get_channel if you have hikari.api.config.CacheComponents.GUILD_CHANNELS cache component enabled. RETURNS DESCRIPTION hikari . TextableChannel The textable DM or guild channel the context was invoked in. RAISES DESCRIPTION hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the READ_MESSAGES permission in the channel. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"fetch_channel()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.fetch_guild","text":"fetch_guild () Fetch the guild the context was invoked in. Note This performs an API call. Consider using tanjun.abc.AutocompleteContext.get_guild if you have hikari.api.config.CacheComponents.GUILDS cache component enabled. RETURNS DESCRIPTION hikari . Guild | None An optional guild the context was invoked in. None will be returned if the context was invoked in a DM channel. RAISES DESCRIPTION hikari . ForbiddenError If you are not part of the guild. hikari . NotFoundError If the guild is not found. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"fetch_guild()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.focused","text":"focused () The option being autocompleted.","title":"focused()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.get_channel","text":"get_channel () Retrieve the channel the context was invoked in from the cache. Note This method requires the hikari.api.config.CacheComponents.GUILD_CHANNELS cache component. RETURNS DESCRIPTION hikari . TextableGuildChannel | None An optional guild channel the context was invoked in. None will be returned if the channel was not found or if it is DM channel.","title":"get_channel()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.get_guild","text":"get_guild () Fetch the guild that the context was invoked in. Note This method requires hikari.api.config.CacheComponents.GUILDS cache component enabled. RETURNS DESCRIPTION hikari . Guild | None An optional guild the context was invoked in. None will be returned if the guild was not found.","title":"get_guild()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.guild_id","text":"guild_id () ID of the guild this autocomplete was triggered in. Will be None for all DM autocomplete executions.","title":"guild_id()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.has_responded","text":"has_responded () Whether the choices have been set for this autocomplete.","title":"has_responded()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.interaction","text":"interaction () Interaction this context is for.","title":"interaction()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.member","text":"member () Guild member object of this autocomplete's author. Will be None for DM autocomplete executions.","title":"member()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.options","text":"options () Mapping of option names to the values provided for them.","title":"options()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.rest","text":"rest () Object of the Hikari REST client this context's client was initialised with.","title":"rest()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.server","text":"server () Object of the Hikari interaction server provided for this context's client.","title":"server()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.set_choices","text":"set_choices ( choices = Ellipsis , / , ** kwargs ) Set the choices for this autocomplete. Note Only up to (and including) 25 choices may be set for an autocomplete. PARAMETER DESCRIPTION choices Mapping of string option names to their values. The values should match the focused option's relevant type. TYPE: collections . abc . Mapping [ str , str | float | int ] DEFAULT: Ellipsis **kwargs Keyword arguments mapping string option names to their values. The value should match the focused option's relevant type. TYPE: str | float | int DEFAULT: {} RAISES DESCRIPTION RuntimeError If the context has already had the choices set for it. ValueError If more than 25 choices are passed.","title":"set_choices()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.shard","text":"shard () Shard that triggered the context. Note This will be None if tanjun.abc.AutocompleteContext.shards is also None .","title":"shard()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.shards","text":"shards () Object of the Hikari shard manager this context's client was initialised with.","title":"shards()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.triggering_name","text":"triggering_name () Full command name this autocomplete was triggered for.","title":"triggering_name()"},{"location":"reference/abc/#tanjun.abc.AutocompleteContext.voice","text":"voice () Object of the Hikari voice component this context's client was initialised with.","title":"voice()"},{"location":"reference/abc/#tanjun.abc.BaseSlashCommand","text":"Bases: AppCommand [ SlashContext ] , abc . ABC Base class for all slash command classes.","title":"BaseSlashCommand"},{"location":"reference/abc/#tanjun.abc.BaseSlashCommand.build","text":"build ( * , component = None ) Get a builder object for this command. PARAMETER DESCRIPTION component The component to inherit config like default_member_permissions and is_dm_enabled from if not explicitly set on the command. This defaults to the command's linked component. TYPE: typing . Optional [ Component ] DEFAULT: None RETURNS DESCRIPTION hikari . api . SlashCommandBuilder A builder object for this command. Use to declare this command on globally or for a specific guild.","title":"build()"},{"location":"reference/abc/#tanjun.abc.BaseSlashCommand.copy","text":"copy ( * , parent = None ) Create a copy of this command. PARAMETER DESCRIPTION parent The parent of the copy. TYPE: typing . Optional [ SlashCommandGroup ] DEFAULT: None RETURNS DESCRIPTION Self The copy.","title":"copy()"},{"location":"reference/abc/#tanjun.abc.BaseSlashCommand.parent","text":"parent () Object of the group this command is in.","title":"parent()"},{"location":"reference/abc/#tanjun.abc.BaseSlashCommand.tracked_command","text":"tracked_command () Object of the actual command this object tracks if set.","title":"tracked_command()"},{"location":"reference/abc/#tanjun.abc.BaseSlashCommand.type","text":"type () The type of this command.","title":"type()"},{"location":"reference/abc/#tanjun.abc.Client","text":"Bases: abc . ABC Abstract interface of a Tanjun client. This should manage both message and slash command execution based on the provided hikari clients.","title":"Client"},{"location":"reference/abc/#tanjun.abc.Client.add_client_callback","text":"add_client_callback ( name , callback ) Add a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , ClientCallbackNames ] callback The callback to register. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to. TYPE: MetaEventSig RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"add_client_callback()"},{"location":"reference/abc/#tanjun.abc.Client.add_component","text":"add_component ( component ) Add a component to this client. PARAMETER DESCRIPTION component The component to move to this client. TYPE: Component RETURNS DESCRIPTION Self The client instance to allow chained calls.","title":"add_component()"},{"location":"reference/abc/#tanjun.abc.Client.add_listener","text":"add_listener ( event_type , callback ) Add a listener to the client. PARAMETER DESCRIPTION event_type The event type to add a listener for. TYPE: type [ hikari . Event ] callback The callback to register as a listener. This callback must be a coroutine function which returns None and always takes one positional arg of type hikari.events.base_events.Event regardless of client implementation detail. TYPE: ListenerCallbackSig RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"add_listener()"},{"location":"reference/abc/#tanjun.abc.Client.cache","text":"cache () Hikari cache instance this command client was initialised with.","title":"cache()"},{"location":"reference/abc/#tanjun.abc.Client.check_message_name","text":"check_message_name ( name , / , * , case_sensitive = True ) Check whether a message command name is present in the current client. Note Dependent on implementation this may partial check name against the message command's name based on command_name.startswith(name). PARAMETER DESCRIPTION name The name to match commands against. TYPE: str case_sensitive Whether to match case sensitively. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Iterator [ tuple [ str , MessageCommand ]] Iterator of the matched command names to the matched message command objects.","title":"check_message_name()"},{"location":"reference/abc/#tanjun.abc.Client.check_slash_name","text":"check_slash_name ( name ) Check whether a slash command name is present in the current client. Note This won't check the commands within command groups. PARAMETER DESCRIPTION name Name to check against. TYPE: str RETURNS DESCRIPTION collections . abc . Iterator [ BaseSlashCommand ] Iterator of the matched slash command objects.","title":"check_slash_name()"},{"location":"reference/abc/#tanjun.abc.Client.clear_application_commands","text":"clear_application_commands ( * , application = None , guild = hikari . UNDEFINED ) Clear the commands declared either globally or for a specific guild. Note The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). PARAMETER DESCRIPTION application The application to clear commands for. If left as None then this will be inferred from the authorization being used by tanjun.abc.Client.rest . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialApplication ]] DEFAULT: None guild Object or ID of the guild to clear commands for. If left as None global commands will be cleared. TYPE: hikari . UndefinedOr [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: hikari.UNDEFINED","title":"clear_application_commands()"},{"location":"reference/abc/#tanjun.abc.Client.components","text":"components () Collection of the components this command client is using.","title":"components()"},{"location":"reference/abc/#tanjun.abc.Client.declare_application_command","text":"declare_application_command ( command , / , command_id = None , * , application = None , guild = hikari . UNDEFINED ) Declare a single slash command for a bot. Warning Providing command_id when updating a command helps avoid any permissions set for the command being lose (e.g. when changing the command's name). PARAMETER DESCRIPTION command The command to register. TYPE: AppCommand [ typing . Any ] application The application to register the command with. If left as None then this will be inferred from the authorization being used by tanjun.abc.Client.rest . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialApplication ]] DEFAULT: None command_id ID of the command to update. TYPE: typing . Optional [ hikari . Snowflakeish ] DEFAULT: None guild Object or ID of the guild to register the command with. If left as None then the command will be registered globally. TYPE: hikari . UndefinedOr [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . PartialCommand API representation of the command that was registered.","title":"declare_application_command()"},{"location":"reference/abc/#tanjun.abc.Client.declare_application_commands","text":"declare_application_commands ( commands , / , command_ids = None , * , application = None , guild = hikari . UNDEFINED , message_ids = None , user_ids = None , force = False ) Declare a collection of slash commands for a bot. Note The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). PARAMETER DESCRIPTION commands Iterable of the commands objects or builders to register. TYPE: collections . Iterable [ typing . Union [ AppCommand [ typing . Any ], hikari . api . CommandBuilder ]] command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. While optional, this can be helpful when updating commands as providing the current IDs will prevent changes such as renames from leading to other state set for commands (e.g. permissions) from being lost. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None application The application to register the commands with. If left as None then this will be inferred from the authorization being used by tanjun.abc.Client.rest . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialApplication ]] DEFAULT: None guild Object or ID of the guild to register the commands with. If left as None then the commands will be registered globally. TYPE: hikari . UndefinedOr [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: hikari.UNDEFINED message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None force Force this to declare the commands regardless of whether or not they match the current state of the declared commands. The default behaviour helps avoid issues with the 2 request per minute (per-guild or globally) ratelimit and the other limit of only 200 application command creates per day (per guild or globally). TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Sequence [ hikari . PartialCommand ] API representations of the commands which were registered. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If conflicting command names are found (multiple commanbds have the same top-level name). If more than 100 top-level commands are passed.","title":"declare_application_commands()"},{"location":"reference/abc/#tanjun.abc.Client.declare_global_commands","text":"declare_global_commands ( command_ids = None , * , application = None , guild = hikari . UNDEFINED , message_ids = None , user_ids = None , force = False ) Set the global application commands for a bot based on the loaded components. Warning This will overwrite any previously set application commands and only targets commands marked as global. Note The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). PARAMETER DESCRIPTION command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None application Object or ID of the application to set the global commands for. If left as None then this will be inferred from the authorization being used by tanjun.abc.Client.rest . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialApplication ]] DEFAULT: None guild Object or ID of the guild to set the global commands to. If left as None global commands will be set. TYPE: hikari . UndefinedOr [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: hikari.UNDEFINED message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None force Force this to declare the commands regardless of whether or not they match the current state of the declared commands. The default behaviour helps avoid issues with the 2 request per minute (per-guild or globally) ratelimit and the other limit of only 200 application command creates per day (per guild or globally). TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Sequence [ hikari . commands . PartialCommand ] API representations of the set commands.","title":"declare_global_commands()"},{"location":"reference/abc/#tanjun.abc.Client.default_app_cmd_permissions","text":"default_app_cmd_permissions () Default required guild member permissions for the commands in this client. This may be overridden by tanjun.abc.Component.default_app_cmd_permissions and tanjun.abc.AppCommand.default_member_permissions ; this defaults to no required permissions. Warning This may be overridden by guild staff and does not apply to admins.","title":"default_app_cmd_permissions()"},{"location":"reference/abc/#tanjun.abc.Client.defaults_to_ephemeral","text":"defaults_to_ephemeral () Whether slash contexts spawned by this client should default to ephemeral responses. This effects calls to tanjun.abc.SlashContext.create_followup , tanjun.abc.SlashContext.create_initial_response , tanjun.abc.SlashContext.defer and tanjun.abc.SlashContext.respond unless the flags field is provided for the methods which support it. This defaults to False . Note This may be overridden by tanjun.abc.AppCommand.defaults_to_ephemeral and tanjun.abc.Component.defaults_to_ephemeral and only effects slash command execution.","title":"defaults_to_ephemeral()"},{"location":"reference/abc/#tanjun.abc.Client.dispatch_client_callback","text":"dispatch_client_callback ( name , / , * args ) Dispatch a client callback. PARAMETER DESCRIPTION name The name of the callback to dispatch. TYPE: typing . Union [ str , ClientCallbackNames ] *args Positional arguments to pass to the callback(s). TYPE: typing . Any DEFAULT: () RAISES DESCRIPTION KeyError If no callbacks are registered for the given name.","title":"dispatch_client_callback()"},{"location":"reference/abc/#tanjun.abc.Client.dms_enabled_for_app_cmds","text":"dms_enabled_for_app_cmds () Whether application commands in this client should be enabled in DMs by default. This defaults to True . Note This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and tanjun.abc.Component.dms_enabled_for_app_cmds .","title":"dms_enabled_for_app_cmds()"},{"location":"reference/abc/#tanjun.abc.Client.events","text":"events () Object of the event manager this client was initialised with. This is used for executing message commands if set.","title":"events()"},{"location":"reference/abc/#tanjun.abc.Client.get_callback_override","text":"get_callback_override ( callback ) Get the override for a specific injected callback. PARAMETER DESCRIPTION callback The injected callback to get the override for. TYPE: alluka . CallbackSig [ _T ] RETURNS DESCRIPTION alluka . abc . CallbackSig | None The override if found, else None .","title":"get_callback_override()"},{"location":"reference/abc/#tanjun.abc.Client.get_client_callbacks","text":"get_client_callbacks ( name ) Get a collection of the callbacks registered for a specific name. PARAMETER DESCRIPTION name The name to get the callbacks registered for. This is case-insensitive. TYPE: typing . Union [ str , ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Collection [ MetaEventSig ] Collection of the callbacks for the provided name.","title":"get_client_callbacks()"},{"location":"reference/abc/#tanjun.abc.Client.get_component_by_name","text":"get_component_by_name ( name ) Get a component from this client by name. PARAMETER DESCRIPTION name Name to get a component by. TYPE: str RETURNS DESCRIPTION Component | None The component instance if found, else None .","title":"get_component_by_name()"},{"location":"reference/abc/#tanjun.abc.Client.get_type_dependency","text":"get_type_dependency ( type_ ) Get the implementation for an injected type. PARAMETER DESCRIPTION type_ The associated type. TYPE: type [ _T ] RETURNS DESCRIPTION _T | alluka . abc . Undefined The resolved type if found, else alluka.abc.UNDEFINED .","title":"get_type_dependency()"},{"location":"reference/abc/#tanjun.abc.Client.injector","text":"injector () The attached alluka dependency injection client.","title":"injector()"},{"location":"reference/abc/#tanjun.abc.Client.is_alive","text":"is_alive () Whether this client is alive.","title":"is_alive()"},{"location":"reference/abc/#tanjun.abc.Client.is_case_sensitive","text":"is_case_sensitive () Whether this client should treat message command names case sensitive in search.","title":"is_case_sensitive()"},{"location":"reference/abc/#tanjun.abc.Client.iter_commands","text":"iter_commands () Iterate over all the commands (both message and slash) registered to this client. RETURNS DESCRIPTION collections . abc . Iterator [ ExecutableCommand [ Context ]] Iterator of all the commands registered to this client.","title":"iter_commands()"},{"location":"reference/abc/#tanjun.abc.Client.iter_menu_commands","text":"iter_menu_commands ( * , global_only = False , type = None ) Iterator over the menu commands registered to this client. PARAMETER DESCRIPTION global_only Whether to only iterate over global menu commands. TYPE: bool DEFAULT: False type Menu command type to filter by. TYPE: typing . Optional [ hikari . CommandType ] DEFAULT: None RETURNS DESCRIPTION collections . abc . Iterator [ MenuCommand ] Iterator of the menu commands registered to this client.","title":"iter_menu_commands()"},{"location":"reference/abc/#tanjun.abc.Client.iter_message_commands","text":"iter_message_commands () Iterate over all the message commands registered to this client. RETURNS DESCRIPTION collections . abc . Iterator [ MessageCommand ] Iterator of all the message commands registered to this client.","title":"iter_message_commands()"},{"location":"reference/abc/#tanjun.abc.Client.iter_slash_commands","text":"iter_slash_commands ( * , global_only = False ) Iterate over all the slash commands registered to this client. PARAMETER DESCRIPTION global_only Whether to only iterate over global slash commands. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Iterator [ BaseSlashCommand ] Iterator of the slash commands registered to this client.","title":"iter_slash_commands()"},{"location":"reference/abc/#tanjun.abc.Client.listeners","text":"listeners () Mapping of event types to the listeners registered in this client.","title":"listeners()"},{"location":"reference/abc/#tanjun.abc.Client.load_directory","text":"load_directory ( directory , / , * , namespace = None ) Load entities into this client from the modules in a directory. The same loading rules for tanjun.abc.Client.load_modules mostly apply here but modules with no loaders are quietly ignored. PARAMETER DESCRIPTION directory Name of the directory to load modules from. TYPE: typing . Union [ str , pathlib . Path ] namespace The python namespace this directory's modules should be imported from, if applicable. This work as {namespace}.{file.name.removesuffix(\".py\")} and will have the same behaviour as when a str is passed to tanjun.abc.Client.load_modules if passed. If left as None then this will have the same behaviour as when a pathlib.Path is passed to tanjun.abc.Client.load_modules . TYPE: typing . Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Self This client instance to enable chained calls. RAISES DESCRIPTION tanjun . FailedModuleLoad If any of the modules in this directory failed to load. This includes if it failed to import or if one of its loaders raised. The source error can be found at tanjun.FailedModuleLoad. cause . Modules with no loaders are ignored. ModuleNotFoundError If any of the modules aren't found.","title":"load_directory()"},{"location":"reference/abc/#tanjun.abc.Client.load_directory_async","text":"load_directory_async ( directory , / , * , namespace = None ) Asynchronous variant of tanjun.abc.Client.load_directory . Unlike tanjun.abc.Client.load_directory , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.abc.Client.load_directory .","title":"load_directory_async()"},{"location":"reference/abc/#tanjun.abc.Client.load_modules","text":"load_modules ( * modules ) Load entities into this client from modules based on present loaders. Note If an __all__ is present in the target module then it will be used to find loaders. Examples: For this to work the target module has to have at least one loader present. @tanjun . as_loader def load_module ( client : tanjun . Client ) -> None : client . add_component ( component . copy ()) or loader = tanjun . Component ( name = \"trans component\" ) . load_from_scope () . make_loader () PARAMETER DESCRIPTION *modules Path(s) of the modules to load from. When str this will be treated as a normal import path which is absolute ( \"foo.bar.baz\" ). It's worth noting that absolute module paths may be imported from the current location if the top level module is a valid module file or module directory in the current working directory. When pathlib.Path the module will be imported directly from the given path. In this mode any relative imports in the target module will fail to resolve. TYPE: typing . Union [ str , pathlib . Path ] DEFAULT: () RETURNS DESCRIPTION Self This client instance to enable chained calls. RAISES DESCRIPTION tanjun . FailedModuleLoad If the new version of a module failed to load. This includes if it failed to import or if one of its loaders raised. The source error can be found at tanjun.FailedModuleLoad. cause . tanjun . ModuleStateConflict If the module is already loaded. tanjun . ModuleMissingLoaders If no loaders are found in the module. ModuleNotFoundError If the module is not found.","title":"load_modules()"},{"location":"reference/abc/#tanjun.abc.Client.load_modules_async","text":"load_modules_async ( * modules ) Asynchronous variant of tanjun.abc.Client.load_modules . Unlike tanjun.abc.Client.load_modules , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.abc.Client.load_modules .","title":"load_modules_async()"},{"location":"reference/abc/#tanjun.abc.Client.loop","text":"loop () The loop this client is bound to if it's alive.","title":"loop()"},{"location":"reference/abc/#tanjun.abc.Client.metadata","text":"metadata () Mutable mapping of the metadata set for this client. Note Any modifications made to this mutable mapping will be preserved by the client.","title":"metadata()"},{"location":"reference/abc/#tanjun.abc.Client.prefixes","text":"prefixes () Collection of the prefixes set for this client. These are only use during message command execution to match commands to this command client.","title":"prefixes()"},{"location":"reference/abc/#tanjun.abc.Client.reload_modules","text":"reload_modules ( * modules ) Reload entities in this client based on the loaders in loaded module(s). Note If an __all__ is present in the target module then it will be used to find loaders and unloaders. Examples: For this to work the module has to have at least one ClientLoader which handles loading and one which handles unloading present. PARAMETER DESCRIPTION *modules Paths of one or more module to unload. These should be the same paths which were passed to tanjun.abc.Client.load_modules . TYPE: typing . Union [ str , pathlib . Path ] DEFAULT: () RETURNS DESCRIPTION Self This client instance to enable chained calls. RAISES DESCRIPTION tanjun . FailedModuleLoad If the new version of a module failed to load. This includes if it failed to import or if one of its loaders raised. The source error can be found at tanjun.FailedModuleLoad. cause . tanjun . FailedModuleUnload If the old version of a module failed to unload. This indicates that one of its unloaders raised. The source error can be found at tanjun.FailedModuleUnload. cause . tanjun . ModuleStateConflict If the module hasn't been loaded. tanjun . ModuleMissingLoaders If no loaders are found in the new state of the module. tanjun . ModuleMissingUnloaders If no unloaders are found in the current state of the module. ModuleNotFoundError If the module can no-longer be found at the provided path.","title":"reload_modules()"},{"location":"reference/abc/#tanjun.abc.Client.reload_modules_async","text":"reload_modules_async ( * modules ) Asynchronous variant of tanjun.abc.Client.reload_modules . Unlike tanjun.abc.Client.reload_modules , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.abc.Client.reload_modules .","title":"reload_modules_async()"},{"location":"reference/abc/#tanjun.abc.Client.remove_callback_override","text":"remove_callback_override ( callback ) Remove a callback override. PARAMETER DESCRIPTION callback The injected callback to remove the override for. TYPE: alluka . CallbackSig [ _T ] RETURNS DESCRIPTION Self The client instance to allow chaining. RAISES DESCRIPTION KeyError If no override is found for the callback.","title":"remove_callback_override()"},{"location":"reference/abc/#tanjun.abc.Client.remove_client_callback","text":"remove_client_callback ( name , callback ) Remove a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , ClientCallbackNames ] callback The callback to remove from the client's callbacks. TYPE: MetaEventSig RAISES DESCRIPTION KeyError If the provided name isn't found. ValueError If the provided callback isn't found. RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"remove_client_callback()"},{"location":"reference/abc/#tanjun.abc.Client.remove_component","text":"remove_component ( component ) Remove a component from this client. This will unsubscribe any client callbacks, commands and listeners registered in the provided component. PARAMETER DESCRIPTION component The component to remove from this client. TYPE: Component RAISES DESCRIPTION ValueError If the provided component isn't found. RETURNS DESCRIPTION Self The client instance to allow chained calls.","title":"remove_component()"},{"location":"reference/abc/#tanjun.abc.Client.remove_component_by_name","text":"remove_component_by_name ( name ) Remove a component from this client by name. This will unsubscribe any client callbacks, commands and listeners registered in the provided component. PARAMETER DESCRIPTION name Name of the component to remove from this client. TYPE: str RAISES DESCRIPTION KeyError If the provided component name isn't found.","title":"remove_component_by_name()"},{"location":"reference/abc/#tanjun.abc.Client.remove_listener","text":"remove_listener ( event_type , callback ) Remove a listener from the client. PARAMETER DESCRIPTION event_type The event type to remove a listener for. TYPE: type [ hikari . Event ] callback The callback to remove. TYPE: ListenerCallbackSig RAISES DESCRIPTION KeyError If the provided event type isn't found. ValueError If the provided callback isn't found. RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"remove_listener()"},{"location":"reference/abc/#tanjun.abc.Client.remove_type_dependency","text":"remove_type_dependency ( type_ ) Remove a type dependency. PARAMETER DESCRIPTION type_ The associated type. TYPE: type [ typing . Any ] RETURNS DESCRIPTION Self The client instance to allow chaining. RAISES DESCRIPTION KeyError If type is not registered.","title":"remove_type_dependency()"},{"location":"reference/abc/#tanjun.abc.Client.rest","text":"rest () Object of the Hikari REST client this client was initialised with.","title":"rest()"},{"location":"reference/abc/#tanjun.abc.Client.server","text":"server () Object of the Hikari interaction server provided for this client. This is used for executing application commands if set.","title":"server()"},{"location":"reference/abc/#tanjun.abc.Client.set_callback_override","text":"set_callback_override ( callback , override ) Override a specific injected callback. PARAMETER DESCRIPTION callback The injected callback to override. TYPE: alluka . CallbackSig [ _T ] override The callback to use instead. TYPE: alluka . CallbackSig [ _T ] RETURNS DESCRIPTION Self The client instance to allow chaining.","title":"set_callback_override()"},{"location":"reference/abc/#tanjun.abc.Client.set_metadata","text":"set_metadata ( key , value ) Set a field in the client's metadata. PARAMETER DESCRIPTION key Metadata key to set. TYPE: typing . Any value Metadata value to set. TYPE: typing . Any RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_metadata()"},{"location":"reference/abc/#tanjun.abc.Client.set_type_dependency","text":"set_type_dependency ( type_ , value ) Set a callback to be called to resolve a injected type. PARAMETER DESCRIPTION type_ The type of the dependency to add an implementation for. TYPE: type [ _T ] value The value of the dependency. TYPE: _T RETURNS DESCRIPTION Self The client instance to allow chaining.","title":"set_type_dependency()"},{"location":"reference/abc/#tanjun.abc.Client.shards","text":"shards () Object of the Hikari shard manager this client was initialised with.","title":"shards()"},{"location":"reference/abc/#tanjun.abc.Client.unload_modules","text":"unload_modules ( * modules ) Unload entities from this client based on unloaders in one or more modules. Note If an __all__ is present in the target module then it will be used to find unloaders. Examples: For this to work the module has to have at least one unloading enabled tanjun.abc.ClientLoader present. @tanjun . as_unloader def unload_component ( client : tanjun . Client ) -> None : client . remove_component_by_name ( component . name ) or # make_loader's returned ClientLoader handles both loading and unloading. loader = tanjun . Component ( name = \"trans component\" ) . load_from_scope () . make_loader () PARAMETER DESCRIPTION *modules Path of one or more modules to unload. These should be the same path(s) which were passed to tanjun.abc.Client.load_modules . TYPE: typing . Union [ str , pathlib . Path ] DEFAULT: () RETURNS DESCRIPTION Self This client instance to enable chained calls. RAISES DESCRIPTION tanjun . ModuleStateConflict If the module hasn't been loaded. tanjun . ModuleMissingUnloaders If no unloaders are found in the module. tanjun . FailedModuleUnload If the old version of a module failed to unload. This indicates that one of its unloaders raised. The source error can be found at tanjun.FailedModuleUnload. cause .","title":"unload_modules()"},{"location":"reference/abc/#tanjun.abc.Client.voice","text":"voice () Object of the Hikari voice component this client was initialised with.","title":"voice()"},{"location":"reference/abc/#tanjun.abc.Client.with_client_callback","text":"with_client_callback ( name ) Add a client callback through a decorator call. Examples: client = tanjun . Client . from_rest_bot ( bot ) @client . with_client_callback ( \"closed\" ) async def on_close () -> None : raise NotImplementedError PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Callable [[ MetaEventSig ], MetaEventSig ] Decorator callback used to register the client callback. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to.","title":"with_client_callback()"},{"location":"reference/abc/#tanjun.abc.Client.with_listener","text":"with_listener ( * event_types ) Add an event listener to this client through a decorator call. Examples: client = tanjun . Client . from_gateway_bot ( bot ) @client . with_listener ( hikari . MessageCreateEvent ) async def on_message_create ( event : hikari . MessageCreateEvent ) -> None : raise NotImplementedError PARAMETER DESCRIPTION *event_types One or more event types to listen for. If none are provided then the event type(s) will be inferred from the callback's type-hints. TYPE: type [ hikari . Event ] DEFAULT: () RETURNS DESCRIPTION collections . abc . Callable [[ ListenerCallbackSig ], ListenerCallbackSig ] Decorator callback used to register the event callback. The callback must be a coroutine function which returns None and always takes at least one positional arg of type hikari.events.base_events.Event regardless of client implementation detail. RAISES DESCRIPTION ValueError If nothing was passed for event_types and no subclasses of hikari.events.base_events.Event are found in the type-hint for the callback's first argument.","title":"with_listener()"},{"location":"reference/abc/#tanjun.abc.ClientCallbackNames","text":"Bases: str , enum . Enum Enum of the standard client callback names. These should be dispatched by all tanjun.abc.Client implementations.","title":"ClientCallbackNames"},{"location":"reference/abc/#tanjun.abc.ClientCallbackNames.CLOSED","text":"CLOSED = 'closed' Called when the client has finished closing. No positional arguments are provided for this event.","title":"CLOSED"},{"location":"reference/abc/#tanjun.abc.ClientCallbackNames.CLOSING","text":"CLOSING = 'closing' Called when the client is initially instructed to close. No positional arguments are provided for this event.","title":"CLOSING"},{"location":"reference/abc/#tanjun.abc.ClientCallbackNames.COMPONENT_ADDED","text":"COMPONENT_ADDED = 'component_added' Called when a component is added to an active client. Warning This event isn't dispatched for components which were registered while the client is inactive. The first positional argument is the tanjun.abc.Component being added.","title":"COMPONENT_ADDED"},{"location":"reference/abc/#tanjun.abc.ClientCallbackNames.COMPONENT_REMOVED","text":"COMPONENT_REMOVED = 'component_removed' Called when a component is added to an active client. Warning This event isn't dispatched for components which were removed while the client is inactive. The first positional argument is the tanjun.abc.Component being removed.","title":"COMPONENT_REMOVED"},{"location":"reference/abc/#tanjun.abc.ClientCallbackNames.MENU_COMMAND_NOT_FOUND","text":"MENU_COMMAND_NOT_FOUND = 'menu_command_not_found' Called when a menu command is not found. tanjun.abc.MenuContext is provided as the first positional argument.","title":"MENU_COMMAND_NOT_FOUND"},{"location":"reference/abc/#tanjun.abc.ClientCallbackNames.MESSAGE_COMMAND_NOT_FOUND","text":"MESSAGE_COMMAND_NOT_FOUND = 'message_command_not_found' Called when a message command is not found. tanjun.abc.MessageContext is provided as the first positional argument.","title":"MESSAGE_COMMAND_NOT_FOUND"},{"location":"reference/abc/#tanjun.abc.ClientCallbackNames.SLASH_COMMAND_NOT_FOUND","text":"SLASH_COMMAND_NOT_FOUND = 'slash_command_not_found' Called when a slash command is not found. tanjun.abc.SlashContext is provided as the first positional argument.","title":"SLASH_COMMAND_NOT_FOUND"},{"location":"reference/abc/#tanjun.abc.ClientCallbackNames.STARTED","text":"STARTED = 'started' Called when the client has finished starting. No positional arguments are provided for this event.","title":"STARTED"},{"location":"reference/abc/#tanjun.abc.ClientCallbackNames.STARTING","text":"STARTING = 'starting' Called when the client is initially instructed to start. No positional arguments are provided for this event.","title":"STARTING"},{"location":"reference/abc/#tanjun.abc.ClientLoader","text":"Bases: abc . ABC Interface of logic used to load and unload components into a generic client.","title":"ClientLoader"},{"location":"reference/abc/#tanjun.abc.ClientLoader.has_load","text":"has_load () Whether this loader will load anything.","title":"has_load()"},{"location":"reference/abc/#tanjun.abc.ClientLoader.has_unload","text":"has_unload () Whether this loader will unload anything.","title":"has_unload()"},{"location":"reference/abc/#tanjun.abc.ClientLoader.load","text":"load ( client ) Load logic into a client instance. PARAMETER DESCRIPTION client The client to load commands and listeners for. TYPE: Client RETURNS DESCRIPTION bool Whether anything was loaded.","title":"load()"},{"location":"reference/abc/#tanjun.abc.ClientLoader.unload","text":"unload ( client ) Unload logic from a client instance. PARAMETER DESCRIPTION client The client to unload commands and listeners from. TYPE: Client RETURNS DESCRIPTION bool Whether anything was unloaded.","title":"unload()"},{"location":"reference/abc/#tanjun.abc.Component","text":"Bases: abc . ABC Standard interface of a Tanjun component. This is a collection of message and application commands, and listeners with logic for command search + execution and loading the listeners into a tanjun client.","title":"Component"},{"location":"reference/abc/#tanjun.abc.Component.add_listener","text":"add_listener ( event , listener ) Add a listener to this component. PARAMETER DESCRIPTION event The event to listen for. TYPE: type [ hikari . Event ] listener The listener to add. TYPE: ListenerCallbackSig RETURNS DESCRIPTION Self The component to enable chained calls.","title":"add_listener()"},{"location":"reference/abc/#tanjun.abc.Component.add_menu_command","text":"add_menu_command ( command ) Add a menu command to this component. PARAMETER DESCRIPTION command The command to add. TYPE: MenuCommand [ typing . Any , typing . Any ] RETURNS DESCRIPTION Self The component to enable chained calls.","title":"add_menu_command()"},{"location":"reference/abc/#tanjun.abc.Component.add_message_command","text":"add_message_command ( command ) Add a message command to this component. PARAMETER DESCRIPTION command The command to add. TYPE: MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The component to enable chained calls.","title":"add_message_command()"},{"location":"reference/abc/#tanjun.abc.Component.add_slash_command","text":"add_slash_command ( command ) Add a slash command to this component. PARAMETER DESCRIPTION command The command to add. TYPE: BaseSlashCommand RETURNS DESCRIPTION Self The component to enable chained calls.","title":"add_slash_command()"},{"location":"reference/abc/#tanjun.abc.Component.check_message_name","text":"check_message_name ( name , / , * , case_sensitive = True ) Check whether a name matches any of this component's registered message commands. Note This only checks for name matches against the top level command and will not account for sub-commands. Note Dependent on implementation detail this may partial check name against command names using name.startswith(command_name), hence why it also returns the name a command was matched by. PARAMETER DESCRIPTION name The name to check for command matches. TYPE: str case_sensitive Whether to perform a case-sensitive match. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Iterator [ tuple [ str , MessageCommand [ typing . Any ]]] Iterator of tuples of command name matches to the relevant message command objects.","title":"check_message_name()"},{"location":"reference/abc/#tanjun.abc.Component.check_slash_name","text":"check_slash_name ( name ) Check whether a name matches any of this component's registered slash commands. Note This won't check for sub-commands and will expect name to simply be the top level command name. PARAMETER DESCRIPTION name The name to check for command matches. TYPE: str RETURNS DESCRIPTION collections . abc . Iterator [ BaseSlashCommand ] An iterator of the matching slash commands.","title":"check_slash_name()"},{"location":"reference/abc/#tanjun.abc.Component.client","text":"client () Tanjun client this component is bound to.","title":"client()"},{"location":"reference/abc/#tanjun.abc.Component.close","text":"close ( * , unbind = False ) Close the component. PARAMETER DESCRIPTION unbind Whether to unbind from the client after this is closed. TYPE: bool DEFAULT: False RAISES DESCRIPTION RuntimeError If the component isn't running.","title":"close()"},{"location":"reference/abc/#tanjun.abc.Component.default_app_cmd_permissions","text":"default_app_cmd_permissions () Default required guild member permissions for the commands in this component. This may be overridden by tanjun.abc.AppCommand.default_member_permissions and if this is None then the default from the parent client is used. Warning This may be overridden by guild staff and does not apply to admins.","title":"default_app_cmd_permissions()"},{"location":"reference/abc/#tanjun.abc.Component.defaults_to_ephemeral","text":"defaults_to_ephemeral () Whether slash contexts executed in this component should default to ephemeral responses. This effects calls to tanjun.abc.SlashContext.create_followup , tanjun.abc.SlashContext.create_initial_response , tanjun.abc.SlashContext.defer and tanjun.abc.SlashContext.respond unless the flags field is provided for the methods which support it. Note This may be overridden by tanjun.abc.AppCommand.defaults_to_ephemeral and only effects slash command execution; if this is None then the default from the parent client is used.","title":"defaults_to_ephemeral()"},{"location":"reference/abc/#tanjun.abc.Component.dms_enabled_for_app_cmds","text":"dms_enabled_for_app_cmds () Whether application commands in this component should be enabled in DMs. Note This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and if both that and this are None then the default from the parent client is used.","title":"dms_enabled_for_app_cmds()"},{"location":"reference/abc/#tanjun.abc.Component.execute_autocomplete","text":"execute_autocomplete ( ctx ) Execute an autocomplete context. Note Unlike the other execute methods, this shouldn't be expected to raise tanjun.HaltExecution nor tanjun.CommandError . PARAMETER DESCRIPTION ctx The context to execute. TYPE: AutocompleteContext RETURNS DESCRIPTION collections . abc . Coroutine [ typing . Any , typing . Any , None] | None Coroutine used to wait for the command execution to finish. This may be awaited or left to run as a background task. If this is None then the client should carry on its search for a component with a matching autocomplete.","title":"execute_autocomplete()"},{"location":"reference/abc/#tanjun.abc.Component.execute_menu","text":"execute_menu ( ctx , / , * , hooks = None ) Execute a menu context. PARAMETER DESCRIPTION ctx The context to execute. TYPE: MenuContext hooks Set of hooks to include in this command execution. TYPE: typing . Optional [ collections . MutableSet [ MenuHooks ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Coroutine [ typing . Any , typing . Any , None] | None Coroutine used to wait for the command execution to finish. This may be awaited or left to run as a background task. If this is None then the client should carry on its search for a component with a matching command. RAISES DESCRIPTION tanjun . CommandError To end the command's execution with an error response message. tanjun . HaltExecution To indicate that the client should stop searching for commands to execute with the current context.","title":"execute_menu()"},{"location":"reference/abc/#tanjun.abc.Component.execute_message","text":"execute_message ( ctx , / , * , hooks = None ) Execute a message context. PARAMETER DESCRIPTION ctx The context to execute. TYPE: MessageContext hooks Set of hooks to include in this command execution. TYPE: typing . Optional [ collections . MutableSet [ MessageHooks ]] DEFAULT: None RETURNS DESCRIPTION bool Whether a message command was executed in this component with the provided context. If False then the client should carry on its search for a component with a matching command. RAISES DESCRIPTION tanjun . CommandError To end the command's execution with an error response message. tanjun . HaltExecution To indicate that the client should stop searching for commands to execute with the current context.","title":"execute_message()"},{"location":"reference/abc/#tanjun.abc.Component.execute_slash","text":"execute_slash ( ctx , / , * , hooks = None ) Execute a slash context. PARAMETER DESCRIPTION ctx The context to execute. TYPE: SlashContext hooks Set of hooks to include in this command execution. TYPE: typing . Optional [ collections . MutableSet [ SlashHooks ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Coroutine [ typing . Any , typing . Any , None] | None Coroutine used to wait for the command execution to finish. This may be awaited or left to run as a background task. If this is None then the client should carry on its search for a component with a matching command. RAISES DESCRIPTION tanjun . CommandError To end the command's execution with an error response message. tanjun . HaltExecution To indicate that the client should stop searching for commands to execute with the current context.","title":"execute_slash()"},{"location":"reference/abc/#tanjun.abc.Component.is_case_sensitive","text":"is_case_sensitive () Whether this component should treat message command names case sensitive in search. If this is None then the client's case sensitivity will be used.","title":"is_case_sensitive()"},{"location":"reference/abc/#tanjun.abc.Component.listeners","text":"listeners () Mapping of event types to the listeners registered for them in this component.","title":"listeners()"},{"location":"reference/abc/#tanjun.abc.Component.loop","text":"loop () The asyncio loop this client is bound to if it has been opened.","title":"loop()"},{"location":"reference/abc/#tanjun.abc.Component.menu_commands","text":"menu_commands () Collection of the menu commands in this component.","title":"menu_commands()"},{"location":"reference/abc/#tanjun.abc.Component.message_commands","text":"message_commands () Collection of the message commands in this component.","title":"message_commands()"},{"location":"reference/abc/#tanjun.abc.Component.metadata","text":"metadata () Mutable mapping of the metadata set for this component. Note Any modifications made to this mutable mapping will be preserved by the component.","title":"metadata()"},{"location":"reference/abc/#tanjun.abc.Component.name","text":"name () Component's unique identifier. Note This will be preserved between copies of a component.","title":"name()"},{"location":"reference/abc/#tanjun.abc.Component.open","text":"open () Start the component. RAISES DESCRIPTION RuntimeError If the component is already open. If the component isn't bound to a client.","title":"open()"},{"location":"reference/abc/#tanjun.abc.Component.remove_listener","text":"remove_listener ( event , listener ) Remove a listener from this component. PARAMETER DESCRIPTION event The event to listen for. TYPE: type [ hikari . Event ] listener The listener to remove. TYPE: ListenerCallbackSig RAISES DESCRIPTION ValueError If the listener is not registered for the provided event. RETURNS DESCRIPTION Self The component to enable chained calls.","title":"remove_listener()"},{"location":"reference/abc/#tanjun.abc.Component.remove_menu_command","text":"remove_menu_command ( command ) Remove a menu command from this component. PARAMETER DESCRIPTION command Object of the menu command to remove. TYPE: MenuCommand [ typing . Any , typing . Any ] RETURNS DESCRIPTION Self The component to enable chained calls.","title":"remove_menu_command()"},{"location":"reference/abc/#tanjun.abc.Component.remove_message_command","text":"remove_message_command ( command ) Remove a message command from this component. PARAMETER DESCRIPTION command The command to remove. TYPE: MessageCommand [ typing . Any ] RAISES DESCRIPTION ValueError If the provided command isn't found. RETURNS DESCRIPTION Self The component to enable chained calls.","title":"remove_message_command()"},{"location":"reference/abc/#tanjun.abc.Component.remove_slash_command","text":"remove_slash_command ( command ) Remove a slash command from this component. PARAMETER DESCRIPTION command The command to remove. TYPE: BaseSlashCommand RAISES DESCRIPTION ValueError If the provided command isn't found. RETURNS DESCRIPTION Self The component to enable chained calls.","title":"remove_slash_command()"},{"location":"reference/abc/#tanjun.abc.Component.set_metadata","text":"set_metadata ( key , value ) Set a field in the component's metadata. PARAMETER DESCRIPTION key Metadata key to set. TYPE: typing . Any value Metadata value to set. TYPE: typing . Any RETURNS DESCRIPTION Self The component instance to enable chained calls.","title":"set_metadata()"},{"location":"reference/abc/#tanjun.abc.Component.slash_commands","text":"slash_commands () Collection of the slash commands in this component.","title":"slash_commands()"},{"location":"reference/abc/#tanjun.abc.Component.with_listener","text":"with_listener ( * event_types ) Add a listener to this component through a decorator call. PARAMETER DESCRIPTION *event_types One or more event types to listen for. If none are provided then the event type(s) will be inferred from the callback's type-hints. TYPE: type [ hikari . Event ] DEFAULT: () RETURNS DESCRIPTION collections . abc . Callable [[ ListenerCallbackSig ], ListenerCallbackSig ] Decorator callback which takes listener to add. RAISES DESCRIPTION ValueError If nothing was passed for event_types and no subclasses of hikari.events.base_events.Event are found in the type-hint for the callback's first argument.","title":"with_listener()"},{"location":"reference/abc/#tanjun.abc.Component.with_menu_command","text":"with_menu_command ( command = None , / , * , copy = False ) Add a menu command to this component through a decorator call. PARAMETER DESCRIPTION command The command to add. TYPE: MenuCommand DEFAULT: None copy Whether to copy the command before adding it. TYPE: bool DEFAULT: False RETURNS DESCRIPTION MenuCommand The added command.","title":"with_menu_command()"},{"location":"reference/abc/#tanjun.abc.Component.with_message_command","text":"with_message_command ( command = None , / , * , copy = False ) Add a message command to this component through a decorator call. PARAMETER DESCRIPTION command The command to add. TYPE: MessageCommand DEFAULT: None copy Whether to copy the command before adding it. TYPE: bool DEFAULT: False RETURNS DESCRIPTION MessageCommand The added command.","title":"with_message_command()"},{"location":"reference/abc/#tanjun.abc.Component.with_slash_command","text":"with_slash_command ( command = None , / , * , copy = False ) Add a slash command to this component through a decorator call. PARAMETER DESCRIPTION command The command to add. TYPE: BaseSlashCommand DEFAULT: None copy Whether to copy the command before adding it. TYPE: bool DEFAULT: False RETURNS DESCRIPTION BaseSlashCommand The added command.","title":"with_slash_command()"},{"location":"reference/abc/#tanjun.abc.Context","text":"Bases: alluka . Context Interface for the context of a command execution.","title":"Context"},{"location":"reference/abc/#tanjun.abc.Context.author","text":"author () Object of the user who triggered this command.","title":"author()"},{"location":"reference/abc/#tanjun.abc.Context.cache","text":"cache () Hikari cache instance this context's command client was initialised with.","title":"cache()"},{"location":"reference/abc/#tanjun.abc.Context.channel_id","text":"channel_id () ID of the channel this command was triggered in.","title":"channel_id()"},{"location":"reference/abc/#tanjun.abc.Context.client","text":"client () Tanjun tanjun.abc.Client implementation this context was spawned by.","title":"client()"},{"location":"reference/abc/#tanjun.abc.Context.command","text":"command () Object of the command this context is bound to. Note This will only be None before this has been bound to a specific command but never during command execution.","title":"command()"},{"location":"reference/abc/#tanjun.abc.Context.component","text":"component () Object of the tanjun.abc.Component this context is bound to. Note This will only be None before this has been bound to a specific command but never during command execution nor checks.","title":"component()"},{"location":"reference/abc/#tanjun.abc.Context.created_at","text":"created_at () When this context was created.","title":"created_at()"},{"location":"reference/abc/#tanjun.abc.Context.delete_initial_response","text":"delete_initial_response () Delete the initial response after invoking this context. RAISES DESCRIPTION LookupError , hikari . NotFoundError The last context has no initial response.","title":"delete_initial_response()"},{"location":"reference/abc/#tanjun.abc.Context.delete_last_response","text":"delete_last_response () Delete the last response after invoking this context. RAISES DESCRIPTION LookupError , hikari . NotFoundError The last context has no responses.","title":"delete_last_response()"},{"location":"reference/abc/#tanjun.abc.Context.edit_initial_response","text":"edit_initial_response ( content = hikari . UNDEFINED , * , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Edit the initial response for this context. PARAMETER DESCRIPTION content The content to edit the initial response with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None attachment A singular attachment to edit the initial response with. TYPE: hikari . UndefinedNoneOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments A sequence of attachments to edit the initial response with. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to set for this message. This component will replace any previously set components and passing None will remove all components. TYPE: hikari . UndefinedNoneOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects set for this message. These components will replace any previously set components and passing None or an empty sequence will remove all components. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to replace the initial response with. TYPE: hikari . UndefinedNoneOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to replace the initial response with. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . Message The message that has been edited. RAISES DESCRIPTION ValueError If more than 100 unique objects/entities are passed for role_mentions or user_mentions . If delete_after would be more than 15 minutes after the slash command was called. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"edit_initial_response()"},{"location":"reference/abc/#tanjun.abc.Context.edit_last_response","text":"edit_last_response ( content = hikari . UNDEFINED , * , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Edit the last response for this context. PARAMETER DESCRIPTION content The content to edit the last response with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None attachment A singular attachment to edit the last response with. TYPE: hikari . UndefinedNoneOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments A sequence of attachments to edit the last response with. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to set for this message. This component will replace any previously set components and passing None will remove all components. TYPE: hikari . UndefinedNoneOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects set for this message. These components will replace any previously set components and passing None or an empty sequence will remove all components. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to replace the last response with. TYPE: hikari . UndefinedNoneOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to replace the last response with. TYPE: hikari . UndefinedNoneOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . Message The message that has been edited. RAISES DESCRIPTION ValueError If more than 100 unique objects/entities are passed for role_mentions or user_mentions . If delete_after would be more than 15 minutes after the slash command was called. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"edit_last_response()"},{"location":"reference/abc/#tanjun.abc.Context.events","text":"events () Object of the event manager this context's client was initialised with.","title":"events()"},{"location":"reference/abc/#tanjun.abc.Context.fetch_channel","text":"fetch_channel () Fetch the channel the context was invoked in. Note This performs an API call. Consider using tanjun.abc.Context.get_channel if you have hikari.api.config.CacheComponents.GUILD_CHANNELS cache component enabled. RETURNS DESCRIPTION hikari . TextableChannel The textable DM or guild channel the context was invoked in. RAISES DESCRIPTION hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the READ_MESSAGES permission in the channel. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"fetch_channel()"},{"location":"reference/abc/#tanjun.abc.Context.fetch_guild","text":"fetch_guild () Fetch the guild the context was invoked in. Note This performs an API call. Consider using tanjun.abc.Context.get_guild if you have hikari.api.config.CacheComponents.GUILDS cache component enabled. RETURNS DESCRIPTION hikari . Guild | None An optional guild the context was invoked in. None will be returned if the context was invoked in a DM channel. RAISES DESCRIPTION hikari . ForbiddenError If you are not part of the guild. hikari . NotFoundError If the guild is not found. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"fetch_guild()"},{"location":"reference/abc/#tanjun.abc.Context.fetch_initial_response","text":"fetch_initial_response () Fetch the initial response for this context. RAISES DESCRIPTION LookupError , hikari . NotFoundError The response was not found.","title":"fetch_initial_response()"},{"location":"reference/abc/#tanjun.abc.Context.fetch_last_response","text":"fetch_last_response () Fetch the last response for this context. RAISES DESCRIPTION LookupError , hikari . NotFoundError The response was not found.","title":"fetch_last_response()"},{"location":"reference/abc/#tanjun.abc.Context.get_channel","text":"get_channel () Retrieve the channel the context was invoked in from the cache. Note This method requires the hikari.api.config.CacheComponents.GUILD_CHANNELS cache component. RETURNS DESCRIPTION hikari . TextableGuildChannel | None An optional guild channel the context was invoked in. None will be returned if the channel was not found or if it is DM channel.","title":"get_channel()"},{"location":"reference/abc/#tanjun.abc.Context.get_guild","text":"get_guild () Fetch the guild that the context was invoked in. Note This method requires hikari.api.config.CacheComponents.GUILDS cache component enabled. RETURNS DESCRIPTION hikari . Guild | None An optional guild the context was invoked in. None will be returned if the guild was not found.","title":"get_guild()"},{"location":"reference/abc/#tanjun.abc.Context.guild_id","text":"guild_id () ID of the guild this command was executed in. Will be None for all DM command executions.","title":"guild_id()"},{"location":"reference/abc/#tanjun.abc.Context.has_responded","text":"has_responded () Whether an initial response has been made for this context.","title":"has_responded()"},{"location":"reference/abc/#tanjun.abc.Context.is_human","text":"is_human () Whether this command execution was triggered by a human. Will be False for bot and webhook triggered commands.","title":"is_human()"},{"location":"reference/abc/#tanjun.abc.Context.member","text":"member () Guild member object of this command's author. Will be None for DM command executions.","title":"member()"},{"location":"reference/abc/#tanjun.abc.Context.respond","text":"respond ( content = hikari . UNDEFINED , * , ensure_result = False , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Respond to this context. PARAMETER DESCRIPTION content The content to respond with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED ensure_result Ensure that this call will always return a message object. If True then this will always return hikari.messages.Message , otherwise this will return hikari.Message | None . It's worth noting that, under certain scenarios within the slash command flow, this may lead to an extre request being made. TYPE: bool DEFAULT: False delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None attachment If provided, the message attachment. This can be a resource, or string of a path on your computer or a URL. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments If provided, the message attachments. These can be resources, or strings consisting of paths on your computer or URLs. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this response. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this response. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to respond with. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . Message | None The message that has been created if it was immedieatly available or ensure_result was set to True , else None . RAISES DESCRIPTION ValueError If more than 100 unique objects/entities are passed for role_mentions or user_mentions . If delete_after would be more than 15 minutes after the slash command was called. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"respond()"},{"location":"reference/abc/#tanjun.abc.Context.rest","text":"rest () Object of the Hikari REST client this context's client was initialised with.","title":"rest()"},{"location":"reference/abc/#tanjun.abc.Context.server","text":"server () Object of the Hikari interaction server provided for this context's client.","title":"server()"},{"location":"reference/abc/#tanjun.abc.Context.shard","text":"shard () Shard that triggered the context. Note This will be None if tanjun.abc.Context.shards is also None .","title":"shard()"},{"location":"reference/abc/#tanjun.abc.Context.shards","text":"shards () Object of the Hikari shard manager this context's client was initialised with.","title":"shards()"},{"location":"reference/abc/#tanjun.abc.Context.triggering_name","text":"triggering_name () Command name this execution was triggered with.","title":"triggering_name()"},{"location":"reference/abc/#tanjun.abc.Context.voice","text":"voice () Object of the Hikari voice component this context's client was initialised with.","title":"voice()"},{"location":"reference/abc/#tanjun.abc.ExecutableCommand","text":"Bases: abc . ABC , typing . Generic [ _ContextT_co ] Base class for all commands that can be executed.","title":"ExecutableCommand"},{"location":"reference/abc/#tanjun.abc.ExecutableCommand.add_check","text":"add_check ( check ) Add a check to the command. PARAMETER DESCRIPTION check The check to add. TYPE: CheckSig RETURNS DESCRIPTION Self This command to enable chained calls","title":"add_check()"},{"location":"reference/abc/#tanjun.abc.ExecutableCommand.checks","text":"checks () Collection of checks that must be met before the command can be executed.","title":"checks()"},{"location":"reference/abc/#tanjun.abc.ExecutableCommand.component","text":"component () Component that the command is registered with.","title":"component()"},{"location":"reference/abc/#tanjun.abc.ExecutableCommand.copy","text":"copy () Create a copy of this command. RETURNS DESCRIPTION Self A copy of this command.","title":"copy()"},{"location":"reference/abc/#tanjun.abc.ExecutableCommand.hooks","text":"hooks () Hooks that are triggered when the command is executed.","title":"hooks()"},{"location":"reference/abc/#tanjun.abc.ExecutableCommand.metadata","text":"metadata () Mutable mapping of metadata set for this command. Note Any modifications made to this mutable mapping will be preserved by the command.","title":"metadata()"},{"location":"reference/abc/#tanjun.abc.ExecutableCommand.remove_check","text":"remove_check ( check ) Remove a check from the command. PARAMETER DESCRIPTION check The check to remove. TYPE: CheckSig RAISES DESCRIPTION ValueError If the provided check isn't found. RETURNS DESCRIPTION Self This command to enable chained calls","title":"remove_check()"},{"location":"reference/abc/#tanjun.abc.ExecutableCommand.set_hooks","text":"set_hooks ( hooks ) Set the hooks that are triggered when the command is executed. PARAMETER DESCRIPTION hooks The hooks that are triggered when the command is executed. TYPE: Hooks [ Context ] | None RETURNS DESCRIPTION Self This command to enable chained calls","title":"set_hooks()"},{"location":"reference/abc/#tanjun.abc.ExecutableCommand.set_metadata","text":"set_metadata ( key , value ) Set a field in the command's metadata. PARAMETER DESCRIPTION key Metadata key to set. TYPE: typing . Any value Metadata value to set. TYPE: typing . Any RETURNS DESCRIPTION Self The command instance to enable chained calls.","title":"set_metadata()"},{"location":"reference/abc/#tanjun.abc.Hooks","text":"Bases: abc . ABC , typing . Generic [ _ContextT_contra ] Interface of a collection of callbacks called during set stage of command execution.","title":"Hooks"},{"location":"reference/abc/#tanjun.abc.Hooks.add_on_error","text":"add_on_error ( callback ) Add an error callback to this hook object. Note This won't be called for expected tanjun.TanjunError derived errors. PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take two positional arguments (of type tanjun.abc.Context and Exception ) and may be either synchronous or asynchronous. Returning True indicates that the error should be suppressed, False that it should be re-raised and None that no decision has been made. This will be accounted for along with the decisions other error hooks make by majority rule. TYPE: ErrorHookSig RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"add_on_error()"},{"location":"reference/abc/#tanjun.abc.Hooks.add_on_parser_error","text":"add_on_parser_error ( callback ) Add a parser error callback to this hook object. PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take two positional arguments (of type tanjun.abc.Context and tanjun.ParserError ), return None and may be either synchronous or asynchronous. It's worth noting that this unlike general error handlers, this will always suppress the error. TYPE: HookSig RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"add_on_parser_error()"},{"location":"reference/abc/#tanjun.abc.Hooks.add_on_success","text":"add_on_success ( callback ) Add a success callback to this hook object. PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"add_on_success()"},{"location":"reference/abc/#tanjun.abc.Hooks.add_post_execution","text":"add_post_execution ( callback ) Add a post-execution callback to this hook object. PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"add_post_execution()"},{"location":"reference/abc/#tanjun.abc.Hooks.add_pre_execution","text":"add_pre_execution ( callback ) Add a pre-execution callback for this hook object. PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"add_pre_execution()"},{"location":"reference/abc/#tanjun.abc.Hooks.with_on_error","text":"with_on_error ( callback ) Add an error callback to this hook object through a decorator call. Note This won't be called for expected tanjun.TanjunError derived errors. Examples: hooks = AnyHooks () @hooks . with_on_error async def on_error ( ctx : tanjun . abc . Context , error : Exception ) -> bool : if isinstance ( error , SomeExpectedType ): await ctx . respond ( \"You dun goofed\" ) return True # Indicating that it should be suppressed. await ctx . respond ( f \"An error occurred: { error } \" ) return False # Indicating that it should be re-raised PARAMETER DESCRIPTION callback The callback to add to this hook. This callback should take two positional arguments (of type tanjun.abc.Context and Exception ) and may be either synchronous or asynchronous. Returning True indicates that the error should be suppressed, False that it should be re-raised and None that no decision has been made. This will be accounted for along with the decisions other error hooks make by majority rule. TYPE: ErrorHookSig RETURNS DESCRIPTION ErrorHookSig The hook callback which was added.","title":"with_on_error()"},{"location":"reference/abc/#tanjun.abc.Hooks.with_on_parser_error","text":"with_on_parser_error ( callback ) Add a parser error callback to this hook object through a decorator call. Examples: hooks = AnyHooks () @hooks . with_on_parser_error async def on_parser_error ( ctx : tanjun . abc . Context , error : tanjun . ParserError ) -> None : await ctx . respond ( f \"You gave invalid input: { error } \" ) PARAMETER DESCRIPTION callback The parser error callback to add to this hook. This callback should take two positional arguments (of type tanjun.abc.Context and tanjun.ParserError ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION HookSig The callback which was added.","title":"with_on_parser_error()"},{"location":"reference/abc/#tanjun.abc.Hooks.with_on_success","text":"with_on_success ( callback ) Add a success callback to this hook object through a decorator call. Examples: hooks = AnyHooks () @hooks . with_on_success async def on_success ( ctx : tanjun . abc . Context ) -> None : await ctx . respond ( \"You did something\" ) PARAMETER DESCRIPTION callback The success callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION HookSig The success callback which was added.","title":"with_on_success()"},{"location":"reference/abc/#tanjun.abc.Hooks.with_post_execution","text":"with_post_execution ( callback ) Add a post-execution callback to this hook object through a decorator call. Examples: hooks = AnyHooks () @hooks . with_post_execution async def post_execution ( ctx : tanjun . abc . Context ) -> None : await ctx . respond ( \"You did something\" ) PARAMETER DESCRIPTION callback The post-execution callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION HookSig The post-execution callback which was seaddedt.","title":"with_post_execution()"},{"location":"reference/abc/#tanjun.abc.Hooks.with_pre_execution","text":"with_pre_execution ( callback ) Add a pre-execution callback to this hook object through a decorator call. Examples: hooks = AnyHooks () @hooks . with_pre_execution async def pre_execution ( ctx : tanjun . abc . Context ) -> None : await ctx . respond ( \"You did something\" ) PARAMETER DESCRIPTION callback The pre-execution callback to add to this hook. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: HookSig RETURNS DESCRIPTION HookSig The pre-execution callback which was added.","title":"with_pre_execution()"},{"location":"reference/abc/#tanjun.abc.MenuCommand","text":"Bases: AppCommand [ MenuContext ] , typing . Generic [ _MenuCommandCallbackSigT , _MenuTypeT ] A contextmenu command.","title":"MenuCommand"},{"location":"reference/abc/#tanjun.abc.MenuCommand.build","text":"build ( * , component = None ) Get a builder object for this command. PARAMETER DESCRIPTION component The component to inherit config like default_member_permissions and is_dm_enabled from if not explicitly set on the command. This defaults to the command's linked component. TYPE: typing . Optional [ Component ] DEFAULT: None RETURNS DESCRIPTION hikari . api . ContextMenuCommandBuilder A builder object for this command. Use to declare this command on globally or for a specific guild.","title":"build()"},{"location":"reference/abc/#tanjun.abc.MenuCommand.callback","text":"callback () Callback which is called during execution.","title":"callback()"},{"location":"reference/abc/#tanjun.abc.MenuCommand.tracked_command","text":"tracked_command () Object of the actual command this object tracks if set.","title":"tracked_command()"},{"location":"reference/abc/#tanjun.abc.MenuCommand.type","text":"type () The menu type(s) this is for.","title":"type()"},{"location":"reference/abc/#tanjun.abc.MenuContext","text":"Bases: AppCommandContext , abc . ABC Interface of a menu command context.","title":"MenuContext"},{"location":"reference/abc/#tanjun.abc.MenuContext.command","text":"command () Command that was invoked. Note This should always be set during command check execution and command hook execution but isn't guaranteed for client callbacks nor component/client checks.","title":"command()"},{"location":"reference/abc/#tanjun.abc.MenuContext.resolve_to_member","text":"resolve_to_member ( * , default = Ellipsis ) Resolve a user context menu context to a member object. RETURNS DESCRIPTION hikari . Member The resolved member. RAISES DESCRIPTION TypeError If the context is not a user menu context. LookupError If the member was not found for this user menu context. This will happen if this was executed in a DM or the target user isn't in the current guild.","title":"resolve_to_member()"},{"location":"reference/abc/#tanjun.abc.MenuContext.resolve_to_message","text":"resolve_to_message () Resolve a message context menu to a message object. RETURNS DESCRIPTION hikari . Message The resolved message. RAISES DESCRIPTION TypeEror if the context is not for a message menu.","title":"resolve_to_message()"},{"location":"reference/abc/#tanjun.abc.MenuContext.resolve_to_user","text":"resolve_to_user () Resolve a user context menu context to a user object. RETURNS DESCRIPTION hikari . User | hikari . Member The resolved user. RAISES DESCRIPTION TypeError If the context is not a user menu context.","title":"resolve_to_user()"},{"location":"reference/abc/#tanjun.abc.MenuContext.set_command","text":"set_command ( command ) Set the command for this context. PARAMETER DESCRIPTION command The command this context is for. TYPE: typing . Optional [ MenuCommand [ typing . Any , typing . Any ]]","title":"set_command()"},{"location":"reference/abc/#tanjun.abc.MenuContext.target","text":"target () Object of the entity this menu targets.","title":"target()"},{"location":"reference/abc/#tanjun.abc.MenuContext.target_id","text":"target_id () ID of the entity this menu command context targets.","title":"target_id()"},{"location":"reference/abc/#tanjun.abc.MenuContext.type","text":"type () The type of context menu this context is for.","title":"type()"},{"location":"reference/abc/#tanjun.abc.MessageCommand","text":"Bases: ExecutableCommand [ MessageContext ] , abc . ABC , typing . Generic [ _CommandCallbackSigT ] Standard interface of a message command.","title":"MessageCommand"},{"location":"reference/abc/#tanjun.abc.MessageCommand.callback","text":"callback () Callback which is called during execution. Note For command groups, this is called when none of the inner-commands matches the message.","title":"callback()"},{"location":"reference/abc/#tanjun.abc.MessageCommand.copy","text":"copy ( * , parent = None ) Create a copy of this command. PARAMETER DESCRIPTION parent The parent of the copy. TYPE: typing . Optional [ MessageCommandGroup [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION Self The copy.","title":"copy()"},{"location":"reference/abc/#tanjun.abc.MessageCommand.names","text":"names () Collection of this command's names.","title":"names()"},{"location":"reference/abc/#tanjun.abc.MessageCommand.parent","text":"parent () Parent group of this command if applicable.","title":"parent()"},{"location":"reference/abc/#tanjun.abc.MessageCommand.parser","text":"parser () Parser for this command.","title":"parser()"},{"location":"reference/abc/#tanjun.abc.MessageCommand.set_parent","text":"set_parent ( parent ) Set the parent of this command. PARAMETER DESCRIPTION parent The parent of this command. TYPE: typing . Optional [ MessageCommandGroup [ typing . Any ]] RETURNS DESCRIPTION Self The command instance to enable chained calls.","title":"set_parent()"},{"location":"reference/abc/#tanjun.abc.MessageCommand.set_parser","text":"set_parser ( parser ) Set the for this message command. PARAMETER DESCRIPTION parser The parser to set. TYPE: MessageParser RETURNS DESCRIPTION Self The command instance to enable chained calls. RAISES DESCRIPTION ValueError If this parser's option keys aren't valid for this command when validate_arg_keys is True .","title":"set_parser()"},{"location":"reference/abc/#tanjun.abc.MessageCommandGroup","text":"Bases: MessageCommand [ _CommandCallbackSigT ] , abc . ABC Standard interface of a message command group.","title":"MessageCommandGroup"},{"location":"reference/abc/#tanjun.abc.MessageCommandGroup.add_command","text":"add_command ( command ) Add a command to this group. PARAMETER DESCRIPTION command The command to add. TYPE: MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The group instance to enable chained calls.","title":"add_command()"},{"location":"reference/abc/#tanjun.abc.MessageCommandGroup.commands","text":"commands () Collection of the commands in this group. Note This may include command groups.","title":"commands()"},{"location":"reference/abc/#tanjun.abc.MessageCommandGroup.remove_command","text":"remove_command ( command ) Remove a command from this group. PARAMETER DESCRIPTION command The command to remove. TYPE: MessageCommand [ typing . Any ] RAISES DESCRIPTION ValueError If the provided command isn't found. RETURNS DESCRIPTION Self The group instance to enable chained calls.","title":"remove_command()"},{"location":"reference/abc/#tanjun.abc.MessageCommandGroup.with_command","text":"with_command ( command ) Add a command to this group through a decorator call. PARAMETER DESCRIPTION command The command to add. TYPE: MessageCommand RETURNS DESCRIPTION MessageCommand The added command.","title":"with_command()"},{"location":"reference/abc/#tanjun.abc.MessageContext","text":"Bases: Context , abc . ABC Interface of a message command specific context.","title":"MessageContext"},{"location":"reference/abc/#tanjun.abc.MessageContext.command","text":"command () Command that was invoked. Note This is always set during command, command check and parser converter execution but isn't guaranteed during client callback nor client/component check execution.","title":"command()"},{"location":"reference/abc/#tanjun.abc.MessageContext.content","text":"content () Content of the context's message minus the triggering name and prefix.","title":"content()"},{"location":"reference/abc/#tanjun.abc.MessageContext.message","text":"message () Message that triggered the context.","title":"message()"},{"location":"reference/abc/#tanjun.abc.MessageContext.respond","text":"respond ( content = hikari . UNDEFINED , * , ensure_result = True , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , tts = hikari . UNDEFINED , reply = False , mentions_everyone = hikari . UNDEFINED , mentions_reply = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Respond to this context. PARAMETER DESCRIPTION content The content to respond with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. Any other value here will be cast to a str . If this is a hikari.embeds.Embed and no embed nor embeds kwarg is provided, then this will instead update the embed. This allows for simpler syntax when sending an embed alone. Likewise, if this is a hikari.files.Resource , then the content is instead treated as an attachment if no attachment and no attachments kwargs are provided. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED ensure_result Ensure this method call will return a message object. This does nothing for message command contexts as the result w ill always be immedieatly available. TYPE: bool DEFAULT: True delete_after If provided, the seconds after which the response message should be deleted. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None tts Whether to respond with tts/text to speech or no. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED reply Whether to reply instead of sending the content to the context. Passing True here indicates a reply to tanjun.abc.MessageContext.message . TYPE: typing . Union [ bool , hikari . SnowflakeishOr [ hikari . PartialMessage ], hikari . UndefinedType ] DEFAULT: False attachment A singular attachment to respond with. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments A sequence of attachments to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this message. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this message. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to respond with. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RETURNS DESCRIPTION hikari . Message The message that has been created. RAISES DESCRIPTION ValueError If more than 100 unique objects/entities are passed for role_mentions or user_mentions . If the interaction will have expired before delete_after is reached. If both attachment and attachments are passed or both component and components are passed or both embed and embeds are passed. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; if reply is not found or not in the same channel as channel ; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"respond()"},{"location":"reference/abc/#tanjun.abc.MessageContext.triggering_prefix","text":"triggering_prefix () Prefix that triggered the context.","title":"triggering_prefix()"},{"location":"reference/abc/#tanjun.abc.MessageParser","text":"Bases: abc . ABC Base class for a message parser.","title":"MessageParser"},{"location":"reference/abc/#tanjun.abc.MessageParser.copy","text":"copy () Copy the parser. RETURNS DESCRIPTION Self A copy of the parser.","title":"copy()"},{"location":"reference/abc/#tanjun.abc.MessageParser.parse","text":"parse ( ctx ) Parse a message context. Warning This relies on the prefix and command name(s) having been removed from tanjun.abc.MessageContext.content . PARAMETER DESCRIPTION ctx The message context to parse. TYPE: MessageContext RETURNS DESCRIPTION dict [ str , typing . Any ] Dictionary of argument names to the parsed values for them. RAISES DESCRIPTION tanjun . ParserError If the message could not be parsed.","title":"parse()"},{"location":"reference/abc/#tanjun.abc.MessageParser.validate_arg_keys","text":"validate_arg_keys ( callback_name , names ) Validate that callback's keyword arguments are all valid for this parser. PARAMETER DESCRIPTION callback_name The callback's name for use in raised errors. TYPE: str names Key names of the callback's keyword arguments. TYPE: collections . Container [ str ] RAISES DESCRIPTION ValueError If any of the parameter keys aren't valid for this parser.","title":"validate_arg_keys()"},{"location":"reference/abc/#tanjun.abc.SlashCommand","text":"Bases: BaseSlashCommand , abc . ABC , typing . Generic [ _CommandCallbackSigT ] A command that can be executed in a slash context.","title":"SlashCommand"},{"location":"reference/abc/#tanjun.abc.SlashCommand.callback","text":"callback () Callback which is called during execution.","title":"callback()"},{"location":"reference/abc/#tanjun.abc.SlashCommand.float_autocompletes","text":"float_autocompletes () Collection of the float option autocompletes.","title":"float_autocompletes()"},{"location":"reference/abc/#tanjun.abc.SlashCommand.int_autocompletes","text":"int_autocompletes () Collection of the integer option autocompletes.","title":"int_autocompletes()"},{"location":"reference/abc/#tanjun.abc.SlashCommand.str_autocompletes","text":"str_autocompletes () Collection of the string option autocompletes.","title":"str_autocompletes()"},{"location":"reference/abc/#tanjun.abc.SlashCommandGroup","text":"Bases: BaseSlashCommand , abc . ABC Standard interface of a slash command group. Note Unlike tanjun.abc.MessageCommandGroup , slash command groups do not have their own callback.","title":"SlashCommandGroup"},{"location":"reference/abc/#tanjun.abc.SlashCommandGroup.add_command","text":"add_command ( command ) Add a command to this group. PARAMETER DESCRIPTION command The command to add. TYPE: BaseSlashCommand RETURNS DESCRIPTION Self The command group instance to enable chained calls.","title":"add_command()"},{"location":"reference/abc/#tanjun.abc.SlashCommandGroup.commands","text":"commands () Collection of the commands in this group.","title":"commands()"},{"location":"reference/abc/#tanjun.abc.SlashCommandGroup.remove_command","text":"remove_command ( command ) Remove a command from this group. PARAMETER DESCRIPTION command The command to remove. TYPE: BaseSlashCommand RAISES DESCRIPTION ValueError If the provided command isn't found. RETURNS DESCRIPTION Self The command group instance to enable chained calls.","title":"remove_command()"},{"location":"reference/abc/#tanjun.abc.SlashCommandGroup.with_command","text":"with_command ( command ) Add a command to this group through a decorator call. PARAMETER DESCRIPTION command The command to add. TYPE: _BaseSlashCommandT RETURNS DESCRIPTION BaseSlashCommand The added command.","title":"with_command()"},{"location":"reference/abc/#tanjun.abc.SlashContext","text":"Bases: AppCommandContext , abc . ABC Interface of a slash command specific context.","title":"SlashContext"},{"location":"reference/abc/#tanjun.abc.SlashContext.command","text":"command () Command that was invoked. Note This should always be set during command check execution and command hook execution but isn't guaranteed for client callbacks nor component/client checks.","title":"command()"},{"location":"reference/abc/#tanjun.abc.SlashContext.options","text":"options () Mapping of option names to the values provided for them.","title":"options()"},{"location":"reference/abc/#tanjun.abc.SlashContext.set_command","text":"set_command ( command ) Set the command for this context. PARAMETER DESCRIPTION command The command this context is for. TYPE: typing . Optional [ BaseSlashCommand ]","title":"set_command()"},{"location":"reference/abc/#tanjun.abc.SlashContext.type","text":"type () Type of application command this context is for.","title":"type()"},{"location":"reference/abc/#tanjun.abc.SlashOption","text":"Bases: abc . ABC Interface of slash command option with extra logic to help resolve it.","title":"SlashOption"},{"location":"reference/abc/#tanjun.abc.SlashOption.boolean","text":"boolean () Get the boolean value of this option. RAISES DESCRIPTION TypeError If tanjun.abc.SlashOption.type is not BOOLEAN.","title":"boolean()"},{"location":"reference/abc/#tanjun.abc.SlashOption.float","text":"float () Get the float value of this option. RAISES DESCRIPTION TypeError If tanjun.abc.SlashOption.type is not FLOAT. ValueError If called on the focused option for an autocomplete interaction when it's a malformed (incomplete) float.","title":"float()"},{"location":"reference/abc/#tanjun.abc.SlashOption.integer","text":"integer () Get the integer value of this option. RAISES DESCRIPTION TypeError If tanjun.abc.SlashOption.type is not INTEGER. ValueError If called on the focused option for an autocomplete interaction when it's a malformed (incomplete) integer.","title":"integer()"},{"location":"reference/abc/#tanjun.abc.SlashOption.name","text":"name () Name of this option.","title":"name()"},{"location":"reference/abc/#tanjun.abc.SlashOption.resolve_to_attachment","text":"resolve_to_attachment () Resolve this option to a channel object. RETURNS DESCRIPTION hikari . Attachment The attachment object. RAISES DESCRIPTION TypeError If the option is not an attachment.","title":"resolve_to_attachment()"},{"location":"reference/abc/#tanjun.abc.SlashOption.resolve_to_channel","text":"resolve_to_channel () Resolve this option to a channel object. RETURNS DESCRIPTION hikari . InteractionChannel The channel object. RAISES DESCRIPTION TypeError If the option is not a channel.","title":"resolve_to_channel()"},{"location":"reference/abc/#tanjun.abc.SlashOption.resolve_to_member","text":"resolve_to_member ( * , default = Ellipsis ) Resolve this option to a member object. PARAMETER DESCRIPTION default The default value to return if this option cannot be resolved. If this is not provided, this method will raise a TypeError if this option cannot be resolved. TYPE: _T DEFAULT: Ellipsis RETURNS DESCRIPTION hikari . InteractionMember | _T The member object or default if it was provided and this option was a user type but had no member. RAISES DESCRIPTION LookupError If no member was found for this option and a default wasn't provided. This includes if the option is a mentionable type which targets a member-less user. This could happen if the user isn't in the current guild or if this command was executed in a DM and this option should still be resolvable to a user. TypeError If the option is not a user option and a default wasn't provided. This includes if the option is a mentionable type but doesn't target a user.","title":"resolve_to_member()"},{"location":"reference/abc/#tanjun.abc.SlashOption.resolve_to_mentionable","text":"resolve_to_mentionable () Resolve this option to a mentionable object. RETURNS DESCRIPTION hikari . Role | hikari . User | hikari . Member The mentionable object. RAISES DESCRIPTION TypeError If the option is not a mentionable, user or role type.","title":"resolve_to_mentionable()"},{"location":"reference/abc/#tanjun.abc.SlashOption.resolve_to_role","text":"resolve_to_role () Resolve this option to a role object. RETURNS DESCRIPTION hikari . Role The role object. RAISES DESCRIPTION TypeError If the option is not a role. This includes mentionable options which point towards a user.","title":"resolve_to_role()"},{"location":"reference/abc/#tanjun.abc.SlashOption.resolve_to_user","text":"resolve_to_user () Resolve this option to a user object. Note This will resolve to a hikari.guilds.Member first if the relevant command was executed within a guild and the option targeted one of the guild's members, otherwise it will resolve to hikari.users.User . It's also worth noting that hikari.Member inherits from hikari.User meaning that the return value of this can always be treated as a user. RETURNS DESCRIPTION hikari . User | hikari . Member The user object. RAISES DESCRIPTION TypeError If the option is not a user. This includes mentionable options which point towards a role.","title":"resolve_to_user()"},{"location":"reference/abc/#tanjun.abc.SlashOption.resolve_value","text":"resolve_value () Resolve this option to an object value. RETURNS DESCRIPTION hikari . Attachment | hikari . InteractionChannel | hikari . InteractionMember | hikari . Role | hikari . User The object value of this option. RAISES DESCRIPTION TypeError If the option isn't resolvable.","title":"resolve_value()"},{"location":"reference/abc/#tanjun.abc.SlashOption.snowflake","text":"snowflake () Get the ID of this option. RAISES DESCRIPTION TypeError If tanjun.abc.SlashOption.type is not one of CHANNEL, MENTIONABLE, ROLE or USER.","title":"snowflake()"},{"location":"reference/abc/#tanjun.abc.SlashOption.string","text":"string () Get the string value of this option. RAISES DESCRIPTION TypeError If tanjun.abc.SlashOption.type is not STRING.","title":"string()"},{"location":"reference/abc/#tanjun.abc.SlashOption.type","text":"type () Type of this option.","title":"type()"},{"location":"reference/abc/#tanjun.abc.SlashOption.value","text":"value () Value provided for this option. Note For discord entity option types (user, member, channel and role) this will be the entity's ID.","title":"value()"},{"location":"reference/annotations/","text":"tanjun.annotations # Parameter annotation based strategy for declaring slash and message command arguments. Community Resources: An alternative implementation for slash commands (which relies more on documentation parsing) can be found at https://github.com/thesadru/tanchi . Attachment module-attribute # Attachment = typing . Annotated [ hikari . Attachment , _OptionMarker ( hikari . Attachment )] An argument which accepts a file. Warning This is currently only supported for slash commands. Bool module-attribute # Bool = typing . Annotated [ bool , _OptionMarker ( bool )] An argument which takes a bool-like value. Channel module-attribute # Channel = typing . Annotated [ hikari . PartialChannel , _OptionMarker ( hikari . PartialChannel )] An argument which takes a channel. hikari.InteractionChannel will be passed for options typed as this when being called as a slash command. Color module-attribute # Color = Converted [ conversion . to_color ] An argument which takes a color. Colour module-attribute # Colour = Color An argument which takes a colour. Datetime module-attribute # Datetime = Converted [ conversion . to_datetime ] An argument which takes a datetime. Float module-attribute # Float = typing . Annotated [ float , _OptionMarker ( float )] An argument which takes a floating point number. Int module-attribute # Int = typing . Annotated [ int , _OptionMarker ( int )] An argument which takes an integer. InteractionChannel module-attribute # InteractionChannel = typing . Annotated [ hikari . InteractionChannel , _OptionMarker ( hikari . InteractionChannel )] An argument which takes a channel with interaction specific metadata. Warning This is only supported for slash commands and will not work for message commands (unlike annotations.Channel ). InteractionMember module-attribute # InteractionMember = typing . Annotated [ hikari . InteractionMember , _OptionMarker ( hikari . InteractionMember )] An argument which takes a guild member with interaction specific metadata. Warning This is only supported for slash commands and will not work for message commands (unlike annotations.Member ). Member module-attribute # Member = typing . Annotated [ hikari . Member , _OptionMarker ( hikari . Member )] An argument which takes a guild member. hikari.InteractionMember will be passed for options typed as this when being called as a slash command. Mentionable module-attribute # Mentionable = typing . Annotated [ typing . Union [ hikari . User , hikari . Role ], _OptionMarker ( _MentionableUnion )] An argument which takes a user or role. Role module-attribute # Role = typing . Annotated [ hikari . Role , _OptionMarker ( hikari . Role )] An argument which takes a role. Snowflake module-attribute # Snowflake = Converted [ conversion . parse_snowflake ] An argument which takes a snowflake. Str module-attribute # Str = typing . Annotated [ str , _OptionMarker ( str )] An argument which takes string input. User module-attribute # User = typing . Annotated [ hikari . User , _OptionMarker ( hikari . User )] An argument which takes a user. Choices # Bases: _ConfigIdentifier Assign up to 25 choices for a slash command option. Warning This is currently ignored for message commands and is only valid for string, integer and float options. Examples: @with_annotated_args @tanjun . as_slash_command ( \"beep\" , \"meow\" ) async def command ( ctx : tanjun . abc . Context , location : Annotated [ Int , \"where do you live?\" , Choices ( \"London\" , \"Paradise\" , \"Nowhere\" )], ) -> None : raise NotImplementedError __init__ # __init__ ( mapping = (), / , ** kwargs ) Create a choices instance. PARAMETER DESCRIPTION mapping Either a mapping of names to the choices values or a sequence of tuple[name, value] or a sequence of choice values. TYPE: typing . Union [ collections . Mapping [ str , _ChoiceT ], collections . Sequence [ tuple [ str , _ChoiceT ]], collections . Sequence [ _ChoiceT ]] DEFAULT: () **kwargs Choice values. TYPE: _ChoiceT DEFAULT: {} choices property # choices () Mapping of up to 25 choices for the slash command option. Converted # Bases: _ConfigIdentifier Marked an argument as type Str with converters. Examples: @with_annotated_args @tanjun . as_slash_command ( \"beep\" , \"boop\" ) async def command ( ctx : tanjun . abc . SlashContext , argument : Annotated [ OtherType , Converted ( callback , other_callback ), \"description\" ] other_argument : Annotated [ Converted [ callback , other_callback ], \"description\" ], ) __init__ # __init__ ( converter , / , * other_converters ) Create a converted instance. PARAMETER DESCRIPTION converter The first converter this argument should use to handle values passed to it during parsing. Only the first converter to pass will be used. TYPE: collections . abc . Callable *other_converters Other first converter(s) this argument should use to handle values passed to it during parsing. Only the first converter to pass will be used. TYPE: collections . abc . Callable DEFAULT: () converters property # converters () A sequence of the converters. Default # Bases: _ConfigIdentifier Explicitly configure an argument's default. Examples: @with_annotated_args @tanjun . as_slash_command ( \"name\" , \"description\" ) async def command ( ctx : tanjun . abc . Context , argument : Annotated [ Str , Default ( \"\" ), \"description\" ], other_argument : Annotated [ Default [ Str , \"\" ], \"description\" ], ) -> None : ... @with_annotated_args @tanjun . as_slash_command ( \"name\" , \"description\" ) async def command ( ctx : tanjun . abc . Context , required_argument : Annotated [ Default [ Str ], \"description\" ] = \"yeet\" , other_required : Annotated [ Int , Default (), \"description\" ] = 123 , ) -> None : ... Passing an empty Default allows you to mark an argument that's optional in the signature as being a required option. __init__ # __init__ ( default = parsing . UNDEFINED ) Initialise a default. PARAMETER DESCRIPTION default The argument's default. If left as tanjun.parsing.UNDEFINED then the argument will be required regardless of the signature default. TYPE: typing . Union [ typing . Any , parsing . UndefinedT ] DEFAULT: parsing.UNDEFINED default property # default () The option's default. This will override the default in the signature for this parameter. Flag # Bases: _ConfigIdentifier Mark an argument as a flag/option for message command parsing. This indicates that the argument should be specified by name (e.g. --name ) rather than positionally for message parsing and doesn't effect slash command options. Examples: @with_annotated_args @tanjun . as_message_command ( \"message\" ) async def command ( ctx : tanjun . abc . MessageContext , flag_value : Annotated [ Bool , Flag ( empty_value = True , aliases = ( \"-f\" ,))] = False , ) -> None : raise NotImplementedError __init__ # __init__ ( * , aliases = None , default = parsing . UNDEFINED , empty_value = parsing . UNDEFINED ) Create a flag instance. PARAMETER DESCRIPTION aliases Other names the flag may be triggered by. This does not override the argument's name. TYPE: typing . Optional [ collections . Sequence [ str ]] DEFAULT: None default Deprecated argument used to specify the option's default. Use Default instead. TYPE: typing . Union [ typing . Any , parsing . UndefinedT ] DEFAULT: parsing.UNDEFINED empty_value Value to pass for the argument if the flag is provided without a value. If left undefined then an explicit value will always be needed. TYPE: typing . Union [ parsing . UndefinedT , typing . Any ] DEFAULT: parsing.UNDEFINED aliases property # aliases () The aliases set for this flag. These do not override the flag's name. default property # default () The flag's default. If not specified then the default in the signature for this argument will be used. empty_value property # empty_value () The value to pass for the argument if the flag is provided without a value. If this is undefined then a value will always need to be passed for the flag. Greedy # Bases: _ConfigIdentifier Mark an argument as \"greedy\" for message command parsing. This means that it'll consume the rest of the positional arguments, can only be applied to one positional argument and is no-op for slash commands and flags. Examples: @with_annotated_args @tanjun . as_message_command ( \"message\" ) async def command ( ctx : tanjun . abc . MessageContext , greedy_arg : Greedy [ Str ], other_greedy_arg : Annotated [ Str , Greedy ()], ) -> None : raise NotImplementedError Length # Bases: _ConfigIdentifier Define length restraints for a string option. Note Length constraints are applied before conversion for slash commands but after conversion for message commands. Examples: @with_annotated_args @tanjun . as_slash_command ( \"meow\" , \"blam\" ) async def command ( ctx : tanjun . abc . Context , max_and_min : typing . Annotated [ Str , Length ( 123 , 321 )], max_only : typing . Annotated [ Str , Length ( 123 )], generic_max_and_min : typing . Annotated [ Length [ 5 , 13 ], \"meow\" ], generic_max_only : typing . Annotated [ Length [ 21 ], \"meow\" ], ) -> None : raise NotImplementedError where Length[...] follows the same semantics as Length's __init__ . @with_annotated_args @tanjun . as_slash_command ( \"meow\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , argument : Annotated [ Str , range ( 5 , 100 ), \"description\" ], other_argument : Annotated [ Str , 4 : 64 , \"description\" ], ) -> None : raise NotImplementedError Alternatively, the slice syntax and range may be used to set the length restraints for a string argument (where the start is inclusive and stop is exclusive). These default to a min_length of 0 if the start isn't specified and ignores any specified step. __init__ # __init__ ( min_or_max_length , max_length = None ) Initialise a length constraint. PARAMETER DESCRIPTION min_or_max_length If max_length is left as None then this will be used as the maximum length and the minimum length will be 0 . TYPE: int max_length The maximum length this string argument can be. If not specified then min_or_max_length will be used as the max length. TYPE: typing . Optional [ int ] DEFAULT: None max_length property # max_length () The maximum length of this string option. min_length property # min_length () The minimum length of this string option. Max # Bases: _ConfigIdentifier Inclusive maximum value for a Float or Int argument. Examples: @with_annotated_args @tanjun . as_slash_command ( \"beep\" , \"meow\" ) async def command ( ctx : tanjun . abc . Context , age : Annotated [ Int , Max ( 130 ), \"How old are you?\" ], number : Annotated [ Max [ 130.2 ], \"description\" ], ) -> None : raise NotImplementedError The option's type is inferred from the passed value when using Max as a generic type hint (e.g. Max[18] ). __init__ # __init__ ( value ) Create an argument maximum value. PARAMETER DESCRIPTION value The maximum allowed value allowed for an argument. TYPE: typing . Union [ int , float ] value property # value () The maximum allowed value. Min # Bases: _ConfigIdentifier Inclusive minimum value for a Float or Int argument. Examples: @with_annotated_args @tanjun . as_slash_command ( \"beep\" , \"meow\" ) async def command ( ctx : tanjun . abc . Context , age : Annotated [ Int , Min ( 13 ), \"How old are you?\" ], number : Annotated [ Min [ 13.9 ], \"description\" ], ) -> None : raise NotImplementedError The option's type is inferred from the passed value when using Min as a generic type hint (e.g. Min[69.4] ). __init__ # __init__ ( value ) Create an argument minimum value. PARAMETER DESCRIPTION value The minimum value allowed for an argument. TYPE: typing . Union [ int , float ] value property # value () The minimum allowed value. Name # Bases: _ConfigIdentifier Override the inferred name used to declare an option. Examples: @with_annotated_args ( follow_wrapped = True ) @tanjun . as_slash_command ( \"meow\" , \"nyaa\" ) @tanjun . as_message_command ( \"meow\" ) async def command ( ctx : tanjun . abc . Context , resource_type : Annotated [ Str , Name ( \"type\" ), \"The type of resource to get.\" ], ) -> None : raise NotImplementedError __init__ # __init__ ( both = None , / , * , message = None , slash = None ) Create an argument name override. PARAMETER DESCRIPTION both If provided, the name to use for this option in message and slash commands. This will be reformatted a bit for message commands (prefixed with -- and .replace(\"_\", \"-\") ) and is only used for message flag options. TYPE: typing . Optional [ str ] DEFAULT: None message The name to use for this option in message commands. This takes priority over both , is not reformatted and only is only used for flag options. TYPE: typing . Optional [ str ] DEFAULT: None slash The name to use for this option in slash commands. This takes priority over both . TYPE: typing . Optional [ str ] DEFAULT: None message_name property # message_name () The name to use for this option in message commands. slash_name property # slash_name () The name to use for this option in slash commands. Positional # Bases: _ConfigIdentifier Mark an argument as being passed positionally for message command parsing. Arguments will be positional by default (unless it has a default) and this allows for marking positional arguments as optional. This only effects message option parsing. Examples: @with_annotated_args @tanjun . as_message_command ( \"message\" ) async def command ( ctx : tanjun . abc . MessageContext , positional_arg : Positional [ Str ] = None , other_positional_arg : Annotated [ Str , Positional ()] = None , ) -> None : raise NotImplementedError __init__ # __init__ () Create a positional instance. Ranged # Bases: _ConfigIdentifier Declare the range limit for an Int or Float argument. Examples: @with_annotated_args ( follow_wrapped = True ) @tanjun . as_slash_command ( \"meow\" , \"nyaa\" ) @tanjun . as_message_command ( \"meow\" ) async def command ( ctx : tanjun . abc . Context , number_arg : Annotated [ Int , Ranged ( 0 , 69 ), \"description\" ], other_number_arg : Annotated [ Ranged [ 13.69 , 420.69 ], \"description\" ], ) -> None : raise NotImplementedError The option's type is inferred from whether integers or floats are passed when using Ranged as a generic type hint (e.g. Ranged[123, 666] ). @with_annotated_args @tanjun . as_slash_command ( \"meow\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , float_value : Annotated [ Float , 1.5 : 101.5 , \"description\" ], int_value : Annotated [ Int , range ( 5 , 100 ), \"description\" ], ) -> None : raise NotImplementedError Alternatively, the slice syntax and range may be used to set the range for a float or integer argument (where the start is inclusive and stop is exclusive). These default to a min_value of 0 if the start isn't specified and ignores any specified step. __init__ # __init__ ( min_value , max_value ) Create an argument range limit. PARAMETER DESCRIPTION min_value The minimum allowed value for this argument. TYPE: typing . Union [ int , float ] max_value The maximum allowed value for this argument. TYPE: typing . Union [ int , Float ] max_value property # max_value () The maximum allowed value for this argument. min_value property # min_value () The minimum allowed value for this argument. SnowflakeOr # Bases: _ConfigIdentifier Mark an argument as taking an object or its ID. This allows for the argument to be declared as taking the object for slash commands without requiring that the message command equivalent fetch the object each time for the following types: User Role Member Channel Mentionable Examples: @with_annotated_args ( follow_wrapped = True ) @tanjun . as_slash_command ( \"meow\" , \"nyaa\" ) @tanjun . as_message_command ( \"meow\" ) async def command ( ctx : tanjun . abc . Context , user : Annotated [ User , SnowflakeOr ( parse_id = parse_user_id ), \"The user to target.\" ], # The `parse_id` callback is automatically set to the mention format for # the passed type if applicable when using SnowflakeOr as a generic type-hint. role : Annotated [ Optional [ SnowflakeOr [ Role ]], \"The role to target.\" ] = None , ) -> None : user_id = hikari . Snowflake ( user ) __init__ # __init__ ( * , parse_id = conversion . parse_snowflake ) Create a snowflake or argument marker. PARAMETER DESCRIPTION parse_id The function used to parse the argument's ID. This can be used to restrain this to only accepting certain mention formats. TYPE: collections . Callable [[ str ], hikari . Snowflake ] DEFAULT: conversion.parse_snowflake parse_id property # parse_id () Callback used to parse this argument's ID. TheseChannels # Bases: _ConfigIdentifier Restrain the type of channels a channel argument can target. __init__ # __init__ ( channel_type , / , * other_types ) Create a channel argument restraint. PARAMETER DESCRIPTION channel_type A channel type to restrain this argument by. TYPE: _ChannelTypeIsh *other_types Other channel types to restrain this argument by. TYPE: _ChannelTypeIsh DEFAULT: () channel_types property # channel_types () Sequence of the channel types this is constrained by. parse_annotated_args # parse_annotated_args ( command , / , * , descriptions = None , follow_wrapped = False ) Set a command's arguments based on its signature. For more information on how this works see tanjun.annotations.with_annotated_args which acts as the decorator equivalent of this. The only difference is function allows passing a mapping of argument descriptions. PARAMETER DESCRIPTION command The message or slash command to set the arguments for. TYPE: typing . Union [ slash . SlashCommand [ typing . Any ], message . MessageCommand [ typing . Any ]] descriptions Mapping of descriptions to use for this command's slash command options. If an option isn't included here then this will default back to getting the description from its annotation. TYPE: typing . Optional [ typing . Mapping [ str , str ]] DEFAULT: None follow_wrapped Whether this should also set the arguments on any other command objects this wraps in a decorator call chain. TYPE: bool DEFAULT: False with_annotated_args # with_annotated_args ( command = None , / , * , follow_wrapped = False ) Set a command's arguments based on its signature. To declare arguments a you will have to do one of two things: Using any of the following types as an argument's type-hint (this may be as the first argument to typing.Annotated ) will mark it as injected: tanjun.annotations.Attachment * tanjun.annotations.Bool tanjun.annotations.Channel tanjun.annotations.InteractionChannel * tanjun.annotations.Color / tanjun.annotations.Colour tanjun.annotations.Datetime tanjun.annotations.Float tanjun.annotations.Int tanjun.annotations.Member tanjun.annotations.InteractionMember * tanjun.annotations.Mentionable tanjun.annotations.Role tanjun.annotations.Snowflake tanjun.annotations.Str tanjun.annotations.User * These types are specific to slash commands and will raise an exception when set for a message command's parameter with no real default. @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_slash_command ( \"name\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , # Here the option's description is passed as a string to Annotated: # this is necessary for slash commands but ignored for message commands. name : Annotated [ Str , \"The character's name\" ], # `= False` declares this field as optional, with it defaulting to `False` # if not specified. lawyer : Annotated [ Bool , \"Whether they're a lawyer\" ] = False , ) -> None : raise NotImplementedError By assigning tanjun.annotations.Converted ... Either as one of the other arguments to typing.Annotated @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_message_command ( \"e\" ) @tanjun . as_slash_command ( \"e\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , value : Annotated [ OtherType , Converted ( parse_value ), \"description\" ], ) -> None : raise NotImplementedError or as the type hint @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_message_command ( \"e\" ) @tanjun . as_slash_command ( \"e\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , value : Annotated [ Converted [ CustomType . from_str ], \"description\" ], ) -> None : raise NotImplementedError It should be noted that wrapping in typing.Annotated isn't necessary for message commands options as they don't have descriptions. async def message_command ( ctx : tanjun . abc . MessageContext , name : Str , converted : Converted [ Type . from_str ], enable : typing . Optional [ Bool ] = None , ) -> None : ... PARAMETER DESCRIPTION command The message or slash command to set the arguments for. TYPE: tanjun . SlashCommand | tanjun . MessageCommand DEFAULT: None follow_wrapped Whether this should also set the arguments on any other command objects this wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . SlashCommand | tanjun . MessageCommand The command object to enable using this as a decorator.","title":"tanjun.annotations"},{"location":"reference/annotations/#tanjunannotations","text":"Parameter annotation based strategy for declaring slash and message command arguments. Community Resources: An alternative implementation for slash commands (which relies more on documentation parsing) can be found at https://github.com/thesadru/tanchi .","title":"tanjun.annotations"},{"location":"reference/annotations/#tanjun.annotations.Attachment","text":"Attachment = typing . Annotated [ hikari . Attachment , _OptionMarker ( hikari . Attachment )] An argument which accepts a file. Warning This is currently only supported for slash commands.","title":"Attachment"},{"location":"reference/annotations/#tanjun.annotations.Bool","text":"Bool = typing . Annotated [ bool , _OptionMarker ( bool )] An argument which takes a bool-like value.","title":"Bool"},{"location":"reference/annotations/#tanjun.annotations.Channel","text":"Channel = typing . Annotated [ hikari . PartialChannel , _OptionMarker ( hikari . PartialChannel )] An argument which takes a channel. hikari.InteractionChannel will be passed for options typed as this when being called as a slash command.","title":"Channel"},{"location":"reference/annotations/#tanjun.annotations.Color","text":"Color = Converted [ conversion . to_color ] An argument which takes a color.","title":"Color"},{"location":"reference/annotations/#tanjun.annotations.Colour","text":"Colour = Color An argument which takes a colour.","title":"Colour"},{"location":"reference/annotations/#tanjun.annotations.Datetime","text":"Datetime = Converted [ conversion . to_datetime ] An argument which takes a datetime.","title":"Datetime"},{"location":"reference/annotations/#tanjun.annotations.Float","text":"Float = typing . Annotated [ float , _OptionMarker ( float )] An argument which takes a floating point number.","title":"Float"},{"location":"reference/annotations/#tanjun.annotations.Int","text":"Int = typing . Annotated [ int , _OptionMarker ( int )] An argument which takes an integer.","title":"Int"},{"location":"reference/annotations/#tanjun.annotations.InteractionChannel","text":"InteractionChannel = typing . Annotated [ hikari . InteractionChannel , _OptionMarker ( hikari . InteractionChannel )] An argument which takes a channel with interaction specific metadata. Warning This is only supported for slash commands and will not work for message commands (unlike annotations.Channel ).","title":"InteractionChannel"},{"location":"reference/annotations/#tanjun.annotations.InteractionMember","text":"InteractionMember = typing . Annotated [ hikari . InteractionMember , _OptionMarker ( hikari . InteractionMember )] An argument which takes a guild member with interaction specific metadata. Warning This is only supported for slash commands and will not work for message commands (unlike annotations.Member ).","title":"InteractionMember"},{"location":"reference/annotations/#tanjun.annotations.Member","text":"Member = typing . Annotated [ hikari . Member , _OptionMarker ( hikari . Member )] An argument which takes a guild member. hikari.InteractionMember will be passed for options typed as this when being called as a slash command.","title":"Member"},{"location":"reference/annotations/#tanjun.annotations.Mentionable","text":"Mentionable = typing . Annotated [ typing . Union [ hikari . User , hikari . Role ], _OptionMarker ( _MentionableUnion )] An argument which takes a user or role.","title":"Mentionable"},{"location":"reference/annotations/#tanjun.annotations.Role","text":"Role = typing . Annotated [ hikari . Role , _OptionMarker ( hikari . Role )] An argument which takes a role.","title":"Role"},{"location":"reference/annotations/#tanjun.annotations.Snowflake","text":"Snowflake = Converted [ conversion . parse_snowflake ] An argument which takes a snowflake.","title":"Snowflake"},{"location":"reference/annotations/#tanjun.annotations.Str","text":"Str = typing . Annotated [ str , _OptionMarker ( str )] An argument which takes string input.","title":"Str"},{"location":"reference/annotations/#tanjun.annotations.User","text":"User = typing . Annotated [ hikari . User , _OptionMarker ( hikari . User )] An argument which takes a user.","title":"User"},{"location":"reference/annotations/#tanjun.annotations.Choices","text":"Bases: _ConfigIdentifier Assign up to 25 choices for a slash command option. Warning This is currently ignored for message commands and is only valid for string, integer and float options. Examples: @with_annotated_args @tanjun . as_slash_command ( \"beep\" , \"meow\" ) async def command ( ctx : tanjun . abc . Context , location : Annotated [ Int , \"where do you live?\" , Choices ( \"London\" , \"Paradise\" , \"Nowhere\" )], ) -> None : raise NotImplementedError","title":"Choices"},{"location":"reference/annotations/#tanjun.annotations.Choices.__init__","text":"__init__ ( mapping = (), / , ** kwargs ) Create a choices instance. PARAMETER DESCRIPTION mapping Either a mapping of names to the choices values or a sequence of tuple[name, value] or a sequence of choice values. TYPE: typing . Union [ collections . Mapping [ str , _ChoiceT ], collections . Sequence [ tuple [ str , _ChoiceT ]], collections . Sequence [ _ChoiceT ]] DEFAULT: () **kwargs Choice values. TYPE: _ChoiceT DEFAULT: {}","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.Choices.choices","text":"choices () Mapping of up to 25 choices for the slash command option.","title":"choices()"},{"location":"reference/annotations/#tanjun.annotations.Converted","text":"Bases: _ConfigIdentifier Marked an argument as type Str with converters. Examples: @with_annotated_args @tanjun . as_slash_command ( \"beep\" , \"boop\" ) async def command ( ctx : tanjun . abc . SlashContext , argument : Annotated [ OtherType , Converted ( callback , other_callback ), \"description\" ] other_argument : Annotated [ Converted [ callback , other_callback ], \"description\" ], )","title":"Converted"},{"location":"reference/annotations/#tanjun.annotations.Converted.__init__","text":"__init__ ( converter , / , * other_converters ) Create a converted instance. PARAMETER DESCRIPTION converter The first converter this argument should use to handle values passed to it during parsing. Only the first converter to pass will be used. TYPE: collections . abc . Callable *other_converters Other first converter(s) this argument should use to handle values passed to it during parsing. Only the first converter to pass will be used. TYPE: collections . abc . Callable DEFAULT: ()","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.Converted.converters","text":"converters () A sequence of the converters.","title":"converters()"},{"location":"reference/annotations/#tanjun.annotations.Default","text":"Bases: _ConfigIdentifier Explicitly configure an argument's default. Examples: @with_annotated_args @tanjun . as_slash_command ( \"name\" , \"description\" ) async def command ( ctx : tanjun . abc . Context , argument : Annotated [ Str , Default ( \"\" ), \"description\" ], other_argument : Annotated [ Default [ Str , \"\" ], \"description\" ], ) -> None : ... @with_annotated_args @tanjun . as_slash_command ( \"name\" , \"description\" ) async def command ( ctx : tanjun . abc . Context , required_argument : Annotated [ Default [ Str ], \"description\" ] = \"yeet\" , other_required : Annotated [ Int , Default (), \"description\" ] = 123 , ) -> None : ... Passing an empty Default allows you to mark an argument that's optional in the signature as being a required option.","title":"Default"},{"location":"reference/annotations/#tanjun.annotations.Default.__init__","text":"__init__ ( default = parsing . UNDEFINED ) Initialise a default. PARAMETER DESCRIPTION default The argument's default. If left as tanjun.parsing.UNDEFINED then the argument will be required regardless of the signature default. TYPE: typing . Union [ typing . Any , parsing . UndefinedT ] DEFAULT: parsing.UNDEFINED","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.Default.default","text":"default () The option's default. This will override the default in the signature for this parameter.","title":"default()"},{"location":"reference/annotations/#tanjun.annotations.Flag","text":"Bases: _ConfigIdentifier Mark an argument as a flag/option for message command parsing. This indicates that the argument should be specified by name (e.g. --name ) rather than positionally for message parsing and doesn't effect slash command options. Examples: @with_annotated_args @tanjun . as_message_command ( \"message\" ) async def command ( ctx : tanjun . abc . MessageContext , flag_value : Annotated [ Bool , Flag ( empty_value = True , aliases = ( \"-f\" ,))] = False , ) -> None : raise NotImplementedError","title":"Flag"},{"location":"reference/annotations/#tanjun.annotations.Flag.__init__","text":"__init__ ( * , aliases = None , default = parsing . UNDEFINED , empty_value = parsing . UNDEFINED ) Create a flag instance. PARAMETER DESCRIPTION aliases Other names the flag may be triggered by. This does not override the argument's name. TYPE: typing . Optional [ collections . Sequence [ str ]] DEFAULT: None default Deprecated argument used to specify the option's default. Use Default instead. TYPE: typing . Union [ typing . Any , parsing . UndefinedT ] DEFAULT: parsing.UNDEFINED empty_value Value to pass for the argument if the flag is provided without a value. If left undefined then an explicit value will always be needed. TYPE: typing . Union [ parsing . UndefinedT , typing . Any ] DEFAULT: parsing.UNDEFINED","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.Flag.aliases","text":"aliases () The aliases set for this flag. These do not override the flag's name.","title":"aliases()"},{"location":"reference/annotations/#tanjun.annotations.Flag.default","text":"default () The flag's default. If not specified then the default in the signature for this argument will be used.","title":"default()"},{"location":"reference/annotations/#tanjun.annotations.Flag.empty_value","text":"empty_value () The value to pass for the argument if the flag is provided without a value. If this is undefined then a value will always need to be passed for the flag.","title":"empty_value()"},{"location":"reference/annotations/#tanjun.annotations.Greedy","text":"Bases: _ConfigIdentifier Mark an argument as \"greedy\" for message command parsing. This means that it'll consume the rest of the positional arguments, can only be applied to one positional argument and is no-op for slash commands and flags. Examples: @with_annotated_args @tanjun . as_message_command ( \"message\" ) async def command ( ctx : tanjun . abc . MessageContext , greedy_arg : Greedy [ Str ], other_greedy_arg : Annotated [ Str , Greedy ()], ) -> None : raise NotImplementedError","title":"Greedy"},{"location":"reference/annotations/#tanjun.annotations.Length","text":"Bases: _ConfigIdentifier Define length restraints for a string option. Note Length constraints are applied before conversion for slash commands but after conversion for message commands. Examples: @with_annotated_args @tanjun . as_slash_command ( \"meow\" , \"blam\" ) async def command ( ctx : tanjun . abc . Context , max_and_min : typing . Annotated [ Str , Length ( 123 , 321 )], max_only : typing . Annotated [ Str , Length ( 123 )], generic_max_and_min : typing . Annotated [ Length [ 5 , 13 ], \"meow\" ], generic_max_only : typing . Annotated [ Length [ 21 ], \"meow\" ], ) -> None : raise NotImplementedError where Length[...] follows the same semantics as Length's __init__ . @with_annotated_args @tanjun . as_slash_command ( \"meow\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , argument : Annotated [ Str , range ( 5 , 100 ), \"description\" ], other_argument : Annotated [ Str , 4 : 64 , \"description\" ], ) -> None : raise NotImplementedError Alternatively, the slice syntax and range may be used to set the length restraints for a string argument (where the start is inclusive and stop is exclusive). These default to a min_length of 0 if the start isn't specified and ignores any specified step.","title":"Length"},{"location":"reference/annotations/#tanjun.annotations.Length.__init__","text":"__init__ ( min_or_max_length , max_length = None ) Initialise a length constraint. PARAMETER DESCRIPTION min_or_max_length If max_length is left as None then this will be used as the maximum length and the minimum length will be 0 . TYPE: int max_length The maximum length this string argument can be. If not specified then min_or_max_length will be used as the max length. TYPE: typing . Optional [ int ] DEFAULT: None","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.Length.max_length","text":"max_length () The maximum length of this string option.","title":"max_length()"},{"location":"reference/annotations/#tanjun.annotations.Length.min_length","text":"min_length () The minimum length of this string option.","title":"min_length()"},{"location":"reference/annotations/#tanjun.annotations.Max","text":"Bases: _ConfigIdentifier Inclusive maximum value for a Float or Int argument. Examples: @with_annotated_args @tanjun . as_slash_command ( \"beep\" , \"meow\" ) async def command ( ctx : tanjun . abc . Context , age : Annotated [ Int , Max ( 130 ), \"How old are you?\" ], number : Annotated [ Max [ 130.2 ], \"description\" ], ) -> None : raise NotImplementedError The option's type is inferred from the passed value when using Max as a generic type hint (e.g. Max[18] ).","title":"Max"},{"location":"reference/annotations/#tanjun.annotations.Max.__init__","text":"__init__ ( value ) Create an argument maximum value. PARAMETER DESCRIPTION value The maximum allowed value allowed for an argument. TYPE: typing . Union [ int , float ]","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.Max.value","text":"value () The maximum allowed value.","title":"value()"},{"location":"reference/annotations/#tanjun.annotations.Min","text":"Bases: _ConfigIdentifier Inclusive minimum value for a Float or Int argument. Examples: @with_annotated_args @tanjun . as_slash_command ( \"beep\" , \"meow\" ) async def command ( ctx : tanjun . abc . Context , age : Annotated [ Int , Min ( 13 ), \"How old are you?\" ], number : Annotated [ Min [ 13.9 ], \"description\" ], ) -> None : raise NotImplementedError The option's type is inferred from the passed value when using Min as a generic type hint (e.g. Min[69.4] ).","title":"Min"},{"location":"reference/annotations/#tanjun.annotations.Min.__init__","text":"__init__ ( value ) Create an argument minimum value. PARAMETER DESCRIPTION value The minimum value allowed for an argument. TYPE: typing . Union [ int , float ]","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.Min.value","text":"value () The minimum allowed value.","title":"value()"},{"location":"reference/annotations/#tanjun.annotations.Name","text":"Bases: _ConfigIdentifier Override the inferred name used to declare an option. Examples: @with_annotated_args ( follow_wrapped = True ) @tanjun . as_slash_command ( \"meow\" , \"nyaa\" ) @tanjun . as_message_command ( \"meow\" ) async def command ( ctx : tanjun . abc . Context , resource_type : Annotated [ Str , Name ( \"type\" ), \"The type of resource to get.\" ], ) -> None : raise NotImplementedError","title":"Name"},{"location":"reference/annotations/#tanjun.annotations.Name.__init__","text":"__init__ ( both = None , / , * , message = None , slash = None ) Create an argument name override. PARAMETER DESCRIPTION both If provided, the name to use for this option in message and slash commands. This will be reformatted a bit for message commands (prefixed with -- and .replace(\"_\", \"-\") ) and is only used for message flag options. TYPE: typing . Optional [ str ] DEFAULT: None message The name to use for this option in message commands. This takes priority over both , is not reformatted and only is only used for flag options. TYPE: typing . Optional [ str ] DEFAULT: None slash The name to use for this option in slash commands. This takes priority over both . TYPE: typing . Optional [ str ] DEFAULT: None","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.Name.message_name","text":"message_name () The name to use for this option in message commands.","title":"message_name()"},{"location":"reference/annotations/#tanjun.annotations.Name.slash_name","text":"slash_name () The name to use for this option in slash commands.","title":"slash_name()"},{"location":"reference/annotations/#tanjun.annotations.Positional","text":"Bases: _ConfigIdentifier Mark an argument as being passed positionally for message command parsing. Arguments will be positional by default (unless it has a default) and this allows for marking positional arguments as optional. This only effects message option parsing. Examples: @with_annotated_args @tanjun . as_message_command ( \"message\" ) async def command ( ctx : tanjun . abc . MessageContext , positional_arg : Positional [ Str ] = None , other_positional_arg : Annotated [ Str , Positional ()] = None , ) -> None : raise NotImplementedError","title":"Positional"},{"location":"reference/annotations/#tanjun.annotations.Positional.__init__","text":"__init__ () Create a positional instance.","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.Ranged","text":"Bases: _ConfigIdentifier Declare the range limit for an Int or Float argument. Examples: @with_annotated_args ( follow_wrapped = True ) @tanjun . as_slash_command ( \"meow\" , \"nyaa\" ) @tanjun . as_message_command ( \"meow\" ) async def command ( ctx : tanjun . abc . Context , number_arg : Annotated [ Int , Ranged ( 0 , 69 ), \"description\" ], other_number_arg : Annotated [ Ranged [ 13.69 , 420.69 ], \"description\" ], ) -> None : raise NotImplementedError The option's type is inferred from whether integers or floats are passed when using Ranged as a generic type hint (e.g. Ranged[123, 666] ). @with_annotated_args @tanjun . as_slash_command ( \"meow\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , float_value : Annotated [ Float , 1.5 : 101.5 , \"description\" ], int_value : Annotated [ Int , range ( 5 , 100 ), \"description\" ], ) -> None : raise NotImplementedError Alternatively, the slice syntax and range may be used to set the range for a float or integer argument (where the start is inclusive and stop is exclusive). These default to a min_value of 0 if the start isn't specified and ignores any specified step.","title":"Ranged"},{"location":"reference/annotations/#tanjun.annotations.Ranged.__init__","text":"__init__ ( min_value , max_value ) Create an argument range limit. PARAMETER DESCRIPTION min_value The minimum allowed value for this argument. TYPE: typing . Union [ int , float ] max_value The maximum allowed value for this argument. TYPE: typing . Union [ int , Float ]","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.Ranged.max_value","text":"max_value () The maximum allowed value for this argument.","title":"max_value()"},{"location":"reference/annotations/#tanjun.annotations.Ranged.min_value","text":"min_value () The minimum allowed value for this argument.","title":"min_value()"},{"location":"reference/annotations/#tanjun.annotations.SnowflakeOr","text":"Bases: _ConfigIdentifier Mark an argument as taking an object or its ID. This allows for the argument to be declared as taking the object for slash commands without requiring that the message command equivalent fetch the object each time for the following types: User Role Member Channel Mentionable Examples: @with_annotated_args ( follow_wrapped = True ) @tanjun . as_slash_command ( \"meow\" , \"nyaa\" ) @tanjun . as_message_command ( \"meow\" ) async def command ( ctx : tanjun . abc . Context , user : Annotated [ User , SnowflakeOr ( parse_id = parse_user_id ), \"The user to target.\" ], # The `parse_id` callback is automatically set to the mention format for # the passed type if applicable when using SnowflakeOr as a generic type-hint. role : Annotated [ Optional [ SnowflakeOr [ Role ]], \"The role to target.\" ] = None , ) -> None : user_id = hikari . Snowflake ( user )","title":"SnowflakeOr"},{"location":"reference/annotations/#tanjun.annotations.SnowflakeOr.__init__","text":"__init__ ( * , parse_id = conversion . parse_snowflake ) Create a snowflake or argument marker. PARAMETER DESCRIPTION parse_id The function used to parse the argument's ID. This can be used to restrain this to only accepting certain mention formats. TYPE: collections . Callable [[ str ], hikari . Snowflake ] DEFAULT: conversion.parse_snowflake","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.SnowflakeOr.parse_id","text":"parse_id () Callback used to parse this argument's ID.","title":"parse_id()"},{"location":"reference/annotations/#tanjun.annotations.TheseChannels","text":"Bases: _ConfigIdentifier Restrain the type of channels a channel argument can target.","title":"TheseChannels"},{"location":"reference/annotations/#tanjun.annotations.TheseChannels.__init__","text":"__init__ ( channel_type , / , * other_types ) Create a channel argument restraint. PARAMETER DESCRIPTION channel_type A channel type to restrain this argument by. TYPE: _ChannelTypeIsh *other_types Other channel types to restrain this argument by. TYPE: _ChannelTypeIsh DEFAULT: ()","title":"__init__()"},{"location":"reference/annotations/#tanjun.annotations.TheseChannels.channel_types","text":"channel_types () Sequence of the channel types this is constrained by.","title":"channel_types()"},{"location":"reference/annotations/#tanjun.annotations.parse_annotated_args","text":"parse_annotated_args ( command , / , * , descriptions = None , follow_wrapped = False ) Set a command's arguments based on its signature. For more information on how this works see tanjun.annotations.with_annotated_args which acts as the decorator equivalent of this. The only difference is function allows passing a mapping of argument descriptions. PARAMETER DESCRIPTION command The message or slash command to set the arguments for. TYPE: typing . Union [ slash . SlashCommand [ typing . Any ], message . MessageCommand [ typing . Any ]] descriptions Mapping of descriptions to use for this command's slash command options. If an option isn't included here then this will default back to getting the description from its annotation. TYPE: typing . Optional [ typing . Mapping [ str , str ]] DEFAULT: None follow_wrapped Whether this should also set the arguments on any other command objects this wraps in a decorator call chain. TYPE: bool DEFAULT: False","title":"parse_annotated_args()"},{"location":"reference/annotations/#tanjun.annotations.with_annotated_args","text":"with_annotated_args ( command = None , / , * , follow_wrapped = False ) Set a command's arguments based on its signature. To declare arguments a you will have to do one of two things: Using any of the following types as an argument's type-hint (this may be as the first argument to typing.Annotated ) will mark it as injected: tanjun.annotations.Attachment * tanjun.annotations.Bool tanjun.annotations.Channel tanjun.annotations.InteractionChannel * tanjun.annotations.Color / tanjun.annotations.Colour tanjun.annotations.Datetime tanjun.annotations.Float tanjun.annotations.Int tanjun.annotations.Member tanjun.annotations.InteractionMember * tanjun.annotations.Mentionable tanjun.annotations.Role tanjun.annotations.Snowflake tanjun.annotations.Str tanjun.annotations.User * These types are specific to slash commands and will raise an exception when set for a message command's parameter with no real default. @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_message_command ( \"name\" ) @tanjun . as_slash_command ( \"name\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , # Here the option's description is passed as a string to Annotated: # this is necessary for slash commands but ignored for message commands. name : Annotated [ Str , \"The character's name\" ], # `= False` declares this field as optional, with it defaulting to `False` # if not specified. lawyer : Annotated [ Bool , \"Whether they're a lawyer\" ] = False , ) -> None : raise NotImplementedError By assigning tanjun.annotations.Converted ... Either as one of the other arguments to typing.Annotated @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_message_command ( \"e\" ) @tanjun . as_slash_command ( \"e\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , value : Annotated [ OtherType , Converted ( parse_value ), \"description\" ], ) -> None : raise NotImplementedError or as the type hint @tanjun . with_annotated_args ( follow_wrapped = True ) @tanjun . as_message_command ( \"e\" ) @tanjun . as_slash_command ( \"e\" , \"description\" ) async def command ( ctx : tanjun . abc . SlashContext , value : Annotated [ Converted [ CustomType . from_str ], \"description\" ], ) -> None : raise NotImplementedError It should be noted that wrapping in typing.Annotated isn't necessary for message commands options as they don't have descriptions. async def message_command ( ctx : tanjun . abc . MessageContext , name : Str , converted : Converted [ Type . from_str ], enable : typing . Optional [ Bool ] = None , ) -> None : ... PARAMETER DESCRIPTION command The message or slash command to set the arguments for. TYPE: tanjun . SlashCommand | tanjun . MessageCommand DEFAULT: None follow_wrapped Whether this should also set the arguments on any other command objects this wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . SlashCommand | tanjun . MessageCommand The command object to enable using this as a decorator.","title":"with_annotated_args()"},{"location":"reference/checks/","text":"tanjun.checks # A collection of common standard checks designed for Tanjun commands. AuthorPermissionCheck # Bases: _Check Standard author permission check callback registered by tanjun.with_author_permission_check . This check will only pass if the current author has the specified permission. __init__ # __init__ ( permissions , / , * , error = None , error_message = \"You don't have the permissions required to use this command\" , halt_execution = False ) Initialise an author permission check. PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.AuthorPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"You don't have the permissions required to use this command\" halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False DmCheck # Bases: _Check Standard DM check callback registered by tanjun.with_dm_check . This check will only pass if the current channel is a DM channel. __init__ # __init__ ( * , error = None , error_message = 'Command can only be used in DMs' , halt_execution = False ) Initialise a DM check. PARAMETER DESCRIPTION error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.DmCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in DMs' halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False GuildCheck # Bases: _Check Standard guild check callback registered by tanjun.with_guild_check . This check will only pass if the current channel is in a guild. __init__ # __init__ ( * , error = None , error_message = 'Command can only be used in guild channels' , halt_execution = False ) Initialise a guild check. PARAMETER DESCRIPTION error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.GuildCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in guild channels' halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False NsfwCheck # Bases: _Check Standard NSFW check callback registered by tanjun.with_nsfw_check . This check will only pass if the current channel is NSFW. __init__ # __init__ ( * , error = None , error_message = 'Command can only be used in NSFW channels' , halt_execution = False ) Initialise a NSFW check. PARAMETER DESCRIPTION error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.NsfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in NSFW channels' halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False OwnPermissionCheck # Bases: _Check Standard own permission check callback registered by tanjun.with_own_permission_check . This check will only pass if the current bot user has the specified permission. __init__ # __init__ ( permissions , / , * , error = None , error_message = \"Bot doesn't have the permissions required to run this command\" , halt_execution = False ) Initialise a own permission check. PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"Bot doesn't have the permissions required to run this command\" halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False OwnerCheck # Bases: _Check Standard owner check callback registered by tanjun.with_owner_check . This check will only pass if the author of the command is a bot owner. __init__ # __init__ ( * , error = None , error_message = 'Only bot owners can use this command' , halt_execution = False ) Initialise an owner check. PARAMETER DESCRIPTION error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnerCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Only bot owners can use this command' halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False SfwCheck # Bases: _Check Standard SFW check callback registered by tanjun.with_sfw_check . This check will only pass if the current channel is SFW. __init__ # __init__ ( * , error = None , error_message = 'Command can only be used in SFW channels' , halt_execution = False ) Initialise a SFW check. PARAMETER DESCRIPTION error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.SfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in SFW channels' halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False all_checks # all_checks ( check , / , * checks ) Combine multiple check callbacks into a check which will only pass if all the callbacks pass. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . Context ], collections . abc . Coroutine [ typing . Any , typing . Any , bool ]] A check which will pass if all of the provided check callbacks pass. any_checks # any_checks ( check , / , * checks , error = None , error_message , halt_execution = False , suppress = ( errors . CommandError , errors . HaltExecution )) Combine multiple checks into a check which'll pass if any of the callbacks pass. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.any_check\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False suppress Tuple of the exceptions to suppress when a check fails. TYPE: tuple [ type [ Exception ], ...] DEFAULT: (errors.CommandError, errors.HaltExecution) RETURNS DESCRIPTION collections . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator which adds the generated check to a command. with_all_checks # with_all_checks ( check , / , * checks , follow_wrapped = False ) Add a check which will pass if all the provided checks pass through a decorator call. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . Context ], collections . abc . Coroutine [ typing . Any , typing . Any , bool ]] A check which will pass if all of the provided check callbacks pass. with_any_checks # with_any_checks ( check , / , * checks , error = None , error_message , follow_wrapped = False , halt_execution = False , suppress = ( errors . CommandError , errors . HaltExecution )) Add a check which'll pass if any of the provided checks pass through a decorator call. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.any_check\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False suppress Tuple of the exceptions to suppress when a check fails. TYPE: tuple [ type [ Exception ], ...] DEFAULT: (errors.CommandError, errors.HaltExecution) RETURNS DESCRIPTION collections . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator which adds the generated check to a command. with_author_permission_check # with_author_permission_check ( permissions , * , error = None , error_message = \"You don't have the permissions required to use this command\" , follow_wrapped = False , halt_execution = False ) Only let a command run if the author has certain permissions in the current channel. Note This will only pass for commands in DMs if permissions is valid for a DM context (e.g. can't have any moderation permissions) PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.AuthorPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"You don't have the permissions required to use this command\" follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check. with_check # with_check ( check , / , * , follow_wrapped = False ) Add a generic check to a command. PARAMETER DESCRIPTION check The check to add to this command. TYPE: tanjun . CheckSig follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check. with_dm_check # with_dm_check ( command = None , / , * , error = None , error_message = 'Command can only be used in DMs' , follow_wrapped = False , halt_execution = False ) Only let a command run in a DM channel. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.DmCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in DMs' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to. with_guild_check # with_guild_check ( command = None , / , * , error = None , error_message = 'Command can only be used in guild channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a guild channel. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.GuildCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in guild channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommanmd The command this check was added to. with_nsfw_check # with_nsfw_check ( command = None , / , * , error = None , error_message = 'Command can only be used in NSFW channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a channel that's marked as nsfw. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.NsfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in NSFW channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to. with_own_permission_check # with_own_permission_check ( permissions , * , error = None , error_message = \"Bot doesn't have the permissions required to run this command\" , follow_wrapped = False , halt_execution = False ) Only let a command run if we have certain permissions in the current channel. Note This will only pass for commands in DMs if permissions is valid for a DM context (e.g. can't have any moderation permissions) PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"Bot doesn't have the permissions required to run this command\" follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check. with_owner_check # with_owner_check ( command = None , / , * , error = None , error_message = 'Only bot owners can use this command' , follow_wrapped = False , halt_execution = False ) Only let a command run if it's being triggered by one of the bot's owners. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnerCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Only bot owners can use this command' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to. with_sfw_check # with_sfw_check ( command = None , / , * , error = None , error_message = 'Command can only be used in SFW channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a channel that's marked as sfw. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.SfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in SFW channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to.","title":"tanjun.checks"},{"location":"reference/checks/#tanjunchecks","text":"A collection of common standard checks designed for Tanjun commands.","title":"tanjun.checks"},{"location":"reference/checks/#tanjun.checks.AuthorPermissionCheck","text":"Bases: _Check Standard author permission check callback registered by tanjun.with_author_permission_check . This check will only pass if the current author has the specified permission.","title":"AuthorPermissionCheck"},{"location":"reference/checks/#tanjun.checks.AuthorPermissionCheck.__init__","text":"__init__ ( permissions , / , * , error = None , error_message = \"You don't have the permissions required to use this command\" , halt_execution = False ) Initialise an author permission check. PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.AuthorPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"You don't have the permissions required to use this command\" halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False","title":"__init__()"},{"location":"reference/checks/#tanjun.checks.DmCheck","text":"Bases: _Check Standard DM check callback registered by tanjun.with_dm_check . This check will only pass if the current channel is a DM channel.","title":"DmCheck"},{"location":"reference/checks/#tanjun.checks.DmCheck.__init__","text":"__init__ ( * , error = None , error_message = 'Command can only be used in DMs' , halt_execution = False ) Initialise a DM check. PARAMETER DESCRIPTION error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.DmCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in DMs' halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False","title":"__init__()"},{"location":"reference/checks/#tanjun.checks.GuildCheck","text":"Bases: _Check Standard guild check callback registered by tanjun.with_guild_check . This check will only pass if the current channel is in a guild.","title":"GuildCheck"},{"location":"reference/checks/#tanjun.checks.GuildCheck.__init__","text":"__init__ ( * , error = None , error_message = 'Command can only be used in guild channels' , halt_execution = False ) Initialise a guild check. PARAMETER DESCRIPTION error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.GuildCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in guild channels' halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False","title":"__init__()"},{"location":"reference/checks/#tanjun.checks.NsfwCheck","text":"Bases: _Check Standard NSFW check callback registered by tanjun.with_nsfw_check . This check will only pass if the current channel is NSFW.","title":"NsfwCheck"},{"location":"reference/checks/#tanjun.checks.NsfwCheck.__init__","text":"__init__ ( * , error = None , error_message = 'Command can only be used in NSFW channels' , halt_execution = False ) Initialise a NSFW check. PARAMETER DESCRIPTION error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.NsfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in NSFW channels' halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False","title":"__init__()"},{"location":"reference/checks/#tanjun.checks.OwnPermissionCheck","text":"Bases: _Check Standard own permission check callback registered by tanjun.with_own_permission_check . This check will only pass if the current bot user has the specified permission.","title":"OwnPermissionCheck"},{"location":"reference/checks/#tanjun.checks.OwnPermissionCheck.__init__","text":"__init__ ( permissions , / , * , error = None , error_message = \"Bot doesn't have the permissions required to run this command\" , halt_execution = False ) Initialise a own permission check. PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"Bot doesn't have the permissions required to run this command\" halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False","title":"__init__()"},{"location":"reference/checks/#tanjun.checks.OwnerCheck","text":"Bases: _Check Standard owner check callback registered by tanjun.with_owner_check . This check will only pass if the author of the command is a bot owner.","title":"OwnerCheck"},{"location":"reference/checks/#tanjun.checks.OwnerCheck.__init__","text":"__init__ ( * , error = None , error_message = 'Only bot owners can use this command' , halt_execution = False ) Initialise an owner check. PARAMETER DESCRIPTION error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnerCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Only bot owners can use this command' halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False","title":"__init__()"},{"location":"reference/checks/#tanjun.checks.SfwCheck","text":"Bases: _Check Standard SFW check callback registered by tanjun.with_sfw_check . This check will only pass if the current channel is SFW.","title":"SfwCheck"},{"location":"reference/checks/#tanjun.checks.SfwCheck.__init__","text":"__init__ ( * , error = None , error_message = 'Command can only be used in SFW channels' , halt_execution = False ) Initialise a SFW check. PARAMETER DESCRIPTION error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.SfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in SFW channels' halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False","title":"__init__()"},{"location":"reference/checks/#tanjun.checks.all_checks","text":"all_checks ( check , / , * checks ) Combine multiple check callbacks into a check which will only pass if all the callbacks pass. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . Context ], collections . abc . Coroutine [ typing . Any , typing . Any , bool ]] A check which will pass if all of the provided check callbacks pass.","title":"all_checks()"},{"location":"reference/checks/#tanjun.checks.any_checks","text":"any_checks ( check , / , * checks , error = None , error_message , halt_execution = False , suppress = ( errors . CommandError , errors . HaltExecution )) Combine multiple checks into a check which'll pass if any of the callbacks pass. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.any_check\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False suppress Tuple of the exceptions to suppress when a check fails. TYPE: tuple [ type [ Exception ], ...] DEFAULT: (errors.CommandError, errors.HaltExecution) RETURNS DESCRIPTION collections . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator which adds the generated check to a command.","title":"any_checks()"},{"location":"reference/checks/#tanjun.checks.with_all_checks","text":"with_all_checks ( check , / , * checks , follow_wrapped = False ) Add a check which will pass if all the provided checks pass through a decorator call. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . Context ], collections . abc . Coroutine [ typing . Any , typing . Any , bool ]] A check which will pass if all of the provided check callbacks pass.","title":"with_all_checks()"},{"location":"reference/checks/#tanjun.checks.with_any_checks","text":"with_any_checks ( check , / , * checks , error = None , error_message , follow_wrapped = False , halt_execution = False , suppress = ( errors . CommandError , errors . HaltExecution )) Add a check which'll pass if any of the provided checks pass through a decorator call. This ensures that the callbacks are run in the order they were supplied in rather than concurrently. PARAMETER DESCRIPTION check The first check callback to combine. TYPE: tanjun . CheckSig *checks Additional check callbacks to combine. TYPE: tanjun . CheckSig DEFAULT: () error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.any_check\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False suppress Tuple of the exceptions to suppress when a check fails. TYPE: tuple [ type [ Exception ], ...] DEFAULT: (errors.CommandError, errors.HaltExecution) RETURNS DESCRIPTION collections . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator which adds the generated check to a command.","title":"with_any_checks()"},{"location":"reference/checks/#tanjun.checks.with_author_permission_check","text":"with_author_permission_check ( permissions , * , error = None , error_message = \"You don't have the permissions required to use this command\" , follow_wrapped = False , halt_execution = False ) Only let a command run if the author has certain permissions in the current channel. Note This will only pass for commands in DMs if permissions is valid for a DM context (e.g. can't have any moderation permissions) PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.AuthorPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"You don't have the permissions required to use this command\" follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check.","title":"with_author_permission_check()"},{"location":"reference/checks/#tanjun.checks.with_check","text":"with_check ( check , / , * , follow_wrapped = False ) Add a generic check to a command. PARAMETER DESCRIPTION check The check to add to this command. TYPE: tanjun . CheckSig follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check.","title":"with_check()"},{"location":"reference/checks/#tanjun.checks.with_dm_check","text":"with_dm_check ( command = None , / , * , error = None , error_message = 'Command can only be used in DMs' , follow_wrapped = False , halt_execution = False ) Only let a command run in a DM channel. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.DmCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in DMs' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to.","title":"with_dm_check()"},{"location":"reference/checks/#tanjun.checks.with_guild_check","text":"with_guild_check ( command = None , / , * , error = None , error_message = 'Command can only be used in guild channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a guild channel. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.GuildCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in guild channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommanmd The command this check was added to.","title":"with_guild_check()"},{"location":"reference/checks/#tanjun.checks.with_nsfw_check","text":"with_nsfw_check ( command = None , / , * , error = None , error_message = 'Command can only be used in NSFW channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a channel that's marked as nsfw. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.NsfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in NSFW channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to.","title":"with_nsfw_check()"},{"location":"reference/checks/#tanjun.checks.with_own_permission_check","text":"with_own_permission_check ( permissions , * , error = None , error_message = \"Bot doesn't have the permissions required to run this command\" , follow_wrapped = False , halt_execution = False ) Only let a command run if we have certain permissions in the current channel. Note This will only pass for commands in DMs if permissions is valid for a DM context (e.g. can't have any moderation permissions) PARAMETER DESCRIPTION permissions The permission(s) required for this command to run. TYPE: typing . Union [ hikari . Permissions , int ] error Callback used to create a custom error to raise if the check fails. This should take 1 positional argument of type hikari.permissions.Permissions which represents the missing permissions required for this command to run. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ hikari . Permissions ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnPermissionCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: \"Bot doesn't have the permissions required to run this command\" follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A command decorator callback which adds the check.","title":"with_own_permission_check()"},{"location":"reference/checks/#tanjun.checks.with_owner_check","text":"with_owner_check ( command = None , / , * , error = None , error_message = 'Only bot owners can use this command' , follow_wrapped = False , halt_execution = False ) Only let a command run if it's being triggered by one of the bot's owners. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.OwnerCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Only bot owners can use this command' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to.","title":"with_owner_check()"},{"location":"reference/checks/#tanjun.checks.with_sfw_check","text":"with_sfw_check ( command = None , / , * , error = None , error_message = 'Command can only be used in SFW channels' , follow_wrapped = False , halt_execution = False ) Only let a command run in a channel that's marked as sfw. PARAMETER DESCRIPTION command The command to add this check to. TYPE: tanjun . abc . ExecutableCommand | None DEFAULT: None error Callback used to create a custom error to raise if the check fails. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. Setting this to None will disable the error message allowing the command search to continue. This supports localisation and uses the check name \"tanjun.SfwCheck\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ], None] DEFAULT: 'Command can only be used in SFW channels' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False halt_execution Whether this check should raise tanjun.HaltExecution to end the execution search when it fails instead of returning False . This takes priority over error_message . TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command this check was added to.","title":"with_sfw_check()"},{"location":"reference/clients/","text":"tanjun.clients # Standard Tanjun client. ClientCallbackNames module-attribute # ClientCallbackNames = tanjun . ClientCallbackNames Alias of tanjun.abc.ClientCallbackNames . PrefixGetterSig module-attribute # PrefixGetterSig = collections . Callable [ Ellipsis , collections . Coroutine [ typing . Any , typing . Any , collections . Iterable [ str ]]] Type hint of a callable used to get the prefix(es) for a specific guild. This should be an asynchronous callable which returns an iterable of strings. Note While dependency injection is supported for this, the first positional argument will always be a tanjun.abc.MessageContext . Client # Bases: tanjun . Client Tanjun's standard tanjun.abc.Client implementation. This implementation supports dependency injection for checks, command callbacks, prefix getters and event listeners. For more information on how this works see alluka . When manually managing the lifetime of the client the linked rest app or bot must always be started before the Tanjun client. Note By default this client includes a parser error handling hook which will by overwritten if you call tanjun.Client.set_hooks . __init__ # __init__ ( rest , * , cache = None , events = None , server = None , shards = None , voice = None , event_managed = False , injector = None , mention_prefix = False , set_global_commands = False , declare_global_commands = False , command_ids = None , message_ids = None , user_ids = None , _stack_level = 0 ) Initialise a Tanjun client. Note For a quicker way to initiate this client around a standard bot aware client, see tanjun.Client.from_gateway_bot and tanjun.Client.from_rest_bot . PARAMETER DESCRIPTION rest The Hikari REST client this will use. TYPE: hikari . api . RESTClient cache The Hikari cache client this will use if applicable. TYPE: typing . Optional [ hikari . api . Cache ] DEFAULT: None events The Hikari event manager client this will use if applicable. This is necessary for message command dispatch and will also be necessary for interaction command dispatch if server isn't provided. TYPE: typing . Optional [ hikari . api . EventManager ] DEFAULT: None server The Hikari interaction server client this will use if applicable. This is used for interaction command dispatch if interaction events aren't being received from the event manager. TYPE: typing . Optional [ hikari . api . InteractionServer ] DEFAULT: None shards The Hikari shard aware client this will use if applicable. TYPE: typing . Optional [ hikari . ShardAware ] DEFAULT: None voice The Hikari voice component this will use if applicable. TYPE: typing . Optional [ hikari . api . VoiceComponent ] DEFAULT: None event_managed Whether or not this client is managed by the event manager. An event managed client will be automatically started and closed based on Hikari's lifetime events. This can only be passed as True if events is also provided. TYPE: bool DEFAULT: False injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None mention_prefix Whether or not mention prefixes should be automatically set when this client is first started. It should be noted that this only applies to message commands. TYPE: bool DEFAULT: False declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None RAISES DESCRIPTION ValueError Raises for the following reasons: If event_managed is True when event_manager is None . If command_ids is passed when multiple guild ids are provided for declare_global_commands . If command_ids is passed when declare_global_commands is False . add_check # add_check ( check ) Add a generic check to this client. This will be applied to both message and slash command execution. PARAMETER DESCRIPTION check The check to add. This may be either synchronous or asynchronous and must take one positional argument of type tanjun.abc.Context with dependency injection being supported for its keyword arguments. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self The client instance to enable chained calls. add_component # add_component ( component ) Add a component to this client. PARAMETER DESCRIPTION component The component to move to this client. TYPE: tanjun . Component RETURNS DESCRIPTION Self The client instance to allow chained calls. RAISES DESCRIPTION ValueError If the component's name is already registered. add_prefix # add_prefix ( prefixes ) Add a prefix used to filter message command calls. This will be matched against the first character(s) in a message's content to determine whether the message command search stage of execution should be initiated. PARAMETER DESCRIPTION prefixes Either a single string or an iterable of strings to be used as prefixes. TYPE: typing . Union [ collections . Iterable [ str ], str ] RETURNS DESCRIPTION Self The client instance to enable chained calls. checks property # checks () Collection of the level tanjun.abc.Context checks registered to this client. Note These may be taking advantage of the standard dependency injection. close async # close ( * , deregister_listeners = True ) Close the client. RAISES DESCRIPTION RuntimeError If the client isn't running. fetch_rest_application_id async # fetch_rest_application_id () Fetch the ID of the application this client is linked to. RETURNS DESCRIPTION hikari . Snowflake The application ID of the application this client is linked to. from_gateway_bot classmethod # from_gateway_bot ( bot , / , * , event_managed = True , injector = None , mention_prefix = False , declare_global_commands = False , set_global_commands = False , command_ids = None , message_ids = None , user_ids = None ) Build a tanjun.Client from a hikari.traits.GatewayBotAware instance. Note This defaults the client to human only mode and sets type dependency injectors for the hikari traits present in bot (including hikari.traits.GatewayBotAware ). PARAMETER DESCRIPTION bot The bot client to build from. This will be used to infer the relevant Hikari clients to use. TYPE: hikari . GatewayBotAware event_managed Whether or not this client is managed by the event manager. An event managed client will be automatically started and closed based on Hikari's lifetime events. TYPE: bool DEFAULT: True injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None mention_prefix Whether or not mention prefixes should be automatically set when this client is first started. It should be noted that this only applies to message commands. TYPE: bool DEFAULT: False declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the commands to update. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None from_rest_bot classmethod # from_rest_bot ( bot , / , * , bot_managed = False , declare_global_commands = False , injector = None , set_global_commands = False , command_ids = None , message_ids = None , user_ids = None ) Build a tanjun.Client from a hikari.traits.RESTBotAware instance. Note This sets type dependency injectors for the hikari traits present in bot (including hikari.traits.RESTBotAware ). PARAMETER DESCRIPTION bot The bot client to build from. TYPE: hikari . RESTBotAware declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False bot_managed Whether the client should be managed by the REST bot. A REST bot managed client will be automatically started and closed based on the REST bot's startup and shutdown callbacks. TYPE: bool DEFAULT: False injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None hooks property # hooks () Top level tanjun.abc.AnyHooks set for this client. These are called during both message, menu and slash command execution. interaction_accepts property # interaction_accepts () The types of interactions this client is executing. is_human_only property # is_human_only () Whether this client is only executing for non-bot/webhook users messages. menu_hooks property # menu_hooks () Top level tanjun.abc.MenuHooks set for this client. These are only called during menu command execution. message_accepts property # message_accepts () Type of message create events this command client accepts for execution. message_hooks property # message_hooks () Top level tanjun.abc.MessageHooks set for this client. These are only called during message command execution. on_autocomplete_interaction_request async # on_autocomplete_interaction_request ( interaction ) Execute a command autocomplete based on received REST requests. PARAMETER DESCRIPTION interaction The interaction to execute autocomplete based on. TYPE: hikari . AutocompleteInteraction RETURNS DESCRIPTION hikari . api . InteractionAutocompleteBuilder The initial response to send back to Discord. on_command_interaction_request async # on_command_interaction_request ( interaction ) Execute an app command based on received REST requests. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . CommandInteraction RETURNS DESCRIPTION hikari . api . InteractionMessageBuilder | hikari . api . InteractionDeferredBuilder The initial response to send back to Discord. on_gateway_autocomplete_create async # on_gateway_autocomplete_create ( interaction ) Execute command autocomplete based on a received gateway interaction create. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . AutocompleteInteraction on_gateway_command_create async # on_gateway_command_create ( interaction ) Execute an app command based on a received gateway interaction create. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . CommandInteraction on_interaction_create_event async # on_interaction_create_event ( event ) Handle a gateway interaction create event. This will execute both application command and autocomplete interactions. PARAMETER DESCRIPTION event The event to execute commands based on. TYPE: hikari . InteractionCreateEvent on_message_create_event async # on_message_create_event ( event ) Execute a message command based on a gateway event. PARAMETER DESCRIPTION event The event to handle. TYPE: hikari . MessageCreateEvent open async # open ( * , register_listeners = True ) Start the client. If mention_prefix was passed to tanjun.Client. init or tanjun.Client.from_gateway_bot then this function may make a fetch request to Discord if it cannot get the current user from the cache. RAISES DESCRIPTION RuntimeError If the client is already active. prefix_getter property # prefix_getter () Prefix getter method set for this client. For more information on this callback's signature see tanjun.clients.PrefixGetterSig . prefixes property # prefixes () Collection of the standard prefixes set for this client. remove_check # remove_check ( check ) Remove a check from the client. PARAMETER DESCRIPTION check The check to remove. TYPE: tanjun . CheckSig RAISES DESCRIPTION ValueError If the check was not previously added. remove_prefix # remove_prefix ( prefix ) Remove a message content prefix from the client. PARAMETER DESCRIPTION prefix The prefix to remove. TYPE: str RAISES DESCRIPTION ValueError If the prefix is not registered with the client. RETURNS DESCRIPTION Self The client instance to enable chained calls. set_auto_defer_after # set_auto_defer_after ( time ) Set when this client should automatically defer execution of commands. Warning If time is set to None then automatic deferrals will be disabled. This may lead to unexpected behaviour. PARAMETER DESCRIPTION time The time in seconds to defer interaction command responses after. TYPE: typing . Optional [ float ] set_autocomplete_ctx_maker # set_autocomplete_ctx_maker ( maker = context . AutocompleteContext ) Set the autocomplete context maker to use when creating contexts. Warning The caller must return an instance of tanjun.context.AutocompleteContext rather than just any implementation of the AutocompleteContext abc due to this client relying on implementation detail of tanjun.context.AutocompleteContext . PARAMETER DESCRIPTION maker The autocomplete context maker to use. This is a callback which should match the signature of tanjun.context.AutocompleteContext. init and return an instance of tanjun.context.AutocompleteContext . TYPE: _AutocompleteContextMakerProto DEFAULT: context.AutocompleteContext RETURNS DESCRIPTION Self This client to enable method chaining. set_case_sensitive # set_case_sensitive ( state ) Set whether this client defaults to being case sensitive for message commands. PARAMETER DESCRIPTION state Whether this client's message commands should be matched case-sensitively. This may be overridden by component specific configuration. TYPE: bool set_default_app_command_permissions # set_default_app_command_permissions ( permissions ) Set the default member permissions needed for this client's commands. Warning This may be overridden by guild staff and does not apply to admins. PARAMETER DESCRIPTION permissions The default member permissions needed for this client's application commands. This may be overridden by tanjun.abc.AppCommand.default_member_permissions and tanjun.abc.Component.default_app_cmd_permissions ; if this is left as None then this config will be inherited from the parent client. TYPE: typing . Union [ int , hikari . Permissions ] RETURNS DESCRIPTION Self This client to enable method chaining. set_dms_enabled_for_app_cmds # set_dms_enabled_for_app_cmds ( state ) Set whether this clients's commands should be enabled in DMs. PARAMETER DESCRIPTION state Whether to enable this client's commands in DMs. This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and tanjun.abc.Component.dms_enabled_for_app_cmds ; if this is left as None then this config will be inherited from the parent client. TYPE: bool RETURNS DESCRIPTION Self This client to enable method chaining. set_ephemeral_default # set_ephemeral_default ( state ) Set whether slash contexts spawned by this client should default to ephemeral responses. This defaults to False if not explicitly set. PARAMETER DESCRIPTION state Whether slash command contexts executed in this client should should default to ephemeral. This will be overridden by any response calls which specify flags. TYPE: bool RETURNS DESCRIPTION Self This client to enable method chaining. set_global_commands async # set_global_commands ( * , application = None , guild = hikari . UNDEFINED , force = False ) Alias of tanjun.Client.declare_global_commands . deprecated Since v2.1.1a1; use tanjun.Client.declare_global_commands instead. set_hikari_trait_injectors # set_hikari_trait_injectors ( bot ) Set type based dependency injection based on the hikari traits found in bot . This is a short hand for calling tanjun.Client.add_type_dependency for all the hikari trait types bot is valid for with bot. PARAMETER DESCRIPTION bot The hikari client to set dependency injectors for. TYPE: hikari . RESTAware set_hooks # set_hooks ( hooks ) Set the general command execution hooks for this client. The callbacks within this hook will be added to every slash and message command execution started by this client. PARAMETER DESCRIPTION hooks The general command execution hooks to set for this client. Passing None will remove all hooks. TYPE: typing . Optional [ tanjun . AnyHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls. set_human_only # set_human_only ( value = True ) Set whether or not message commands execution should be limited to \"human\" users. Note This doesn't apply to interaction commands as these can only be triggered by a \"human\" (normal user account). PARAMETER DESCRIPTION value Whether or not message commands execution should be limited to \"human\" users. Passing True here will prevent message commands from being executed based on webhook and bot messages. TYPE: bool DEFAULT: True set_interaction_accepts # set_interaction_accepts ( accepts ) Set the kind of interactions this client should execute. PARAMETER DESCRIPTION accepts Bitfield of the interaction types this client should execute. TYPE: InteractionAcceptsEnum RAISES DESCRIPTION RuntimeError If called while the client is running. set_interaction_not_found # set_interaction_not_found ( message ) Set the response message for when an interaction command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when an interaction command isn't found. TYPE: typing . Optional [ str ] set_menu_ctx_maker # set_menu_ctx_maker ( maker = context . MenuContext ) Set the autocomplete context maker to use when creating contexts. Warning The caller must return an instance of tanjun.context.MenuContext rather than just any implementation of the MenuContext abc due to this client relying on implementation detail of tanjun.context.MenuContext . PARAMETER DESCRIPTION maker The autocomplete context maker to use. This is a callback which should match the signature of tanjun.context.MenuContext. init and return an instance of tanjun.context.MenuContext . TYPE: _MenuContextMakerProto DEFAULT: context.MenuContext RETURNS DESCRIPTION Self This client to enable method chaining. set_menu_hooks # set_menu_hooks ( hooks ) Set the menu command execution hooks for this client. The callbacks within this hook will be added to every menu command execution started by this client. PARAMETER DESCRIPTION hooks The menu context specific command execution hooks to set for this client. Passing None will remove the hooks. TYPE: typing . Optional [ tanjun . MenuHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls. set_menu_not_found # set_menu_not_found ( message ) Set the response message for when a menu command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when a menu command isn't found. TYPE: typing . Optional [ str ] set_message_accepts # set_message_accepts ( accepts ) Set the kind of messages commands should be executed based on. PARAMETER DESCRIPTION accepts The type of messages commands should be executed based on. TYPE: MessageAcceptsEnum RAISES DESCRIPTION RuntimeError If called while the client is running. ValueError If accepts is set to anything other than tanjun.clients.MessageAcceptsEnum.NONE when the client doesn't have a linked event manager. set_message_ctx_maker # set_message_ctx_maker ( maker = context . MessageContext ) Set the message context maker to use when creating context for a message. Warning The caller must return an instance of tanjun.context.MessageContext rather than just any implementation of the MessageContext abc due to this client relying on implementation detail of tanjun.context.MessageContext . PARAMETER DESCRIPTION maker The message context maker to use. This is a callback which should match the signature of tanjun.context.MessageContext. init and return an instance of tanjun.context.MessageContext . TYPE: _MessageContextMakerProto DEFAULT: context.MessageContext RETURNS DESCRIPTION Self This client to enable method chaining. set_message_hooks # set_message_hooks ( hooks ) Set the message command execution hooks for this client. The callbacks within this hook will be added to every message command execution started by this client. PARAMETER DESCRIPTION hooks The message context specific command execution hooks to set for this client. Passing None will remove all hooks. TYPE: typing . Optional [ tanjun . MessageHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls. set_prefix_getter # set_prefix_getter ( getter ) Set the callback used to retrieve message prefixes set for the relevant guild. PARAMETER DESCRIPTION getter The callback which'll be used to retrieve prefixes for the guild a message context is from. If None is passed here then the callback will be unset. This should be an async callback which one argument of type tanjun.abc.MessageContext and returns an iterable of string prefixes. Dependency injection is supported for this callback's keyword arguments. TYPE: typing . Optional [ PrefixGetterSig ] RETURNS DESCRIPTION Self The client instance to enable chained calls. set_slash_ctx_maker # set_slash_ctx_maker ( maker = context . SlashContext ) Set the slash context maker to use when creating context for a slash command. Warning The caller must return an instance of tanjun.context.SlashContext rather than just any implementation of the SlashContext abc due to this client relying on implementation detail of tanjun.context.SlashContext . PARAMETER DESCRIPTION maker The slash context maker to use. This is a callback which should match the signature of tanjun.context.SlashContext. init and return an instance of tanjun.context.SlashContext . TYPE: _SlashContextMakerProto DEFAULT: context.SlashContext RETURNS DESCRIPTION Self This client to enable method chaining. set_slash_hooks # set_slash_hooks ( hooks ) Set the slash command execution hooks for this client. The callbacks within this hook will be added to every slash command execution started by this client. PARAMETER DESCRIPTION hooks The slash context specific command execution hooks to set for this client. Passing None will remove the hooks. TYPE: typing . Optional [ tanjun . SlashHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls. set_slash_not_found # set_slash_not_found ( message ) Set the response message for when a slash command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when a slash command isn't found. TYPE: typing . Optional [ str ] slash_hooks property # slash_hooks () Top level tanjun.abc.SlashHooks set for this client. These are only called during slash command execution. with_check # with_check ( check ) Add a check to this client through a decorator call. PARAMETER DESCRIPTION check The check to add. This may be either synchronous or asynchronous and must take one positional argument of type tanjun.abc.Context with dependency injection being supported for its keyword arguments. TYPE: tanjun . abc . CheckSig RETURNS DESCRIPTION tanjun . abc . CheckSig The added check. with_prefix_getter # with_prefix_getter ( getter ) Set the prefix getter callback for this client through decorator call. Examples: client = tanjun . Client . from_rest_bot ( bot ) @client . with_prefix_getter async def prefix_getter ( ctx : tanjun . abc . MessageContext ) -> collections . abc . Iterable [ str ]: raise NotImplementedError PARAMETER DESCRIPTION getter The callback which'll be to retrieve prefixes for the guild a message event is from. This should be an async callback which one argument of type tanjun.abc.MessageContext and returns an iterable of string prefixes. Dependency injection is supported for this callback's keyword arguments. TYPE: PrefixGetterSig RETURNS DESCRIPTION PrefixGetterSig The registered callback. InteractionAcceptsEnum # Bases: enum . IntFlag The possible configurations for which interaction this client should execute. ALL class-attribute # ALL = AUTOCOMPLETE | COMMANDS Execute all the interaction types Tanjun supports. AUTOCOMPLETE class-attribute # AUTOCOMPLETE = enum . auto () Execute autocomplete interactions. COMMANDS class-attribute # COMMANDS = enum . auto () Execute command interactions. This includes slash command and context menu calls. NONE class-attribute # NONE = 0 Set the client to execute no interactions. MessageAcceptsEnum # Bases: str , enum . Enum The possible configurations for which events tanjun.Client should execute commands based on. ALL class-attribute # ALL = 'ALL' Set the client to execute commands based on both DM and guild message create events. DM_ONLY class-attribute # DM_ONLY = 'DM_ONLY' Set the client to execute commands based only DM message create events. GUILD_ONLY class-attribute # GUILD_ONLY = 'GUILD_ONLY' Set the client to execute commands based only guild message create events. NONE class-attribute # NONE = 'NONE' Set the client to not execute commands based on message create events. get_event_type # get_event_type () Get the base event type this mode listens to. RETURNS DESCRIPTION type [ hikari . events . MessageCreateEvent ] | None The type object of the MessageCreateEvent class this mode will register a listener for. This will be None if this mode disables listening to message create events. as_loader # as_loader ( callback = None , / , * , standard_impl = True ) Mark a callback as being used to load Tanjun components from a module. Note This is only necessary if you wish to use tanjun.Client.load_modules . PARAMETER DESCRIPTION callback The callback used to load Tanjun components from a module. This should take one argument of type tanjun.Client (or tanjun.abc.Client if standard_impl is False ), return nothing and will be expected to initiate and add utilities such as components to the provided client. TYPE: typing . Union [ collections . Callable [[ tanjun . Client ], None], collections . Callable [[ Client ], None], None] DEFAULT: None standard_impl Whether this loader should only allow instances of tanjun.Client as opposed to tanjun.abc.Client . TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections.abc.Callable[[tanjun.abc.Client], None]] The decorated load callback. as_unloader # as_unloader ( callback = None , / , * , standard_impl = True ) Mark a callback as being used to unload a module's utilities from a client. Note This is the inverse of tanjun.as_loader and is only necessary if you wish to use the tanjun.Client.unload_modules or tanjun.Client.reload_modules . PARAMETER DESCRIPTION callback The callback used to unload Tanjun components from a module. This should take one argument of type tanjun.Client (or tanjun.abc.Client if standard_impl is False ), return nothing and will be expected to remove utilities such as components from the provided client. TYPE: typing . Union [ collections . Callable [[ Client ], None], collections . Callable [[ tanjun . Client ], None], None] DEFAULT: None standard_impl Whether this unloader should only allow instances of tanjun.Client as opposed to tanjun.abc.Client . TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections.abc.Callable[[tanjun.abc.Client], None]] The decorated unload callback. on_parser_error async # on_parser_error ( ctx , error ) Handle message parser errors. This is the default message parser error hook included by tanjun.Client .","title":"tanjun.clients"},{"location":"reference/clients/#tanjunclients","text":"Standard Tanjun client.","title":"tanjun.clients"},{"location":"reference/clients/#tanjun.clients.ClientCallbackNames","text":"ClientCallbackNames = tanjun . ClientCallbackNames Alias of tanjun.abc.ClientCallbackNames .","title":"ClientCallbackNames"},{"location":"reference/clients/#tanjun.clients.PrefixGetterSig","text":"PrefixGetterSig = collections . Callable [ Ellipsis , collections . Coroutine [ typing . Any , typing . Any , collections . Iterable [ str ]]] Type hint of a callable used to get the prefix(es) for a specific guild. This should be an asynchronous callable which returns an iterable of strings. Note While dependency injection is supported for this, the first positional argument will always be a tanjun.abc.MessageContext .","title":"PrefixGetterSig"},{"location":"reference/clients/#tanjun.clients.Client","text":"Bases: tanjun . Client Tanjun's standard tanjun.abc.Client implementation. This implementation supports dependency injection for checks, command callbacks, prefix getters and event listeners. For more information on how this works see alluka . When manually managing the lifetime of the client the linked rest app or bot must always be started before the Tanjun client. Note By default this client includes a parser error handling hook which will by overwritten if you call tanjun.Client.set_hooks .","title":"Client"},{"location":"reference/clients/#tanjun.clients.Client.__init__","text":"__init__ ( rest , * , cache = None , events = None , server = None , shards = None , voice = None , event_managed = False , injector = None , mention_prefix = False , set_global_commands = False , declare_global_commands = False , command_ids = None , message_ids = None , user_ids = None , _stack_level = 0 ) Initialise a Tanjun client. Note For a quicker way to initiate this client around a standard bot aware client, see tanjun.Client.from_gateway_bot and tanjun.Client.from_rest_bot . PARAMETER DESCRIPTION rest The Hikari REST client this will use. TYPE: hikari . api . RESTClient cache The Hikari cache client this will use if applicable. TYPE: typing . Optional [ hikari . api . Cache ] DEFAULT: None events The Hikari event manager client this will use if applicable. This is necessary for message command dispatch and will also be necessary for interaction command dispatch if server isn't provided. TYPE: typing . Optional [ hikari . api . EventManager ] DEFAULT: None server The Hikari interaction server client this will use if applicable. This is used for interaction command dispatch if interaction events aren't being received from the event manager. TYPE: typing . Optional [ hikari . api . InteractionServer ] DEFAULT: None shards The Hikari shard aware client this will use if applicable. TYPE: typing . Optional [ hikari . ShardAware ] DEFAULT: None voice The Hikari voice component this will use if applicable. TYPE: typing . Optional [ hikari . api . VoiceComponent ] DEFAULT: None event_managed Whether or not this client is managed by the event manager. An event managed client will be automatically started and closed based on Hikari's lifetime events. This can only be passed as True if events is also provided. TYPE: bool DEFAULT: False injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None mention_prefix Whether or not mention prefixes should be automatically set when this client is first started. It should be noted that this only applies to message commands. TYPE: bool DEFAULT: False declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None RAISES DESCRIPTION ValueError Raises for the following reasons: If event_managed is True when event_manager is None . If command_ids is passed when multiple guild ids are provided for declare_global_commands . If command_ids is passed when declare_global_commands is False .","title":"__init__()"},{"location":"reference/clients/#tanjun.clients.Client.add_check","text":"add_check ( check ) Add a generic check to this client. This will be applied to both message and slash command execution. PARAMETER DESCRIPTION check The check to add. This may be either synchronous or asynchronous and must take one positional argument of type tanjun.abc.Context with dependency injection being supported for its keyword arguments. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"add_check()"},{"location":"reference/clients/#tanjun.clients.Client.add_component","text":"add_component ( component ) Add a component to this client. PARAMETER DESCRIPTION component The component to move to this client. TYPE: tanjun . Component RETURNS DESCRIPTION Self The client instance to allow chained calls. RAISES DESCRIPTION ValueError If the component's name is already registered.","title":"add_component()"},{"location":"reference/clients/#tanjun.clients.Client.add_prefix","text":"add_prefix ( prefixes ) Add a prefix used to filter message command calls. This will be matched against the first character(s) in a message's content to determine whether the message command search stage of execution should be initiated. PARAMETER DESCRIPTION prefixes Either a single string or an iterable of strings to be used as prefixes. TYPE: typing . Union [ collections . Iterable [ str ], str ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"add_prefix()"},{"location":"reference/clients/#tanjun.clients.Client.checks","text":"checks () Collection of the level tanjun.abc.Context checks registered to this client. Note These may be taking advantage of the standard dependency injection.","title":"checks()"},{"location":"reference/clients/#tanjun.clients.Client.close","text":"close ( * , deregister_listeners = True ) Close the client. RAISES DESCRIPTION RuntimeError If the client isn't running.","title":"close()"},{"location":"reference/clients/#tanjun.clients.Client.fetch_rest_application_id","text":"fetch_rest_application_id () Fetch the ID of the application this client is linked to. RETURNS DESCRIPTION hikari . Snowflake The application ID of the application this client is linked to.","title":"fetch_rest_application_id()"},{"location":"reference/clients/#tanjun.clients.Client.from_gateway_bot","text":"from_gateway_bot ( bot , / , * , event_managed = True , injector = None , mention_prefix = False , declare_global_commands = False , set_global_commands = False , command_ids = None , message_ids = None , user_ids = None ) Build a tanjun.Client from a hikari.traits.GatewayBotAware instance. Note This defaults the client to human only mode and sets type dependency injectors for the hikari traits present in bot (including hikari.traits.GatewayBotAware ). PARAMETER DESCRIPTION bot The bot client to build from. This will be used to infer the relevant Hikari clients to use. TYPE: hikari . GatewayBotAware event_managed Whether or not this client is managed by the event manager. An event managed client will be automatically started and closed based on Hikari's lifetime events. TYPE: bool DEFAULT: True injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None mention_prefix Whether or not mention prefixes should be automatically set when this client is first started. It should be noted that this only applies to message commands. TYPE: bool DEFAULT: False declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the commands to update. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None","title":"from_gateway_bot()"},{"location":"reference/clients/#tanjun.clients.Client.from_rest_bot","text":"from_rest_bot ( bot , / , * , bot_managed = False , declare_global_commands = False , injector = None , set_global_commands = False , command_ids = None , message_ids = None , user_ids = None ) Build a tanjun.Client from a hikari.traits.RESTBotAware instance. Note This sets type dependency injectors for the hikari traits present in bot (including hikari.traits.RESTBotAware ). PARAMETER DESCRIPTION bot The bot client to build from. TYPE: hikari . RESTBotAware declare_global_commands Whether or not to automatically set global slash commands when this client is first started. If one or more guild objects/IDs are passed here then the registered global commands will be set on the specified guild(s) at startup rather than globally. The endpoint this uses has a strict ratelimit which, as of writing, only allows for 2 requests per minute (with that ratelimit either being per-guild if targeting a specific guild otherwise globally). TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialGuild ], hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False bot_managed Whether the client should be managed by the REST bot. A REST bot managed client will be automatically started and closed based on the REST bot's startup and shutdown callbacks. TYPE: bool DEFAULT: False injector The alluka client this should use for dependency injection. If not provided then the client will initialise its own DI client. TYPE: typing . Optional [ alluka . abc . Client ] DEFAULT: None set_global_commands Deprecated as of v2.1.1a1 alias of declare_global_commands . TYPE: typing . Union [ hikari . SnowflakeishOr [ hikari . PartialGuild ], bool ] DEFAULT: False command_ids If provided, a mapping of top level command names to IDs of the existing commands to update. This will be used for all application commands but in cases where commands have overlapping names, message_ids and user_ids will take priority over this for their relevant command type. This field is complementary to declare_global_commands and, while it isn't necessarily required, this will in some situations help avoid permissions which were previously set for a command from being lost after a rename. This currently isn't supported when multiple guild IDs are passed for declare_global_commands . TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None message_ids If provided, a mapping of message context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None user_ids If provided, a mapping of user context menu command names to the IDs of existing commands to update. TYPE: typing . Optional [ collections . Mapping [ str , hikari . SnowflakeishOr [ hikari . PartialCommand ]]] DEFAULT: None","title":"from_rest_bot()"},{"location":"reference/clients/#tanjun.clients.Client.hooks","text":"hooks () Top level tanjun.abc.AnyHooks set for this client. These are called during both message, menu and slash command execution.","title":"hooks()"},{"location":"reference/clients/#tanjun.clients.Client.interaction_accepts","text":"interaction_accepts () The types of interactions this client is executing.","title":"interaction_accepts()"},{"location":"reference/clients/#tanjun.clients.Client.is_human_only","text":"is_human_only () Whether this client is only executing for non-bot/webhook users messages.","title":"is_human_only()"},{"location":"reference/clients/#tanjun.clients.Client.menu_hooks","text":"menu_hooks () Top level tanjun.abc.MenuHooks set for this client. These are only called during menu command execution.","title":"menu_hooks()"},{"location":"reference/clients/#tanjun.clients.Client.message_accepts","text":"message_accepts () Type of message create events this command client accepts for execution.","title":"message_accepts()"},{"location":"reference/clients/#tanjun.clients.Client.message_hooks","text":"message_hooks () Top level tanjun.abc.MessageHooks set for this client. These are only called during message command execution.","title":"message_hooks()"},{"location":"reference/clients/#tanjun.clients.Client.on_autocomplete_interaction_request","text":"on_autocomplete_interaction_request ( interaction ) Execute a command autocomplete based on received REST requests. PARAMETER DESCRIPTION interaction The interaction to execute autocomplete based on. TYPE: hikari . AutocompleteInteraction RETURNS DESCRIPTION hikari . api . InteractionAutocompleteBuilder The initial response to send back to Discord.","title":"on_autocomplete_interaction_request()"},{"location":"reference/clients/#tanjun.clients.Client.on_command_interaction_request","text":"on_command_interaction_request ( interaction ) Execute an app command based on received REST requests. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . CommandInteraction RETURNS DESCRIPTION hikari . api . InteractionMessageBuilder | hikari . api . InteractionDeferredBuilder The initial response to send back to Discord.","title":"on_command_interaction_request()"},{"location":"reference/clients/#tanjun.clients.Client.on_gateway_autocomplete_create","text":"on_gateway_autocomplete_create ( interaction ) Execute command autocomplete based on a received gateway interaction create. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . AutocompleteInteraction","title":"on_gateway_autocomplete_create()"},{"location":"reference/clients/#tanjun.clients.Client.on_gateway_command_create","text":"on_gateway_command_create ( interaction ) Execute an app command based on a received gateway interaction create. PARAMETER DESCRIPTION interaction The interaction to execute a command based on. TYPE: hikari . CommandInteraction","title":"on_gateway_command_create()"},{"location":"reference/clients/#tanjun.clients.Client.on_interaction_create_event","text":"on_interaction_create_event ( event ) Handle a gateway interaction create event. This will execute both application command and autocomplete interactions. PARAMETER DESCRIPTION event The event to execute commands based on. TYPE: hikari . InteractionCreateEvent","title":"on_interaction_create_event()"},{"location":"reference/clients/#tanjun.clients.Client.on_message_create_event","text":"on_message_create_event ( event ) Execute a message command based on a gateway event. PARAMETER DESCRIPTION event The event to handle. TYPE: hikari . MessageCreateEvent","title":"on_message_create_event()"},{"location":"reference/clients/#tanjun.clients.Client.open","text":"open ( * , register_listeners = True ) Start the client. If mention_prefix was passed to tanjun.Client. init or tanjun.Client.from_gateway_bot then this function may make a fetch request to Discord if it cannot get the current user from the cache. RAISES DESCRIPTION RuntimeError If the client is already active.","title":"open()"},{"location":"reference/clients/#tanjun.clients.Client.prefix_getter","text":"prefix_getter () Prefix getter method set for this client. For more information on this callback's signature see tanjun.clients.PrefixGetterSig .","title":"prefix_getter()"},{"location":"reference/clients/#tanjun.clients.Client.prefixes","text":"prefixes () Collection of the standard prefixes set for this client.","title":"prefixes()"},{"location":"reference/clients/#tanjun.clients.Client.remove_check","text":"remove_check ( check ) Remove a check from the client. PARAMETER DESCRIPTION check The check to remove. TYPE: tanjun . CheckSig RAISES DESCRIPTION ValueError If the check was not previously added.","title":"remove_check()"},{"location":"reference/clients/#tanjun.clients.Client.remove_prefix","text":"remove_prefix ( prefix ) Remove a message content prefix from the client. PARAMETER DESCRIPTION prefix The prefix to remove. TYPE: str RAISES DESCRIPTION ValueError If the prefix is not registered with the client. RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"remove_prefix()"},{"location":"reference/clients/#tanjun.clients.Client.set_auto_defer_after","text":"set_auto_defer_after ( time ) Set when this client should automatically defer execution of commands. Warning If time is set to None then automatic deferrals will be disabled. This may lead to unexpected behaviour. PARAMETER DESCRIPTION time The time in seconds to defer interaction command responses after. TYPE: typing . Optional [ float ]","title":"set_auto_defer_after()"},{"location":"reference/clients/#tanjun.clients.Client.set_autocomplete_ctx_maker","text":"set_autocomplete_ctx_maker ( maker = context . AutocompleteContext ) Set the autocomplete context maker to use when creating contexts. Warning The caller must return an instance of tanjun.context.AutocompleteContext rather than just any implementation of the AutocompleteContext abc due to this client relying on implementation detail of tanjun.context.AutocompleteContext . PARAMETER DESCRIPTION maker The autocomplete context maker to use. This is a callback which should match the signature of tanjun.context.AutocompleteContext. init and return an instance of tanjun.context.AutocompleteContext . TYPE: _AutocompleteContextMakerProto DEFAULT: context.AutocompleteContext RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_autocomplete_ctx_maker()"},{"location":"reference/clients/#tanjun.clients.Client.set_case_sensitive","text":"set_case_sensitive ( state ) Set whether this client defaults to being case sensitive for message commands. PARAMETER DESCRIPTION state Whether this client's message commands should be matched case-sensitively. This may be overridden by component specific configuration. TYPE: bool","title":"set_case_sensitive()"},{"location":"reference/clients/#tanjun.clients.Client.set_default_app_command_permissions","text":"set_default_app_command_permissions ( permissions ) Set the default member permissions needed for this client's commands. Warning This may be overridden by guild staff and does not apply to admins. PARAMETER DESCRIPTION permissions The default member permissions needed for this client's application commands. This may be overridden by tanjun.abc.AppCommand.default_member_permissions and tanjun.abc.Component.default_app_cmd_permissions ; if this is left as None then this config will be inherited from the parent client. TYPE: typing . Union [ int , hikari . Permissions ] RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_default_app_command_permissions()"},{"location":"reference/clients/#tanjun.clients.Client.set_dms_enabled_for_app_cmds","text":"set_dms_enabled_for_app_cmds ( state ) Set whether this clients's commands should be enabled in DMs. PARAMETER DESCRIPTION state Whether to enable this client's commands in DMs. This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and tanjun.abc.Component.dms_enabled_for_app_cmds ; if this is left as None then this config will be inherited from the parent client. TYPE: bool RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_dms_enabled_for_app_cmds()"},{"location":"reference/clients/#tanjun.clients.Client.set_ephemeral_default","text":"set_ephemeral_default ( state ) Set whether slash contexts spawned by this client should default to ephemeral responses. This defaults to False if not explicitly set. PARAMETER DESCRIPTION state Whether slash command contexts executed in this client should should default to ephemeral. This will be overridden by any response calls which specify flags. TYPE: bool RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_ephemeral_default()"},{"location":"reference/clients/#tanjun.clients.Client.set_global_commands","text":"set_global_commands ( * , application = None , guild = hikari . UNDEFINED , force = False ) Alias of tanjun.Client.declare_global_commands . deprecated Since v2.1.1a1; use tanjun.Client.declare_global_commands instead.","title":"set_global_commands()"},{"location":"reference/clients/#tanjun.clients.Client.set_hikari_trait_injectors","text":"set_hikari_trait_injectors ( bot ) Set type based dependency injection based on the hikari traits found in bot . This is a short hand for calling tanjun.Client.add_type_dependency for all the hikari trait types bot is valid for with bot. PARAMETER DESCRIPTION bot The hikari client to set dependency injectors for. TYPE: hikari . RESTAware","title":"set_hikari_trait_injectors()"},{"location":"reference/clients/#tanjun.clients.Client.set_hooks","text":"set_hooks ( hooks ) Set the general command execution hooks for this client. The callbacks within this hook will be added to every slash and message command execution started by this client. PARAMETER DESCRIPTION hooks The general command execution hooks to set for this client. Passing None will remove all hooks. TYPE: typing . Optional [ tanjun . AnyHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_hooks()"},{"location":"reference/clients/#tanjun.clients.Client.set_human_only","text":"set_human_only ( value = True ) Set whether or not message commands execution should be limited to \"human\" users. Note This doesn't apply to interaction commands as these can only be triggered by a \"human\" (normal user account). PARAMETER DESCRIPTION value Whether or not message commands execution should be limited to \"human\" users. Passing True here will prevent message commands from being executed based on webhook and bot messages. TYPE: bool DEFAULT: True","title":"set_human_only()"},{"location":"reference/clients/#tanjun.clients.Client.set_interaction_accepts","text":"set_interaction_accepts ( accepts ) Set the kind of interactions this client should execute. PARAMETER DESCRIPTION accepts Bitfield of the interaction types this client should execute. TYPE: InteractionAcceptsEnum RAISES DESCRIPTION RuntimeError If called while the client is running.","title":"set_interaction_accepts()"},{"location":"reference/clients/#tanjun.clients.Client.set_interaction_not_found","text":"set_interaction_not_found ( message ) Set the response message for when an interaction command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when an interaction command isn't found. TYPE: typing . Optional [ str ]","title":"set_interaction_not_found()"},{"location":"reference/clients/#tanjun.clients.Client.set_menu_ctx_maker","text":"set_menu_ctx_maker ( maker = context . MenuContext ) Set the autocomplete context maker to use when creating contexts. Warning The caller must return an instance of tanjun.context.MenuContext rather than just any implementation of the MenuContext abc due to this client relying on implementation detail of tanjun.context.MenuContext . PARAMETER DESCRIPTION maker The autocomplete context maker to use. This is a callback which should match the signature of tanjun.context.MenuContext. init and return an instance of tanjun.context.MenuContext . TYPE: _MenuContextMakerProto DEFAULT: context.MenuContext RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_menu_ctx_maker()"},{"location":"reference/clients/#tanjun.clients.Client.set_menu_hooks","text":"set_menu_hooks ( hooks ) Set the menu command execution hooks for this client. The callbacks within this hook will be added to every menu command execution started by this client. PARAMETER DESCRIPTION hooks The menu context specific command execution hooks to set for this client. Passing None will remove the hooks. TYPE: typing . Optional [ tanjun . MenuHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_menu_hooks()"},{"location":"reference/clients/#tanjun.clients.Client.set_menu_not_found","text":"set_menu_not_found ( message ) Set the response message for when a menu command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when a menu command isn't found. TYPE: typing . Optional [ str ]","title":"set_menu_not_found()"},{"location":"reference/clients/#tanjun.clients.Client.set_message_accepts","text":"set_message_accepts ( accepts ) Set the kind of messages commands should be executed based on. PARAMETER DESCRIPTION accepts The type of messages commands should be executed based on. TYPE: MessageAcceptsEnum RAISES DESCRIPTION RuntimeError If called while the client is running. ValueError If accepts is set to anything other than tanjun.clients.MessageAcceptsEnum.NONE when the client doesn't have a linked event manager.","title":"set_message_accepts()"},{"location":"reference/clients/#tanjun.clients.Client.set_message_ctx_maker","text":"set_message_ctx_maker ( maker = context . MessageContext ) Set the message context maker to use when creating context for a message. Warning The caller must return an instance of tanjun.context.MessageContext rather than just any implementation of the MessageContext abc due to this client relying on implementation detail of tanjun.context.MessageContext . PARAMETER DESCRIPTION maker The message context maker to use. This is a callback which should match the signature of tanjun.context.MessageContext. init and return an instance of tanjun.context.MessageContext . TYPE: _MessageContextMakerProto DEFAULT: context.MessageContext RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_message_ctx_maker()"},{"location":"reference/clients/#tanjun.clients.Client.set_message_hooks","text":"set_message_hooks ( hooks ) Set the message command execution hooks for this client. The callbacks within this hook will be added to every message command execution started by this client. PARAMETER DESCRIPTION hooks The message context specific command execution hooks to set for this client. Passing None will remove all hooks. TYPE: typing . Optional [ tanjun . MessageHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_message_hooks()"},{"location":"reference/clients/#tanjun.clients.Client.set_prefix_getter","text":"set_prefix_getter ( getter ) Set the callback used to retrieve message prefixes set for the relevant guild. PARAMETER DESCRIPTION getter The callback which'll be used to retrieve prefixes for the guild a message context is from. If None is passed here then the callback will be unset. This should be an async callback which one argument of type tanjun.abc.MessageContext and returns an iterable of string prefixes. Dependency injection is supported for this callback's keyword arguments. TYPE: typing . Optional [ PrefixGetterSig ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_prefix_getter()"},{"location":"reference/clients/#tanjun.clients.Client.set_slash_ctx_maker","text":"set_slash_ctx_maker ( maker = context . SlashContext ) Set the slash context maker to use when creating context for a slash command. Warning The caller must return an instance of tanjun.context.SlashContext rather than just any implementation of the SlashContext abc due to this client relying on implementation detail of tanjun.context.SlashContext . PARAMETER DESCRIPTION maker The slash context maker to use. This is a callback which should match the signature of tanjun.context.SlashContext. init and return an instance of tanjun.context.SlashContext . TYPE: _SlashContextMakerProto DEFAULT: context.SlashContext RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_slash_ctx_maker()"},{"location":"reference/clients/#tanjun.clients.Client.set_slash_hooks","text":"set_slash_hooks ( hooks ) Set the slash command execution hooks for this client. The callbacks within this hook will be added to every slash command execution started by this client. PARAMETER DESCRIPTION hooks The slash context specific command execution hooks to set for this client. Passing None will remove the hooks. TYPE: typing . Optional [ tanjun . SlashHooks ] RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"set_slash_hooks()"},{"location":"reference/clients/#tanjun.clients.Client.set_slash_not_found","text":"set_slash_not_found ( message ) Set the response message for when a slash command is not found. Warning Setting this to None may lead to unexpected behaviour (especially when the client is still set to auto-defer interactions) and should only be done if you know what you're doing. PARAMETER DESCRIPTION message The message to respond with when a slash command isn't found. TYPE: typing . Optional [ str ]","title":"set_slash_not_found()"},{"location":"reference/clients/#tanjun.clients.Client.slash_hooks","text":"slash_hooks () Top level tanjun.abc.SlashHooks set for this client. These are only called during slash command execution.","title":"slash_hooks()"},{"location":"reference/clients/#tanjun.clients.Client.with_check","text":"with_check ( check ) Add a check to this client through a decorator call. PARAMETER DESCRIPTION check The check to add. This may be either synchronous or asynchronous and must take one positional argument of type tanjun.abc.Context with dependency injection being supported for its keyword arguments. TYPE: tanjun . abc . CheckSig RETURNS DESCRIPTION tanjun . abc . CheckSig The added check.","title":"with_check()"},{"location":"reference/clients/#tanjun.clients.Client.with_prefix_getter","text":"with_prefix_getter ( getter ) Set the prefix getter callback for this client through decorator call. Examples: client = tanjun . Client . from_rest_bot ( bot ) @client . with_prefix_getter async def prefix_getter ( ctx : tanjun . abc . MessageContext ) -> collections . abc . Iterable [ str ]: raise NotImplementedError PARAMETER DESCRIPTION getter The callback which'll be to retrieve prefixes for the guild a message event is from. This should be an async callback which one argument of type tanjun.abc.MessageContext and returns an iterable of string prefixes. Dependency injection is supported for this callback's keyword arguments. TYPE: PrefixGetterSig RETURNS DESCRIPTION PrefixGetterSig The registered callback.","title":"with_prefix_getter()"},{"location":"reference/clients/#tanjun.clients.InteractionAcceptsEnum","text":"Bases: enum . IntFlag The possible configurations for which interaction this client should execute.","title":"InteractionAcceptsEnum"},{"location":"reference/clients/#tanjun.clients.InteractionAcceptsEnum.ALL","text":"ALL = AUTOCOMPLETE | COMMANDS Execute all the interaction types Tanjun supports.","title":"ALL"},{"location":"reference/clients/#tanjun.clients.InteractionAcceptsEnum.AUTOCOMPLETE","text":"AUTOCOMPLETE = enum . auto () Execute autocomplete interactions.","title":"AUTOCOMPLETE"},{"location":"reference/clients/#tanjun.clients.InteractionAcceptsEnum.COMMANDS","text":"COMMANDS = enum . auto () Execute command interactions. This includes slash command and context menu calls.","title":"COMMANDS"},{"location":"reference/clients/#tanjun.clients.InteractionAcceptsEnum.NONE","text":"NONE = 0 Set the client to execute no interactions.","title":"NONE"},{"location":"reference/clients/#tanjun.clients.MessageAcceptsEnum","text":"Bases: str , enum . Enum The possible configurations for which events tanjun.Client should execute commands based on.","title":"MessageAcceptsEnum"},{"location":"reference/clients/#tanjun.clients.MessageAcceptsEnum.ALL","text":"ALL = 'ALL' Set the client to execute commands based on both DM and guild message create events.","title":"ALL"},{"location":"reference/clients/#tanjun.clients.MessageAcceptsEnum.DM_ONLY","text":"DM_ONLY = 'DM_ONLY' Set the client to execute commands based only DM message create events.","title":"DM_ONLY"},{"location":"reference/clients/#tanjun.clients.MessageAcceptsEnum.GUILD_ONLY","text":"GUILD_ONLY = 'GUILD_ONLY' Set the client to execute commands based only guild message create events.","title":"GUILD_ONLY"},{"location":"reference/clients/#tanjun.clients.MessageAcceptsEnum.NONE","text":"NONE = 'NONE' Set the client to not execute commands based on message create events.","title":"NONE"},{"location":"reference/clients/#tanjun.clients.MessageAcceptsEnum.get_event_type","text":"get_event_type () Get the base event type this mode listens to. RETURNS DESCRIPTION type [ hikari . events . MessageCreateEvent ] | None The type object of the MessageCreateEvent class this mode will register a listener for. This will be None if this mode disables listening to message create events.","title":"get_event_type()"},{"location":"reference/clients/#tanjun.clients.as_loader","text":"as_loader ( callback = None , / , * , standard_impl = True ) Mark a callback as being used to load Tanjun components from a module. Note This is only necessary if you wish to use tanjun.Client.load_modules . PARAMETER DESCRIPTION callback The callback used to load Tanjun components from a module. This should take one argument of type tanjun.Client (or tanjun.abc.Client if standard_impl is False ), return nothing and will be expected to initiate and add utilities such as components to the provided client. TYPE: typing . Union [ collections . Callable [[ tanjun . Client ], None], collections . Callable [[ Client ], None], None] DEFAULT: None standard_impl Whether this loader should only allow instances of tanjun.Client as opposed to tanjun.abc.Client . TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections.abc.Callable[[tanjun.abc.Client], None]] The decorated load callback.","title":"as_loader()"},{"location":"reference/clients/#tanjun.clients.as_unloader","text":"as_unloader ( callback = None , / , * , standard_impl = True ) Mark a callback as being used to unload a module's utilities from a client. Note This is the inverse of tanjun.as_loader and is only necessary if you wish to use the tanjun.Client.unload_modules or tanjun.Client.reload_modules . PARAMETER DESCRIPTION callback The callback used to unload Tanjun components from a module. This should take one argument of type tanjun.Client (or tanjun.abc.Client if standard_impl is False ), return nothing and will be expected to remove utilities such as components from the provided client. TYPE: typing . Union [ collections . Callable [[ Client ], None], collections . Callable [[ tanjun . Client ], None], None] DEFAULT: None standard_impl Whether this unloader should only allow instances of tanjun.Client as opposed to tanjun.abc.Client . TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections.abc.Callable[[tanjun.abc.Client], None]] The decorated unload callback.","title":"as_unloader()"},{"location":"reference/clients/#tanjun.clients.on_parser_error","text":"on_parser_error ( ctx , error ) Handle message parser errors. This is the default message parser error hook included by tanjun.Client .","title":"on_parser_error()"},{"location":"reference/commands/","text":"tanjun.commands # Standard implementations of Tanjun's command objects. tanjun.commands.menu # Menu command implementations. MenuCommand # Bases: base . PartialCommand [ tanjun . MenuContext ] , tanjun . MenuCommand [ _MenuCommandCallbackSigT , _MenuTypeT ] Base class used for the standard menu command implementations. __init__ # __init__ ( callback , type_ , name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , _wrapped_command = None ) Initialise a user or message menu command. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MenuContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MenuContext , ...], collections . abc . Coroutine [ Any , ANy , None]] type_ The type of menu command this is. Only hikari.commands.CommandType.USER and hikari.commands.CommandType.MESSAGE are valid here. TYPE: hikari . commands . CommandType name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters. set_ephemeral_default # set_ephemeral_default ( state ) Set whether this command's responses should default to ephemeral. PARAMETER DESCRIPTION state Whether this command's responses should default to ephemeral. This will be overridden by any response calls which specify flags. Setting this to None will let the default set on the parent command(s), component or client propagate and decide the ephemeral default for contexts used by this command. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This command to allow for chaining. wrapped_command property # wrapped_command () The command object this wraps, if any. as_message_menu # as_message_menu ( name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Build a message tanjun.MenuCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_message_menu ( \"message\" ) async def message_command ( self , ctx : tanjun . abc . MenuContext , message : hikari . Message ) -> None : await ctx . respond ( embed = hikari . Embed ( title = \"Message content\" , description = message . content or \"N/A\" ) ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters. as_user_menu # as_user_menu ( name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Build a user tanjun.MenuCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_user_menu ( \"user\" ) async def user_command ( self , ctx : tanjun . abc . MenuContext , user : hikari . User | hikari . InteractionMember , ) -> None : await ctx . respond ( f \"Hello { user } \" ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters. tanjun.commands.message # Message command implementations. MessageCommand # Bases: base . PartialCommand [ tanjun . MessageContext ] , tanjun . MessageCommand [ _CommandCallbackSigT ] Standard implementation of a message command. __init__ # __init__ ( callback , name , / , * names , validate_arg_keys = True , _wrapped_command = None ) Initialise a message command. PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MessageContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MessageContext , ...], collections . abc . Coroutine [None]] name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True wrapped_command property # wrapped_command () The command object this wraps, if any. MessageCommandGroup # Bases: MessageCommand [ _CommandCallbackSigT ] , tanjun . MessageCommandGroup [ _CommandCallbackSigT ] Standard implementation of a message command group. __init__ # __init__ ( callback , name , / , * names , strict = False , validate_arg_keys = True , _wrapped_command = None ) Initialise a message command group. PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MessageContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MessageContext , ...], collections . abc . Coroutine [None]] name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True add_command # add_command ( command ) Add a command to this group. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The group instance to enable chained calls. RAISES DESCRIPTION ValueError If one of the command's names is already registered in a strict command group. as_sub_command # as_sub_command ( name , / , * names , validate_arg_keys = True ) Build a message command in this group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a sub-command. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ). as_sub_group # as_sub_group ( name , / , * names , strict = False , validate_arg_keys = True ) Build a message command group in this group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a sub-command group. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ). as_message_command # as_message_command ( name , / , * names , validate_arg_keys = True ) Build a message command from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a tanjun.MessageCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . as_message_command_group # as_message_command_group ( name , / , * names , strict = False , validate_arg_keys = True ) Build a message command group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a tanjun.MessageCommandGroup . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . tanjun.commands.slash # Slash command implementations. UNDEFINED_DEFAULT module-attribute # UNDEFINED_DEFAULT = object () Singleton used for marking slash command defaults as undefined. BaseSlashCommand # Bases: base . PartialCommand [ tanjun . SlashContext ] , tanjun . BaseSlashCommand Base class used for the standard slash command implementations. set_ephemeral_default # set_ephemeral_default ( state ) Set whether this command's responses should default to ephemeral. PARAMETER DESCRIPTION state Whether this command's responses should default to ephemeral. This will be overridden by any response calls which specify flags. Setting this to None will let the default set on the parent command(s), component or client propagate and decide the ephemeral default for contexts used by this command. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This command to allow for chaining. SlashCommand # Bases: BaseSlashCommand , tanjun . SlashCommand [ _CommandCallbackSigT ] Standard implementation of a slash command. __init__ # __init__ ( callback , name , description , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , sort_options = True , validate_arg_keys = True , _wrapped_command = None ) Initialise a slash command. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands within slash command groups. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.SlashContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . SlashContext , ...], collections . abc . Coroutine [ Any , Any , None]] name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. add_attachment_option # add_attachment_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add an attachment option to the slash command. Note This will result in options of type hikari.messages.Attachment . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . add_bool_option # add_bool_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a boolean option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . add_channel_option # add_channel_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , types = None , pass_as_kwarg = True ) Add a channel option to a slash command. Note This will always result in hikari.interactions.command_interactions.InteractionChannel . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT types A collection of the channel classes and types this option should accept. If left as None or empty then the option will allow all channel types. TYPE: typing . Optional [ collections . Collection [ typing . Union [ type [ hikari . PartialChannel ], int ]]] DEFAULT: None key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If an invalid type is passed in types . If name isn't valid for this command's callback when validate_arg_keys is True . add_float_option # add_float_option ( name , description , / , * , always_float = True , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True , _stack_level = 0 ) Add a float option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_float If this is set to True then the value will always be converted to a float (this will happen before it's passed to converters). This masks behaviour from Discord where we will either be provided a float or int dependent on what the user provided. TYPE: bool DEFAULT: True autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This is a mapping of [option_name, option_value] where option_name should be a string of up to 100 characters and option_value should be a float. TYPE: typing . Optional [ collections . Mapping [ str , float ]] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Collection [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_value The option's (inclusive) minimum value. TYPE: typing . Optional [ float ] DEFAULT: None max_value The option's (inclusive) maximum value. TYPE: typing . Optional [ float ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the fields coverters , and always_float will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If min_value is greater than max_value . If name isn't valid for this command's callback when validate_arg_keys is True . add_int_option # add_int_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True , _stack_level = 0 ) Add an integer option to the slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type int . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This is a mapping of [option_name, option_value] where option_name should be a string of up to 100 characters and option_value should be an integer. TYPE: typing . Optional [ collections . Mapping [ str , int ]] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Collection [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_value The option's (inclusive) minimum value. TYPE: typing . Optional [ int ] DEFAULT: None max_value The option's (inclusive) maximum value. TYPE: typing . Optional [ int ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If min_value is greater than max_value . If name isn't valid for this command's callback when validate_arg_keys is True . add_member_option # add_member_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None ) Add a member option to a slash command. Note This will always result in hikari.interactions.base_interactions.InteractionMember . Warning Unlike the other options, this is an artificial option which adds a restraint to the USER option type and therefore cannot have pass_as_kwarg set to False as this artificial constraint isn't present when its not being passed as a keyword argument. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . add_mentionable_option # add_mentionable_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a mentionable option to a slash command. Note This may target roles, guild members or users and results in hikari.User | hikari.InteractionMember | hikari.Role . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . add_role_option # add_role_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a role option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . add_str_option # add_str_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_length = None , max_length = None , pass_as_kwarg = True , _stack_level = 0 ) Add a string option to the slash command. Note As a shorthand, choices also supports passing a list of strings rather than a dict of names to values (each string will used as both the choice's name and value with the names being capitalised). PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This either a mapping of [option_name, option_value] where both option_name and option_value should be strings of up to 100 characters or a sequence of strings where the string will be used for both the choice's name and value. TYPE: typing . Union [ collections . Mapping [ str , str ], collections . Sequence [ str ], None] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Sequence [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_length The minimum length of this string. This must be greater than or equal to 0, and less than or equal to max_length and 6000 . TYPE: typing . Optional [ int ] DEFAULT: None max_length The maximum length of this string. This must be greater then or equal to min_length and 1, and less than or equal to 6000 . TYPE: typing . Optional [ int ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . If min_length is greater than max_length . If min_length is less than 0 or greater than 6000 . If max_length is less than 1 or greater than 6000 . add_user_option # add_user_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a user option to a slash command. Note This may result in hikari.interactions.base_interactions.InteractionMember or hikari.users.User if the user isn't in the current guild or if this command was executed in a DM channel. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . set_float_autocomplete # set_float_autocomplete ( name , callback ) Set the autocomplete callback for a float option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . Passing None here will remove the autocomplete callback for the option. TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type float . set_int_autocomplete # set_int_autocomplete ( name , callback ) Set the autocomplete callback for a string option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . Passing None here will remove the autocomplete callback for the option. TYPE: tanjun . AutocompleteCallbackSig RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str . set_str_autocomplete # set_str_autocomplete ( name , callback ) Set the autocomplete callback for a str option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . Passing None here will remove the autocomplete callback for the option. TYPE: tanjun . AutocompleteCallbackSig RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str . with_float_autocomplete # with_float_autocomplete ( name ) Set the autocomplete callback for a float option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type float . with_int_autocomplete # with_int_autocomplete ( name ) Set the autocomplete callback for a integer option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type int . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type int . with_str_autocomplete # with_str_autocomplete ( name ) Set the autocomplete callback for a string option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str . wrapped_command property # wrapped_command () The command object this wraps, if any. SlashCommandGroup # Bases: BaseSlashCommand , tanjun . SlashCommandGroup Standard implementation of a slash command group. Note Unlike message command groups, slash command groups cannot be callable functions themselves. __init__ # __init__ ( name , description , / , * , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Initialise a slash command group. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands groups within another slash command groups. PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. add_command # add_command ( command ) Add a slash command to this group. Warning Command groups are only supported within top-level groups. PARAMETER DESCRIPTION command Command to add to this group. TYPE: tanjun . BaseSlashCommand RETURNS DESCRIPTION Self Object of this group to enable chained calls. as_sub_command # as_sub_command ( name , description , / , * , always_defer = False , default_to_ephemeral = None , sort_options = True , validate_arg_keys = True ) Build a tanjun.SlashCommand in this command group by decorating a function. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description. This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], SlashCommand ] The decorator callback used to make a sub-command. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand tanjun.SlashCommand ). RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. make_sub_group # make_sub_group ( name , description , / , * , default_to_ephemeral = None ) Create a sub-command group in this group. Note Unlike message command groups, slash command groups cannot be callable functions themselves. PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None RETURNS DESCRIPTION SlashCommandGroup The created sub-command group. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. remove_command # remove_command ( command ) Remove a command from this group. PARAMETER DESCRIPTION command Command to remove from this group. TYPE: tanjun . BaseSlashCommand RETURNS DESCRIPTION Self Object of this group to enable chained calls. with_command # with_command ( command ) Add a slash command to this group through a decorator call. PARAMETER DESCRIPTION command Command to add to this group. TYPE: tanjun . abc . BaseSlashCommand RETURNS DESCRIPTION tanjun . abc . BaseSlashCommand Command which was added to this group. as_slash_command # as_slash_command ( name , description , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , sort_options = True , validate_arg_keys = True ) Build a tanjun.SlashCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands within slash command groups. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_slash_command ( \"ping\" , \"Get the bot's latency\" ) async def ping_command ( self , ctx : tanjun . abc . SlashContext ) -> None : start_time = time . perf_counter () await ctx . rest . fetch_my_user () time_taken = ( time . perf_counter () - start_time ) * 1_000 await ctx . respond ( f \"PONG \\n - REST: { time_taken : .0f } mss\" ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], SlashCommand ] The decorator callback used to make a tanjun.SlashCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. slash_command_group # slash_command_group ( name , description , / , * , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Create a slash command group. Note Unlike message command groups, slash command groups cannot be callable functions themselves. Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for command groups within other slash command groups. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by [tanjun.Client.declare_global_commandsadd_command or when declare_global_commands is True Examples: Sub-commands can be added to the created slash command object through the following decorator based approach: help_group = tanjun . slash_command_group ( \"help\" , \"get help\" ) @help_group . with_command @tanjun . with_str_slash_option ( \"command_name\" , \"command name\" ) @tanjun . as_slash_command ( \"command\" , \"Get help with a command\" ) async def help_command_command ( ctx : tanjun . abc . SlashContext , command_name : str ) -> None : ... @help_group . with_command @tanjun . as_slash_command ( \"me\" , \"help me\" ) async def help_me_command ( ctx : tanjun . abc . SlashContext ) -> None : ... component = tanjun . Component () . add_slash_command ( help_group ) PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION SlashCommandGroup The command group. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long. with_attachment_slash_option # with_attachment_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add an attachment option to a slash command. For more information on this function's parameters see tanjun.SlashCommand.add_attachment_option . Examples: @with_attachment_slash_option ( \"name\" , \"A name.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , name : hikari . Attachment ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_bool_slash_option # with_bool_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a boolean option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_bool_option . Examples: @with_bool_slash_option ( \"flag\" , \"Whether this flag should be enabled.\" , default = False ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , flag : bool ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_channel_slash_option # with_channel_slash_option ( name , description , / , * , types = None , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a channel option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_channel_option . Note This will always result in hikari.interactions.command_interactions.InteractionChannel . Examples: @with_channel_slash_option ( \"channel\" , \"channel to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , channel : hikari . InteractionChannel ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_float_slash_option # with_float_slash_option ( name , description , / , * , always_float = True , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True ) Add a float option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_float_option . Examples: @with_float_slash_option ( \"float_value\" , \"Float value.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , float_value : float ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_int_slash_option # with_int_slash_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True ) Add an integer option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_int_option . Examples: @with_int_slash_option ( \"int_value\" , \"Int value.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , int_value : int ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_member_slash_option # with_member_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None ) Add a member option to a slash command. For information on this function's arguments see tanjun.SlashCommand.add_member_option . Note This will always result in hikari.interactions.base_interactions.InteractionMember . Examples: @with_member_slash_option ( \"member\" , \"member to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , member : hikari . InteractionMember ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_mentionable_slash_option # with_mentionable_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a mentionable option to a slash command. For information on this function's arguments see tanjun.SlashCommand.add_mentionable_option . Note This may target roles, guild members or users and results in hikari.User | hikari.InteractionMember | hikari.Role . Examples: @with_mentionable_slash_option ( \"mentionable\" , \"Mentionable entity to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , mentionable : [ Role , InteractionMember , User ]) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_role_slash_option # with_role_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a role option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_role_option . Examples: @with_role_slash_option ( \"role\" , \"Role to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , role : hikari . Role ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_str_slash_option # with_str_slash_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_length = None , max_length = None , pass_as_kwarg = True ) Add a string option to a slash command. For more information on this function's parameters see tanjun.commands.SlashCommand.add_str_option . Examples: @with_str_slash_option ( \"name\" , \"A name.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , name : str ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command. with_user_slash_option # with_user_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a user option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_user_option . Note This may result in hikari.interactions.base_interactions.InteractionMember or hikari.users.User if the user isn't in the current guild or if this command was executed in a DM channel. Examples: @with_user_slash_option ( \"user\" , \"user to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , user : Union [ InteractionMember , User ]) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"tanjun.commands"},{"location":"reference/commands/#tanjuncommands","text":"Standard implementations of Tanjun's command objects.","title":"tanjun.commands"},{"location":"reference/commands/#tanjun.commands.menu","text":"Menu command implementations.","title":"menu"},{"location":"reference/commands/#tanjun.commands.menu.MenuCommand","text":"Bases: base . PartialCommand [ tanjun . MenuContext ] , tanjun . MenuCommand [ _MenuCommandCallbackSigT , _MenuTypeT ] Base class used for the standard menu command implementations.","title":"MenuCommand"},{"location":"reference/commands/#tanjun.commands.menu.MenuCommand.__init__","text":"__init__ ( callback , type_ , name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , _wrapped_command = None ) Initialise a user or message menu command. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MenuContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MenuContext , ...], collections . abc . Coroutine [ Any , ANy , None]] type_ The type of menu command this is. Only hikari.commands.CommandType.USER and hikari.commands.CommandType.MESSAGE are valid here. TYPE: hikari . commands . CommandType name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters.","title":"__init__()"},{"location":"reference/commands/#tanjun.commands.menu.MenuCommand.set_ephemeral_default","text":"set_ephemeral_default ( state ) Set whether this command's responses should default to ephemeral. PARAMETER DESCRIPTION state Whether this command's responses should default to ephemeral. This will be overridden by any response calls which specify flags. Setting this to None will let the default set on the parent command(s), component or client propagate and decide the ephemeral default for contexts used by this command. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This command to allow for chaining.","title":"set_ephemeral_default()"},{"location":"reference/commands/#tanjun.commands.menu.MenuCommand.wrapped_command","text":"wrapped_command () The command object this wraps, if any.","title":"wrapped_command()"},{"location":"reference/commands/#tanjun.commands.menu.as_message_menu","text":"as_message_menu ( name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Build a message tanjun.MenuCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_message_menu ( \"message\" ) async def message_command ( self , ctx : tanjun . abc . MenuContext , message : hikari . Message ) -> None : await ctx . respond ( embed = hikari . Embed ( title = \"Message content\" , description = message . content or \"N/A\" ) ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters.","title":"as_message_menu()"},{"location":"reference/commands/#tanjun.commands.menu.as_user_menu","text":"as_user_menu ( name , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Build a user tanjun.MenuCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_user_menu ( \"user\" ) async def user_command ( self , ctx : tanjun . abc . MenuContext , user : hikari . User | hikari . InteractionMember , ) -> None : await ctx . respond ( f \"Hello { user } \" ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must be between 1 and 32 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MenuCommandCallbackSig ], MenuCommand ] The decorator callback used to make a tanjun.MenuCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name isn't in the length range of 1 to 32. If the command name has uppercase characters.","title":"as_user_menu()"},{"location":"reference/commands/#tanjun.commands.message","text":"Message command implementations.","title":"message"},{"location":"reference/commands/#tanjun.commands.message.MessageCommand","text":"Bases: base . PartialCommand [ tanjun . MessageContext ] , tanjun . MessageCommand [ _CommandCallbackSigT ] Standard implementation of a message command.","title":"MessageCommand"},{"location":"reference/commands/#tanjun.commands.message.MessageCommand.__init__","text":"__init__ ( callback , name , / , * names , validate_arg_keys = True , _wrapped_command = None ) Initialise a message command. PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MessageContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MessageContext , ...], collections . abc . Coroutine [None]] name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True","title":"__init__()"},{"location":"reference/commands/#tanjun.commands.message.MessageCommand.wrapped_command","text":"wrapped_command () The command object this wraps, if any.","title":"wrapped_command()"},{"location":"reference/commands/#tanjun.commands.message.MessageCommandGroup","text":"Bases: MessageCommand [ _CommandCallbackSigT ] , tanjun . MessageCommandGroup [ _CommandCallbackSigT ] Standard implementation of a message command group.","title":"MessageCommandGroup"},{"location":"reference/commands/#tanjun.commands.message.MessageCommandGroup.__init__","text":"__init__ ( callback , name , / , * names , strict = False , validate_arg_keys = True , _wrapped_command = None ) Initialise a message command group. PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.MessageContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . MessageContext , ...], collections . abc . Coroutine [None]] name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True","title":"__init__()"},{"location":"reference/commands/#tanjun.commands.message.MessageCommandGroup.add_command","text":"add_command ( command ) Add a command to this group. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The group instance to enable chained calls. RAISES DESCRIPTION ValueError If one of the command's names is already registered in a strict command group.","title":"add_command()"},{"location":"reference/commands/#tanjun.commands.message.MessageCommandGroup.as_sub_command","text":"as_sub_command ( name , / , * names , validate_arg_keys = True ) Build a message command in this group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a sub-command. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ).","title":"as_sub_command()"},{"location":"reference/commands/#tanjun.commands.message.MessageCommandGroup.as_sub_group","text":"as_sub_group ( name , / , * names , strict = False , validate_arg_keys = True ) Build a message command group in this group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a sub-command group. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ).","title":"as_sub_group()"},{"location":"reference/commands/#tanjun.commands.message.as_message_command","text":"as_message_command ( name , / , * names , validate_arg_keys = True ) Build a message command from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a tanjun.MessageCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope .","title":"as_message_command()"},{"location":"reference/commands/#tanjun.commands.message.as_message_command_group","text":"as_message_command_group ( name , / , * names , strict = False , validate_arg_keys = True ) Build a message command group from a decorated callback. PARAMETER DESCRIPTION name The command name. TYPE: str *names Variable positional arguments of other names for the command. TYPE: str DEFAULT: () strict Whether this command group should only allow commands without spaces in their names. This allows for a more optimised command search pattern to be used and enforces that command names are unique to a single command within the group. TYPE: bool DEFAULT: False validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], MessageCommand ] The decorator callback used to make a tanjun.MessageCommandGroup . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand , tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope .","title":"as_message_command_group()"},{"location":"reference/commands/#tanjun.commands.slash","text":"Slash command implementations.","title":"slash"},{"location":"reference/commands/#tanjun.commands.slash.UNDEFINED_DEFAULT","text":"UNDEFINED_DEFAULT = object () Singleton used for marking slash command defaults as undefined.","title":"UNDEFINED_DEFAULT"},{"location":"reference/commands/#tanjun.commands.slash.BaseSlashCommand","text":"Bases: base . PartialCommand [ tanjun . SlashContext ] , tanjun . BaseSlashCommand Base class used for the standard slash command implementations.","title":"BaseSlashCommand"},{"location":"reference/commands/#tanjun.commands.slash.BaseSlashCommand.set_ephemeral_default","text":"set_ephemeral_default ( state ) Set whether this command's responses should default to ephemeral. PARAMETER DESCRIPTION state Whether this command's responses should default to ephemeral. This will be overridden by any response calls which specify flags. Setting this to None will let the default set on the parent command(s), component or client propagate and decide the ephemeral default for contexts used by this command. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This command to allow for chaining.","title":"set_ephemeral_default()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand","text":"Bases: BaseSlashCommand , tanjun . SlashCommand [ _CommandCallbackSigT ] Standard implementation of a slash command.","title":"SlashCommand"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.__init__","text":"__init__ ( callback , name , description , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , sort_options = True , validate_arg_keys = True , _wrapped_command = None ) Initialise a slash command. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands within slash command groups. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION callback Callback to execute when the command is invoked. This should be an asynchronous callback which takes one positional argument of type tanjun.abc.SlashContext , returns None and may use dependency injection to access other services. TYPE: collections . abc . Callable [[ tanjun . abc . SlashContext , ...], collections . abc . Coroutine [ Any , Any , None]] name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"__init__()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.add_attachment_option","text":"add_attachment_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add an attachment option to the slash command. Note This will result in options of type hikari.messages.Attachment . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_attachment_option()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.add_bool_option","text":"add_bool_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a boolean option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_bool_option()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.add_channel_option","text":"add_channel_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , types = None , pass_as_kwarg = True ) Add a channel option to a slash command. Note This will always result in hikari.interactions.command_interactions.InteractionChannel . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT types A collection of the channel classes and types this option should accept. If left as None or empty then the option will allow all channel types. TYPE: typing . Optional [ collections . Collection [ typing . Union [ type [ hikari . PartialChannel ], int ]]] DEFAULT: None key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If an invalid type is passed in types . If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_channel_option()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.add_float_option","text":"add_float_option ( name , description , / , * , always_float = True , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True , _stack_level = 0 ) Add a float option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_float If this is set to True then the value will always be converted to a float (this will happen before it's passed to converters). This masks behaviour from Discord where we will either be provided a float or int dependent on what the user provided. TYPE: bool DEFAULT: True autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This is a mapping of [option_name, option_value] where option_name should be a string of up to 100 characters and option_value should be a float. TYPE: typing . Optional [ collections . Mapping [ str , float ]] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Collection [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_value The option's (inclusive) minimum value. TYPE: typing . Optional [ float ] DEFAULT: None max_value The option's (inclusive) maximum value. TYPE: typing . Optional [ float ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the fields coverters , and always_float will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If min_value is greater than max_value . If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_float_option()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.add_int_option","text":"add_int_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True , _stack_level = 0 ) Add an integer option to the slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type int . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This is a mapping of [option_name, option_value] where option_name should be a string of up to 100 characters and option_value should be an integer. TYPE: typing . Optional [ collections . Mapping [ str , int ]] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Collection [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_value The option's (inclusive) minimum value. TYPE: typing . Optional [ int ] DEFAULT: None max_value The option's (inclusive) maximum value. TYPE: typing . Optional [ int ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If min_value is greater than max_value . If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_int_option()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.add_member_option","text":"add_member_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None ) Add a member option to a slash command. Note This will always result in hikari.interactions.base_interactions.InteractionMember . Warning Unlike the other options, this is an artificial option which adds a restraint to the USER option type and therefore cannot have pass_as_kwarg set to False as this artificial constraint isn't present when its not being passed as a keyword argument. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_member_option()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.add_mentionable_option","text":"add_mentionable_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a mentionable option to a slash command. Note This may target roles, guild members or users and results in hikari.User | hikari.InteractionMember | hikari.Role . PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_mentionable_option()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.add_role_option","text":"add_role_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a role option to a slash command. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_role_option()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.add_str_option","text":"add_str_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_length = None , max_length = None , pass_as_kwarg = True , _stack_level = 0 ) Add a string option to the slash command. Note As a shorthand, choices also supports passing a list of strings rather than a dict of names to values (each string will used as both the choice's name and value with the names being capitalised). PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] autocomplete The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] DEFAULT: None choices The option's choices. This either a mapping of [option_name, option_value] where both option_name and option_value should be strings of up to 100 characters or a sequence of strings where the string will be used for both the choice's name and value. TYPE: typing . Union [ collections . Mapping [ str , str ], collections . Sequence [ str ], None] DEFAULT: None converters The option's converters. This may be either one or multiple converter callbacks used to convert the option's value to the final form. If no converters are provided then the raw value will be passed. Only the first converter to pass will be used. TYPE: typing . Union [ collections . Sequence [ ConverterSig ], ConverterSig ] DEFAULT: () default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None min_length The minimum length of this string. This must be greater than or equal to 0, and less than or equal to max_length and 6000 . TYPE: typing . Optional [ int ] DEFAULT: None max_length The maximum length of this string. This must be greater then or equal to min_length and 1, and less than or equal to 6000 . TYPE: typing . Optional [ int ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used and the coverters field will be ignored. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True . If min_length is greater than max_length . If min_length is less than 0 or greater than 6000 . If max_length is less than 1 or greater than 6000 .","title":"add_str_option()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.add_user_option","text":"add_user_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a user option to a slash command. Note This may result in hikari.interactions.base_interactions.InteractionMember or hikari.users.User if the user isn't in the current guild or if this command was executed in a DM channel. PARAMETER DESCRIPTION name The option's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The option's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default The option's default value. If this is left as undefined then this option will be required. TYPE: typing . Any DEFAULT: UNDEFINED_DEFAULT key Name of the argument this option's value should be passed to. This defaults to the first name provided in name and is no-op if pass_as_kwarg is False . TYPE: typing . Optional [ str ] DEFAULT: None pass_as_kwarg Whether or not to pass this option as a keyword argument to the command callback. If False is passed here then default will only decide whether the option is required without the actual value being used. TYPE: bool DEFAULT: True RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the option name doesn't fit Discord's requirements. If the option name has uppercase characters. If the option description is over 100 characters in length. If the option has more than 25 choices. If the command already has 25 options. If name isn't valid for this command's callback when validate_arg_keys is True .","title":"add_user_option()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.set_float_autocomplete","text":"set_float_autocomplete ( name , callback ) Set the autocomplete callback for a float option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . Passing None here will remove the autocomplete callback for the option. TYPE: typing . Optional [ tanjun . AutocompleteCallbackSig ] RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type float .","title":"set_float_autocomplete()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.set_int_autocomplete","text":"set_int_autocomplete ( name , callback ) Set the autocomplete callback for a string option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . Passing None here will remove the autocomplete callback for the option. TYPE: tanjun . AutocompleteCallbackSig RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str .","title":"set_int_autocomplete()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.set_str_autocomplete","text":"set_str_autocomplete ( name , callback ) Set the autocomplete callback for a str option. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str callback The autocomplete callback for the option. More information on this callback's signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . Passing None here will remove the autocomplete callback for the option. TYPE: tanjun . AutocompleteCallbackSig RETURNS DESCRIPTION Self The command object for chaining. RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str .","title":"set_str_autocomplete()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.with_float_autocomplete","text":"with_float_autocomplete ( name ) Set the autocomplete callback for a float option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type float . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type float .","title":"with_float_autocomplete()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.with_int_autocomplete","text":"with_int_autocomplete ( name ) Set the autocomplete callback for a integer option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type int . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type int .","title":"with_int_autocomplete()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.with_str_autocomplete","text":"with_str_autocomplete ( name ) Set the autocomplete callback for a string option through a decorator call. PARAMETER DESCRIPTION name The option's name. If localised names were provided for the option then this should be the default name. TYPE: str RETURNS DESCRIPTION Collections . abc . Callable [[ tanjun . abc . AutocompleteCallbackSig ], tanjun . abc . AutocompleteCallbackSig ] Decorator callback used to capture the autocomplete callback. More information on the autocomplete signature can be found at tanjun.abc.AutocompleteCallbackSig and the 2nd positional argument should be of type str . RAISES DESCRIPTION KeyError Raises a key error if the option doesn't exist. TypeError Raises a type error if the option isn't of type str .","title":"with_str_autocomplete()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommand.wrapped_command","text":"wrapped_command () The command object this wraps, if any.","title":"wrapped_command()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommandGroup","text":"Bases: BaseSlashCommand , tanjun . SlashCommandGroup Standard implementation of a slash command group. Note Unlike message command groups, slash command groups cannot be callable functions themselves.","title":"SlashCommandGroup"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommandGroup.__init__","text":"__init__ ( name , description , / , * , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Initialise a slash command group. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands groups within another slash command groups. PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"__init__()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommandGroup.add_command","text":"add_command ( command ) Add a slash command to this group. Warning Command groups are only supported within top-level groups. PARAMETER DESCRIPTION command Command to add to this group. TYPE: tanjun . BaseSlashCommand RETURNS DESCRIPTION Self Object of this group to enable chained calls.","title":"add_command()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommandGroup.as_sub_command","text":"as_sub_command ( name , description , / , * , always_defer = False , default_to_ephemeral = None , sort_options = True , validate_arg_keys = True ) Build a tanjun.SlashCommand in this command group by decorating a function. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . PARAMETER DESCRIPTION name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description. This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], SlashCommand ] The decorator callback used to make a sub-command. This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand tanjun.SlashCommand ). RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"as_sub_command()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommandGroup.make_sub_group","text":"make_sub_group ( name , description , / , * , default_to_ephemeral = None ) Create a sub-command group in this group. Note Unlike message command groups, slash command groups cannot be callable functions themselves. PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None RETURNS DESCRIPTION SlashCommandGroup The created sub-command group. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"make_sub_group()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommandGroup.remove_command","text":"remove_command ( command ) Remove a command from this group. PARAMETER DESCRIPTION command Command to remove from this group. TYPE: tanjun . BaseSlashCommand RETURNS DESCRIPTION Self Object of this group to enable chained calls.","title":"remove_command()"},{"location":"reference/commands/#tanjun.commands.slash.SlashCommandGroup.with_command","text":"with_command ( command ) Add a slash command to this group through a decorator call. PARAMETER DESCRIPTION command Command to add to this group. TYPE: tanjun . abc . BaseSlashCommand RETURNS DESCRIPTION tanjun . abc . BaseSlashCommand Command which was added to this group.","title":"with_command()"},{"location":"reference/commands/#tanjun.commands.slash.as_slash_command","text":"as_slash_command ( name , description , / , * , always_defer = False , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True , sort_options = True , validate_arg_keys = True ) Build a tanjun.SlashCommand by decorating a function. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by tanjun.Client.declare_global_commands or when declare_global_commands is True Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for commands within slash command groups. Note If you want your first response to be ephemeral while using always_defer , you must set default_to_ephemeral to True . Examples: @as_slash_command ( \"ping\" , \"Get the bot's latency\" ) async def ping_command ( self , ctx : tanjun . abc . SlashContext ) -> None : start_time = time . perf_counter () await ctx . rest . fetch_my_user () time_taken = ( time . perf_counter () - start_time ) * 1_000 await ctx . respond ( f \"PONG \\n - REST: { time_taken : .0f } mss\" ) PARAMETER DESCRIPTION name The command's name (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The command's description (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] always_defer Whether the contexts this command is executed with should always be deferred before being passed to the command's callback. TYPE: bool DEFAULT: False default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True sort_options Whether this command should sort its set options based on whether they're required. If this is True then the options are re-sorted to meet the requirement from Discord that required command options be listed before optional ones. TYPE: bool DEFAULT: True validate_arg_keys Whether to validate that option keys match the command callback's signature. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . CommandCallbackSig ], SlashCommand ] The decorator callback used to make a tanjun.SlashCommand . This can either wrap a raw command callback or another callable command instance (e.g. tanjun.MenuCommand , tanjun.MessageCommand tanjun.SlashCommand ) and will manage loading the other command into a component when using tanjun.Component.load_from_scope . RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"as_slash_command()"},{"location":"reference/commands/#tanjun.commands.slash.slash_command_group","text":"slash_command_group ( name , description , / , * , default_member_permissions = None , default_to_ephemeral = None , dm_enabled = None , is_global = True ) Create a slash command group. Note Unlike message command groups, slash command groups cannot be callable functions themselves. Warning default_member_permissions , \"dm_enabled\" and is_global are ignored for command groups within other slash command groups. Note Under the standard implementation, is_global is used to determine whether the command should be bulk set by [tanjun.Client.declare_global_commandsadd_command or when declare_global_commands is True Examples: Sub-commands can be added to the created slash command object through the following decorator based approach: help_group = tanjun . slash_command_group ( \"help\" , \"get help\" ) @help_group . with_command @tanjun . with_str_slash_option ( \"command_name\" , \"command name\" ) @tanjun . as_slash_command ( \"command\" , \"Get help with a command\" ) async def help_command_command ( ctx : tanjun . abc . SlashContext , command_name : str ) -> None : ... @help_group . with_command @tanjun . as_slash_command ( \"me\" , \"help me\" ) async def help_me_command ( ctx : tanjun . abc . SlashContext ) -> None : ... component = tanjun . Component () . add_slash_command ( help_group ) PARAMETER DESCRIPTION name The name of the command group (supports localisation ). This must fit discord's requirements . TYPE: typing . Union [ str , collections . Mapping [ str , str ]] description The description of the command group (supports localisation ). This should be inclusively between 1-100 characters in length. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] default_member_permissions Member permissions necessary to utilize this command by default. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Union [ hikari . Permissions , int , None] DEFAULT: None default_to_ephemeral Whether this command's responses should default to ephemeral unless flags are set to override this. If this is left as None then the default set on the parent command(s), component or client will be in effect. TYPE: typing . Optional [ bool ] DEFAULT: None dm_enabled Whether this command is enabled in DMs with the bot. If this is None then the configuration for the parent component or client will be used. TYPE: typing . Optional [ bool ] DEFAULT: None is_global Whether this command is a global command. TYPE: bool DEFAULT: True RETURNS DESCRIPTION SlashCommandGroup The command group. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If the command name doesn't fit Discord's requirements. If the command name has uppercase characters. If the description is over 100 characters long.","title":"slash_command_group()"},{"location":"reference/commands/#tanjun.commands.slash.with_attachment_slash_option","text":"with_attachment_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add an attachment option to a slash command. For more information on this function's parameters see tanjun.SlashCommand.add_attachment_option . Examples: @with_attachment_slash_option ( \"name\" , \"A name.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , name : hikari . Attachment ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_attachment_slash_option()"},{"location":"reference/commands/#tanjun.commands.slash.with_bool_slash_option","text":"with_bool_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a boolean option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_bool_option . Examples: @with_bool_slash_option ( \"flag\" , \"Whether this flag should be enabled.\" , default = False ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , flag : bool ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_bool_slash_option()"},{"location":"reference/commands/#tanjun.commands.slash.with_channel_slash_option","text":"with_channel_slash_option ( name , description , / , * , types = None , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a channel option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_channel_option . Note This will always result in hikari.interactions.command_interactions.InteractionChannel . Examples: @with_channel_slash_option ( \"channel\" , \"channel to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , channel : hikari . InteractionChannel ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_channel_slash_option()"},{"location":"reference/commands/#tanjun.commands.slash.with_float_slash_option","text":"with_float_slash_option ( name , description , / , * , always_float = True , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True ) Add a float option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_float_option . Examples: @with_float_slash_option ( \"float_value\" , \"Float value.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , float_value : float ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_float_slash_option()"},{"location":"reference/commands/#tanjun.commands.slash.with_int_slash_option","text":"with_int_slash_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_value = None , max_value = None , pass_as_kwarg = True ) Add an integer option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_int_option . Examples: @with_int_slash_option ( \"int_value\" , \"Int value.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , int_value : int ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_int_slash_option()"},{"location":"reference/commands/#tanjun.commands.slash.with_member_slash_option","text":"with_member_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None ) Add a member option to a slash command. For information on this function's arguments see tanjun.SlashCommand.add_member_option . Note This will always result in hikari.interactions.base_interactions.InteractionMember . Examples: @with_member_slash_option ( \"member\" , \"member to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , member : hikari . InteractionMember ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_member_slash_option()"},{"location":"reference/commands/#tanjun.commands.slash.with_mentionable_slash_option","text":"with_mentionable_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a mentionable option to a slash command. For information on this function's arguments see tanjun.SlashCommand.add_mentionable_option . Note This may target roles, guild members or users and results in hikari.User | hikari.InteractionMember | hikari.Role . Examples: @with_mentionable_slash_option ( \"mentionable\" , \"Mentionable entity to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , mentionable : [ Role , InteractionMember , User ]) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_mentionable_slash_option()"},{"location":"reference/commands/#tanjun.commands.slash.with_role_slash_option","text":"with_role_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a role option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_role_option . Examples: @with_role_slash_option ( \"role\" , \"Role to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , role : hikari . Role ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_role_slash_option()"},{"location":"reference/commands/#tanjun.commands.slash.with_str_slash_option","text":"with_str_slash_option ( name , description , / , * , autocomplete = None , choices = None , converters = (), default = UNDEFINED_DEFAULT , key = None , min_length = None , max_length = None , pass_as_kwarg = True ) Add a string option to a slash command. For more information on this function's parameters see tanjun.commands.SlashCommand.add_str_option . Examples: @with_str_slash_option ( \"name\" , \"A name.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , name : str ) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_str_slash_option()"},{"location":"reference/commands/#tanjun.commands.slash.with_user_slash_option","text":"with_user_slash_option ( name , description , / , * , default = UNDEFINED_DEFAULT , key = None , pass_as_kwarg = True ) Add a user option to a slash command. For information on this function's parameters see tanjun.SlashCommand.add_user_option . Note This may result in hikari.interactions.base_interactions.InteractionMember or hikari.users.User if the user isn't in the current guild or if this command was executed in a DM channel. Examples: @with_user_slash_option ( \"user\" , \"user to target.\" ) @as_slash_command ( \"command\" , \"A command\" ) async def command ( self , ctx : tanjun . abc . SlashContext , user : Union [ InteractionMember , User ]) -> None : ... RETURNS DESCRIPTION collections . abc . Callable [[ _SlashCommandT ], _SlashCommandT ] Decorator callback which adds the option to the command.","title":"with_user_slash_option()"},{"location":"reference/components/","text":"tanjun.components # Standard implementation of Tanjun's \"components\" used to manage separate features within a client. OnCallbackSig module-attribute # OnCallbackSig = typing . Union [ collections . Callable [ Ellipsis , collections . Coroutine [ typing . Any , typing . Any , None ]], collections . Callable [ Ellipsis , None ]] Type hint of a on_open or on_close component callback. These support dependency injection, should expect no positional arguments and should return None . AbstractComponentLoader # Bases: abc . ABC Abstract interface used for loading utility into a standard tanjun.Component . load_into_component abstractmethod # load_into_component ( component ) Load the object into the component. PARAMETER DESCRIPTION component The component this object should be loaded into. TYPE: tanjun . Component Component # Bases: tanjun . Component Standard implementation of tanjun.abc.Component . This is a collcetion of commands (both message and slash), hooks and listener callbacks which can be added to a generic client. Note This implementation supports dependency injection for its checks, command callbacks and listeners when linked to a client which supports dependency injection. __init__ # __init__ ( * , name = None , strict = False ) Initialise a new component. PARAMETER DESCRIPTION name The component's identifier. If not provided then this will be a random string. TYPE: typing . Optional [ str ] DEFAULT: None strict Whether this component should use a stricter (more optimal) approach for message command search. When this is True , message command names will not be allowed to contain spaces and will have to be unique to one command within the component. TYPE: bool DEFAULT: False add_check # add_check ( check ) Add a command check to this component to be used for all its commands. PARAMETER DESCRIPTION check The check to add. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self This component to enable method chaining. add_client_callback # add_client_callback ( name , callback ) Add a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] callback The callback to register. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to. TYPE: tanjun . MetaEventSig RETURNS DESCRIPTION Self The client instance to enable chained calls. add_command # add_command ( command ) Add a command to this component. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . ExecutableCommand [ typing . Any ] RETURNS DESCRIPTION Self The current component to allow for chaining. add_message_command # add_message_command ( command ) Add a message command to the component. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The component to allow method chaining. RAISES DESCRIPTION ValueError If one of the command's name is already registered in a strict component. add_on_close # add_on_close ( callback ) Add a close callback to this component. Note Unlike the closing and closed client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The close callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION Self The component object to enable call chaining. add_on_open # add_on_open ( callback ) Add a open callback to this component. Note Unlike the starting and started client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The open callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION Self The component object to enable call chaining. add_schedule # add_schedule ( schedule ) Add a schedule to the component. PARAMETER DESCRIPTION schedule The schedule to add. TYPE: schedules_ . AbstractSchedule RETURNS DESCRIPTION Self The component itself for chaining. checks property # checks () Collection of the checks being run against every command execution in this component. get_client_callbacks # get_client_callbacks ( name ) Get a collection of the callbacks registered for a specific name. PARAMETER DESCRIPTION name The name to get the callbacks registered for. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Collection [ MetaEventSig ] Collection of the callbacks for the provided name. hooks property # hooks () The general command hooks set for this component, if any. load_from_scope # load_from_scope ( * , include_globals = False , scope = None ) Load entries such as top-level commands into the component from the calling scope. Note This will load schedules which support and commands AbstractComponentLoader (all standard implementations support this) and will ignore commands which are owned by command groups. Note This will detect entries from the calling scope which implement tanjun.components.AbstractComponentLoader unless scope is passed but this isn't possible in a stack-less python implementation; in stack-less environments the scope will have to be explicitly passed as scope . PARAMETER DESCRIPTION include_globals Whether to include global variables (along with local) while detecting from the calling scope. This cannot be True when scope is provided and will only ever be needed when the local scope is different from the global scope. TYPE: bool DEFAULT: False scope The scope to detect entries which implement tanjun.components.AbstractComponentLoader from. This overrides the default usage of stackframe introspection. TYPE: typing . Optional [ collections . Mapping [ str , typing . Any ]] DEFAULT: None RETURNS DESCRIPTION Self The current component to allow for chaining. RAISES DESCRIPTION RuntimeError If this is called in a python implementation which doesn't support stack frame inspection when scope is not provided. ValueError If scope is provided when include_globals is True. make_loader # make_loader ( * , copy = True ) Make a loader/unloader for this component. This enables loading, unloading and reloading of this component into a client by targeting the module using tanjun.Client.load_modules , tanjun.Client.unload_modules and tanjun.Client.reload_modules . PARAMETER DESCRIPTION copy Whether to copy the component before loading it into a client. TYPE: bool DEFAULT: True RETURNS DESCRIPTION tanjun . abc . ClientLoader The loader for this component. menu_hooks property # menu_hooks () The menu command hooks set for this component, if any. message_hooks property # message_hooks () The message command hooks set for this component, if any. remove_check # remove_check ( check ) Remove a command check from this component. PARAMETER DESCRIPTION check The check to remove. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self This component to enable method chaining. RAISES DESCRIPTION ValueError If the check is not registered with this component. remove_client_callback # remove_client_callback ( name , callback ) Remove a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: str callback The callback to remove from the client's callbacks. TYPE: tanjun . MetaEventSig RAISES DESCRIPTION KeyError If the provided name isn't found. ValueError If the provided callback isn't found. RETURNS DESCRIPTION Self The client instance to enable chained calls. remove_command # remove_command ( command ) Remove a command from this component. PARAMETER DESCRIPTION command The command to remove. TYPE: tanjun . ExecutableCommand [ typing . Any ] RETURNS DESCRIPTION Self This component to enable method chaining. remove_schedule # remove_schedule ( schedule ) Remove a schedule from the component. PARAMETER DESCRIPTION schedule The schedule to remove TYPE: schedules_ . AbstractSchedule RETURNS DESCRIPTION Self The component itself for chaining. RAISES DESCRIPTION ValueError If the schedule isn't registered. schedules property # schedules () Collection of the schedules registered to this component. set_case_sensitive # set_case_sensitive ( state ) Set whether this component defaults to being case sensitive for component. PARAMETER DESCRIPTION state Whether this component's message commands should be matched case-sensitively. If this is left as None then the client's case-sensitive setting will be used. TYPE: typing . Optional [ bool ] set_default_app_command_permissions # set_default_app_command_permissions ( permissions ) Set the default member permissions needed for this component's commands. Warning This may be overridden by guild staff and does not apply to admins. PARAMETER DESCRIPTION permissions The default member permissions needed for this component's application commands. If this is left as None then this config will be inherited from the parent client. This may be overridden by tanjun.abc.AppCommand.default_member_permissions and if this is left as None then this config will be inherited from the parent client. TYPE: typing . Union [ int , hikari . Permissions , None] RETURNS DESCRIPTION Self This client to enable method chaining. set_dms_enabled_for_app_cmds # set_dms_enabled_for_app_cmds ( state ) Set whether this component's commands should be enabled in DMs. PARAMETER DESCRIPTION state Whether to enable this component's commands in DMs. This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and if this is left as None then this config will be inherited from the parent client. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This client to enable method chaining. set_ephemeral_default # set_ephemeral_default ( state ) Set whether slash contexts executed in this component should default to ephemeral responses. PARAMETER DESCRIPTION state Whether slash command contexts executed in this component should should default to ephemeral. This will be overridden by any response calls which specify flags. Setting this to None will let the default set on the parent client propagate and decide the ephemeral default behaviour. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This component to enable method chaining. set_hooks # set_hooks ( hooks ) Set hooks to be called during the execution of all of this component's commands. PARAMETER DESCRIPTION hooks The command hooks to set. TYPE: typing . Optional [ tanjun . AnyHooks ] RETURNS DESCRIPTION Self This component to enable method chaining. set_menu_hooks # set_menu_hooks ( hooks ) Set hooks to be called during the execution of this component's menu commands. PARAMETER DESCRIPTION hooks The menu command hooks to set. TYPE: typing . Optional [ tanjun . MenuHooks ] RETURNS DESCRIPTION Self This component to enable method chaining. set_message_hooks # set_message_hooks ( hooks ) Set hooks to be called during the execution of this component's message commands. PARAMETER DESCRIPTION hooks The message command hooks to set. TYPE: typing . Optional [ tanjun . MessageHooks ] RETURNS DESCRIPTION Self This component to enable method chaining. set_slash_hooks # set_slash_hooks ( hooks ) Set hooks to be called during the execution of this component's slash commands. PARAMETER DESCRIPTION hooks The slash command hooks to set. TYPE: typing . Optional [ tanjun . SlashHooks ] RETURNS DESCRIPTION Self This component to enable method chaining. slash_hooks property # slash_hooks () The slash command hooks set for this component, if any. with_check # with_check ( check ) Add a general command check to this component through a decorator call. PARAMETER DESCRIPTION check The check to add. TYPE: tanjun . abc . CheckSig RETURNS DESCRIPTION tanjun . abc . CheckSig The added check. with_client_callback # with_client_callback ( name ) Add a client callback through a decorator call. Examples: client = tanjun . Client . from_rest_bot ( bot ) @client . with_client_callback ( \"closed\" ) async def on_close () -> None : raise NotImplementedError PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MetaEventSig ], tanjun . abc . MetaEventSig ] Decorator callback used to register the client callback. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to. with_command # with_command ( command = None , / , * , copy = False , follow_wrapped = False ) Add a command to this component through a decorator call. Examples: This may be used inconjunction with tanjun.as_slash_command and tanjun.as_message_command . @component . with_command @tanjun . with_slash_str_option ( \"option_name\" , \"option description\" ) @tanjun . as_slash_command ( \"command_name\" , \"command description\" ) async def slash_command ( ctx : tanjun . abc . Context , arg : str ) -> None : await ctx . respond ( f \"Hi { arg } \" ) @component . with_command @tanjun . with_argument ( \"argument_name\" ) @tanjun . as_message_command ( \"command_name\" ) async def message_command ( ctx : tanjun . abc . Context , arg : str ) -> None : await ctx . respond ( f \"Hi { arg } \" ) PARAMETER DESCRIPTION command The command to add to this component. TYPE: typing . Optional [ _CommandT ] DEFAULT: None copy Whether to copy the command before adding it to this component. TYPE: bool DEFAULT: False follow_wrapped Whether to also add any commands command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The added command. with_on_close # with_on_close ( callback ) Add a close callback to this component through a decorator call. Note Unlike the closing and closed client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The close callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION OnCallbackSig The added close callback. with_on_open # with_on_open ( callback ) Add a open callback to this component through a decorator call. Note Unlike the starting and started client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The open callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION OnCallbackSig The added open callback. with_schedule # with_schedule ( schedule ) Add a schedule to the component through a decorator call. Example # This may be used in conjunction with tanjun.as_interval . @component . with_schedule @tanjun . as_interval ( 60 ) async def my_schedule (): print ( \"I'm running every minute!\" ) PARAMETER DESCRIPTION schedule The schedule to add. TYPE: tanjun . schedules . AbstractSchedule RETURNS DESCRIPTION tanjun . schedules . AbstractSchedule The added schedule.","title":"tanjun.components"},{"location":"reference/components/#tanjuncomponents","text":"Standard implementation of Tanjun's \"components\" used to manage separate features within a client.","title":"tanjun.components"},{"location":"reference/components/#tanjun.components.OnCallbackSig","text":"OnCallbackSig = typing . Union [ collections . Callable [ Ellipsis , collections . Coroutine [ typing . Any , typing . Any , None ]], collections . Callable [ Ellipsis , None ]] Type hint of a on_open or on_close component callback. These support dependency injection, should expect no positional arguments and should return None .","title":"OnCallbackSig"},{"location":"reference/components/#tanjun.components.AbstractComponentLoader","text":"Bases: abc . ABC Abstract interface used for loading utility into a standard tanjun.Component .","title":"AbstractComponentLoader"},{"location":"reference/components/#tanjun.components.AbstractComponentLoader.load_into_component","text":"load_into_component ( component ) Load the object into the component. PARAMETER DESCRIPTION component The component this object should be loaded into. TYPE: tanjun . Component","title":"load_into_component()"},{"location":"reference/components/#tanjun.components.Component","text":"Bases: tanjun . Component Standard implementation of tanjun.abc.Component . This is a collcetion of commands (both message and slash), hooks and listener callbacks which can be added to a generic client. Note This implementation supports dependency injection for its checks, command callbacks and listeners when linked to a client which supports dependency injection.","title":"Component"},{"location":"reference/components/#tanjun.components.Component.__init__","text":"__init__ ( * , name = None , strict = False ) Initialise a new component. PARAMETER DESCRIPTION name The component's identifier. If not provided then this will be a random string. TYPE: typing . Optional [ str ] DEFAULT: None strict Whether this component should use a stricter (more optimal) approach for message command search. When this is True , message command names will not be allowed to contain spaces and will have to be unique to one command within the component. TYPE: bool DEFAULT: False","title":"__init__()"},{"location":"reference/components/#tanjun.components.Component.add_check","text":"add_check ( check ) Add a command check to this component to be used for all its commands. PARAMETER DESCRIPTION check The check to add. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self This component to enable method chaining.","title":"add_check()"},{"location":"reference/components/#tanjun.components.Component.add_client_callback","text":"add_client_callback ( name , callback ) Add a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] callback The callback to register. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to. TYPE: tanjun . MetaEventSig RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"add_client_callback()"},{"location":"reference/components/#tanjun.components.Component.add_command","text":"add_command ( command ) Add a command to this component. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . ExecutableCommand [ typing . Any ] RETURNS DESCRIPTION Self The current component to allow for chaining.","title":"add_command()"},{"location":"reference/components/#tanjun.components.Component.add_message_command","text":"add_message_command ( command ) Add a message command to the component. PARAMETER DESCRIPTION command The command to add. TYPE: tanjun . MessageCommand [ typing . Any ] RETURNS DESCRIPTION Self The component to allow method chaining. RAISES DESCRIPTION ValueError If one of the command's name is already registered in a strict component.","title":"add_message_command()"},{"location":"reference/components/#tanjun.components.Component.add_on_close","text":"add_on_close ( callback ) Add a close callback to this component. Note Unlike the closing and closed client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The close callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION Self The component object to enable call chaining.","title":"add_on_close()"},{"location":"reference/components/#tanjun.components.Component.add_on_open","text":"add_on_open ( callback ) Add a open callback to this component. Note Unlike the starting and started client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The open callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION Self The component object to enable call chaining.","title":"add_on_open()"},{"location":"reference/components/#tanjun.components.Component.add_schedule","text":"add_schedule ( schedule ) Add a schedule to the component. PARAMETER DESCRIPTION schedule The schedule to add. TYPE: schedules_ . AbstractSchedule RETURNS DESCRIPTION Self The component itself for chaining.","title":"add_schedule()"},{"location":"reference/components/#tanjun.components.Component.checks","text":"checks () Collection of the checks being run against every command execution in this component.","title":"checks()"},{"location":"reference/components/#tanjun.components.Component.get_client_callbacks","text":"get_client_callbacks ( name ) Get a collection of the callbacks registered for a specific name. PARAMETER DESCRIPTION name The name to get the callbacks registered for. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Collection [ MetaEventSig ] Collection of the callbacks for the provided name.","title":"get_client_callbacks()"},{"location":"reference/components/#tanjun.components.Component.hooks","text":"hooks () The general command hooks set for this component, if any.","title":"hooks()"},{"location":"reference/components/#tanjun.components.Component.load_from_scope","text":"load_from_scope ( * , include_globals = False , scope = None ) Load entries such as top-level commands into the component from the calling scope. Note This will load schedules which support and commands AbstractComponentLoader (all standard implementations support this) and will ignore commands which are owned by command groups. Note This will detect entries from the calling scope which implement tanjun.components.AbstractComponentLoader unless scope is passed but this isn't possible in a stack-less python implementation; in stack-less environments the scope will have to be explicitly passed as scope . PARAMETER DESCRIPTION include_globals Whether to include global variables (along with local) while detecting from the calling scope. This cannot be True when scope is provided and will only ever be needed when the local scope is different from the global scope. TYPE: bool DEFAULT: False scope The scope to detect entries which implement tanjun.components.AbstractComponentLoader from. This overrides the default usage of stackframe introspection. TYPE: typing . Optional [ collections . Mapping [ str , typing . Any ]] DEFAULT: None RETURNS DESCRIPTION Self The current component to allow for chaining. RAISES DESCRIPTION RuntimeError If this is called in a python implementation which doesn't support stack frame inspection when scope is not provided. ValueError If scope is provided when include_globals is True.","title":"load_from_scope()"},{"location":"reference/components/#tanjun.components.Component.make_loader","text":"make_loader ( * , copy = True ) Make a loader/unloader for this component. This enables loading, unloading and reloading of this component into a client by targeting the module using tanjun.Client.load_modules , tanjun.Client.unload_modules and tanjun.Client.reload_modules . PARAMETER DESCRIPTION copy Whether to copy the component before loading it into a client. TYPE: bool DEFAULT: True RETURNS DESCRIPTION tanjun . abc . ClientLoader The loader for this component.","title":"make_loader()"},{"location":"reference/components/#tanjun.components.Component.menu_hooks","text":"menu_hooks () The menu command hooks set for this component, if any.","title":"menu_hooks()"},{"location":"reference/components/#tanjun.components.Component.message_hooks","text":"message_hooks () The message command hooks set for this component, if any.","title":"message_hooks()"},{"location":"reference/components/#tanjun.components.Component.remove_check","text":"remove_check ( check ) Remove a command check from this component. PARAMETER DESCRIPTION check The check to remove. TYPE: tanjun . CheckSig RETURNS DESCRIPTION Self This component to enable method chaining. RAISES DESCRIPTION ValueError If the check is not registered with this component.","title":"remove_check()"},{"location":"reference/components/#tanjun.components.Component.remove_client_callback","text":"remove_client_callback ( name , callback ) Remove a client callback. PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: str callback The callback to remove from the client's callbacks. TYPE: tanjun . MetaEventSig RAISES DESCRIPTION KeyError If the provided name isn't found. ValueError If the provided callback isn't found. RETURNS DESCRIPTION Self The client instance to enable chained calls.","title":"remove_client_callback()"},{"location":"reference/components/#tanjun.components.Component.remove_command","text":"remove_command ( command ) Remove a command from this component. PARAMETER DESCRIPTION command The command to remove. TYPE: tanjun . ExecutableCommand [ typing . Any ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"remove_command()"},{"location":"reference/components/#tanjun.components.Component.remove_schedule","text":"remove_schedule ( schedule ) Remove a schedule from the component. PARAMETER DESCRIPTION schedule The schedule to remove TYPE: schedules_ . AbstractSchedule RETURNS DESCRIPTION Self The component itself for chaining. RAISES DESCRIPTION ValueError If the schedule isn't registered.","title":"remove_schedule()"},{"location":"reference/components/#tanjun.components.Component.schedules","text":"schedules () Collection of the schedules registered to this component.","title":"schedules()"},{"location":"reference/components/#tanjun.components.Component.set_case_sensitive","text":"set_case_sensitive ( state ) Set whether this component defaults to being case sensitive for component. PARAMETER DESCRIPTION state Whether this component's message commands should be matched case-sensitively. If this is left as None then the client's case-sensitive setting will be used. TYPE: typing . Optional [ bool ]","title":"set_case_sensitive()"},{"location":"reference/components/#tanjun.components.Component.set_default_app_command_permissions","text":"set_default_app_command_permissions ( permissions ) Set the default member permissions needed for this component's commands. Warning This may be overridden by guild staff and does not apply to admins. PARAMETER DESCRIPTION permissions The default member permissions needed for this component's application commands. If this is left as None then this config will be inherited from the parent client. This may be overridden by tanjun.abc.AppCommand.default_member_permissions and if this is left as None then this config will be inherited from the parent client. TYPE: typing . Union [ int , hikari . Permissions , None] RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_default_app_command_permissions()"},{"location":"reference/components/#tanjun.components.Component.set_dms_enabled_for_app_cmds","text":"set_dms_enabled_for_app_cmds ( state ) Set whether this component's commands should be enabled in DMs. PARAMETER DESCRIPTION state Whether to enable this component's commands in DMs. This may be overridden by tanjun.abc.AppCommand.is_dm_enabled and if this is left as None then this config will be inherited from the parent client. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This client to enable method chaining.","title":"set_dms_enabled_for_app_cmds()"},{"location":"reference/components/#tanjun.components.Component.set_ephemeral_default","text":"set_ephemeral_default ( state ) Set whether slash contexts executed in this component should default to ephemeral responses. PARAMETER DESCRIPTION state Whether slash command contexts executed in this component should should default to ephemeral. This will be overridden by any response calls which specify flags. Setting this to None will let the default set on the parent client propagate and decide the ephemeral default behaviour. TYPE: typing . Optional [ bool ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"set_ephemeral_default()"},{"location":"reference/components/#tanjun.components.Component.set_hooks","text":"set_hooks ( hooks ) Set hooks to be called during the execution of all of this component's commands. PARAMETER DESCRIPTION hooks The command hooks to set. TYPE: typing . Optional [ tanjun . AnyHooks ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"set_hooks()"},{"location":"reference/components/#tanjun.components.Component.set_menu_hooks","text":"set_menu_hooks ( hooks ) Set hooks to be called during the execution of this component's menu commands. PARAMETER DESCRIPTION hooks The menu command hooks to set. TYPE: typing . Optional [ tanjun . MenuHooks ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"set_menu_hooks()"},{"location":"reference/components/#tanjun.components.Component.set_message_hooks","text":"set_message_hooks ( hooks ) Set hooks to be called during the execution of this component's message commands. PARAMETER DESCRIPTION hooks The message command hooks to set. TYPE: typing . Optional [ tanjun . MessageHooks ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"set_message_hooks()"},{"location":"reference/components/#tanjun.components.Component.set_slash_hooks","text":"set_slash_hooks ( hooks ) Set hooks to be called during the execution of this component's slash commands. PARAMETER DESCRIPTION hooks The slash command hooks to set. TYPE: typing . Optional [ tanjun . SlashHooks ] RETURNS DESCRIPTION Self This component to enable method chaining.","title":"set_slash_hooks()"},{"location":"reference/components/#tanjun.components.Component.slash_hooks","text":"slash_hooks () The slash command hooks set for this component, if any.","title":"slash_hooks()"},{"location":"reference/components/#tanjun.components.Component.with_check","text":"with_check ( check ) Add a general command check to this component through a decorator call. PARAMETER DESCRIPTION check The check to add. TYPE: tanjun . abc . CheckSig RETURNS DESCRIPTION tanjun . abc . CheckSig The added check.","title":"with_check()"},{"location":"reference/components/#tanjun.components.Component.with_client_callback","text":"with_client_callback ( name ) Add a client callback through a decorator call. Examples: client = tanjun . Client . from_rest_bot ( bot ) @client . with_client_callback ( \"closed\" ) async def on_close () -> None : raise NotImplementedError PARAMETER DESCRIPTION name The name this callback is being registered to. This is case-insensitive. TYPE: typing . Union [ str , tanjun . ClientCallbackNames ] RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MetaEventSig ], tanjun . abc . MetaEventSig ] Decorator callback used to register the client callback. This may be sync or async and must return None. The positional and keyword arguments a callback should expect depend on implementation detail around the name being subscribed to.","title":"with_client_callback()"},{"location":"reference/components/#tanjun.components.Component.with_command","text":"with_command ( command = None , / , * , copy = False , follow_wrapped = False ) Add a command to this component through a decorator call. Examples: This may be used inconjunction with tanjun.as_slash_command and tanjun.as_message_command . @component . with_command @tanjun . with_slash_str_option ( \"option_name\" , \"option description\" ) @tanjun . as_slash_command ( \"command_name\" , \"command description\" ) async def slash_command ( ctx : tanjun . abc . Context , arg : str ) -> None : await ctx . respond ( f \"Hi { arg } \" ) @component . with_command @tanjun . with_argument ( \"argument_name\" ) @tanjun . as_message_command ( \"command_name\" ) async def message_command ( ctx : tanjun . abc . Context , arg : str ) -> None : await ctx . respond ( f \"Hi { arg } \" ) PARAMETER DESCRIPTION command The command to add to this component. TYPE: typing . Optional [ _CommandT ] DEFAULT: None copy Whether to copy the command before adding it to this component. TYPE: bool DEFAULT: False follow_wrapped Whether to also add any commands command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The added command.","title":"with_command()"},{"location":"reference/components/#tanjun.components.Component.with_on_close","text":"with_on_close ( callback ) Add a close callback to this component through a decorator call. Note Unlike the closing and closed client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The close callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION OnCallbackSig The added close callback.","title":"with_on_close()"},{"location":"reference/components/#tanjun.components.Component.with_on_open","text":"with_on_open ( callback ) Add a open callback to this component through a decorator call. Note Unlike the starting and started client callbacks, this is only called for the current component's lifetime and is guaranteed to be called regardless of when the component was added to a client. PARAMETER DESCRIPTION callback The open callback to add to this component. This should take no positional arguments, return None and may take use injected dependencies. TYPE: OnCallbackSig RETURNS DESCRIPTION OnCallbackSig The added open callback.","title":"with_on_open()"},{"location":"reference/components/#tanjun.components.Component.with_schedule","text":"with_schedule ( schedule ) Add a schedule to the component through a decorator call.","title":"with_schedule()"},{"location":"reference/components/#tanjun.components.Component.with_schedule--example","text":"This may be used in conjunction with tanjun.as_interval . @component . with_schedule @tanjun . as_interval ( 60 ) async def my_schedule (): print ( \"I'm running every minute!\" ) PARAMETER DESCRIPTION schedule The schedule to add. TYPE: tanjun . schedules . AbstractSchedule RETURNS DESCRIPTION tanjun . schedules . AbstractSchedule The added schedule.","title":"Example"},{"location":"reference/context/","text":"tanjun.context # Standard implementations of Tanjun's context classes. tanjun.context.autocomplete # Autocomplete context implementation. AutocompleteContext # Bases: alluka . BasicContext , tanjun . AutocompleteContext Standard implementation of an autocomplete context. __init__ # __init__ ( client , interaction , * , future = None ) Initialise an autocomplete context. PARAMETER DESCRIPTION client The Tanjun client this context is bound to. TYPE: tanjun . Client interaction The autocomplete interaction this context is for. TYPE: hikari . AutocompleteInteraction future A future used to set the initial response if this is being called through the REST webhook flow. TYPE: typing . Optional [ asyncio . Future [ hikari . api . InteractionAutocompleteBuilder ]] DEFAULT: None tanjun.context.menu # Menu context implementation. MenuContext # Bases: slash . AppCommandContext , tanjun . MenuContext Standard menu command execution context. __init__ # __init__ ( client , interaction , register_task , * , default_to_ephemeral = False , future = None , on_not_found = None ) Initialise a menu command context. PARAMETER DESCRIPTION client The Tanjun client this context is bound to. TYPE: tanjun . Client interaction The command interaction this context is for. TYPE: hikari . CommandInteraction register_task Callback used to register long-running tasks spawned by this context. TYPE: collections . Callable [[ asyncio . Task [ typing . Any ]], None] future A future used to set the initial response if this is being called through the REST webhook flow. TYPE: typing . Optional [ asyncio . Future [ _ResponseTypeT ]] DEFAULT: None default_to_ephemeral Whether to default to ephemeral responses. TYPE: bool DEFAULT: False on_not_found Callback used to indicate no matching command was found. TYPE: typing . Optional [ collections . Callable [[ tanjun . MenuContext ], collections . Awaitable [None]]] DEFAULT: None tanjun.context.message # Message command implementation. MessageContext # Bases: base . BaseContext , tanjun . MessageContext Standard implementation of a command context as used within Tanjun. __init__ # __init__ ( client , content , message , register_task , * , triggering_name = '' , triggering_prefix = '' ) Initialise a message command context. PARAMETER DESCRIPTION client The client to use for sending messages. TYPE: tanjun . Client content The content of the message (minus any matched prefix and name). TYPE: str message The message that triggered the command. TYPE: hikari . Message register_task Callback used to register long-running tasks spawned by this context. TYPE: collections . Callable [[ asyncio . Task [ typing . Any ]], None] triggering_name The name of the command that triggered this context. TYPE: str DEFAULT: '' triggering_prefix The prefix that triggered this context. TYPE: str DEFAULT: '' set_triggering_prefix # set_triggering_prefix ( triggering_prefix ) Set the triggering prefix for this context. PARAMETER DESCRIPTION triggering_prefix The triggering prefix to set. TYPE: str RETURNS DESCRIPTION Self This context to allow for chaining. tanjun.context.slash # Slash command implementation. AppCommandContext # Bases: base . BaseContext , tanjun . AppCommandContext Base class for interaction-based command contexts. cancel_defer # cancel_defer () Cancel the auto-deferral if its active. start_defer_timer # start_defer_timer ( count_down ) Start the auto-deferral timer. PARAMETER DESCRIPTION count_down The number of seconds to wait before automatically deferring the interaction. TYPE: typing . Union [ int , float ] RETURNS DESCRIPTION Self This context to allow for chaining. SlashContext # Bases: AppCommandContext , tanjun . SlashContext Standard implementation of tanjun.abc.SlashContext . __init__ # __init__ ( client , interaction , register_task , * , default_to_ephemeral = False , future = None , on_not_found = None ) Initialise a slash command context. PARAMETER DESCRIPTION client The Tanjun client this context is bound to. TYPE: tanjun . Client interaction The command interaction this context is for. TYPE: hikari . CommandInteraction register_task Callback used to register long-running tasks spawned by this context. TYPE: collections . Callable [[ asyncio . Task [ typing . Any ]], None] default_to_ephemeral Whether to default to ephemeral responses. TYPE: bool DEFAULT: False future A future used to set the initial response if this is being called through the REST webhook flow. TYPE: typing . Optional [ asyncio . Future [ _ResponseTypeT ]] DEFAULT: None on_not_found Callback used to indicate no matching command was found. TYPE: typing . Optional [ collections . Callable [[ tanjun . SlashContext ], collections . Awaitable [None]]] DEFAULT: None SlashOption # Bases: tanjun . SlashOption Standard implementation of the SlashOption interface. __init__ # __init__ ( resolved , option ) Initialise a slash option. PARAMETER DESCRIPTION resolved The resolved option data if applicable. TYPE: typing . Optional [ hikari . ResolvedOptionData ] option The raw interaction option. TYPE: hikari . CommandInteractionOption","title":"tanjun.context"},{"location":"reference/context/#tanjuncontext","text":"Standard implementations of Tanjun's context classes.","title":"tanjun.context"},{"location":"reference/context/#tanjun.context.autocomplete","text":"Autocomplete context implementation.","title":"autocomplete"},{"location":"reference/context/#tanjun.context.autocomplete.AutocompleteContext","text":"Bases: alluka . BasicContext , tanjun . AutocompleteContext Standard implementation of an autocomplete context.","title":"AutocompleteContext"},{"location":"reference/context/#tanjun.context.autocomplete.AutocompleteContext.__init__","text":"__init__ ( client , interaction , * , future = None ) Initialise an autocomplete context. PARAMETER DESCRIPTION client The Tanjun client this context is bound to. TYPE: tanjun . Client interaction The autocomplete interaction this context is for. TYPE: hikari . AutocompleteInteraction future A future used to set the initial response if this is being called through the REST webhook flow. TYPE: typing . Optional [ asyncio . Future [ hikari . api . InteractionAutocompleteBuilder ]] DEFAULT: None","title":"__init__()"},{"location":"reference/context/#tanjun.context.menu","text":"Menu context implementation.","title":"menu"},{"location":"reference/context/#tanjun.context.menu.MenuContext","text":"Bases: slash . AppCommandContext , tanjun . MenuContext Standard menu command execution context.","title":"MenuContext"},{"location":"reference/context/#tanjun.context.menu.MenuContext.__init__","text":"__init__ ( client , interaction , register_task , * , default_to_ephemeral = False , future = None , on_not_found = None ) Initialise a menu command context. PARAMETER DESCRIPTION client The Tanjun client this context is bound to. TYPE: tanjun . Client interaction The command interaction this context is for. TYPE: hikari . CommandInteraction register_task Callback used to register long-running tasks spawned by this context. TYPE: collections . Callable [[ asyncio . Task [ typing . Any ]], None] future A future used to set the initial response if this is being called through the REST webhook flow. TYPE: typing . Optional [ asyncio . Future [ _ResponseTypeT ]] DEFAULT: None default_to_ephemeral Whether to default to ephemeral responses. TYPE: bool DEFAULT: False on_not_found Callback used to indicate no matching command was found. TYPE: typing . Optional [ collections . Callable [[ tanjun . MenuContext ], collections . Awaitable [None]]] DEFAULT: None","title":"__init__()"},{"location":"reference/context/#tanjun.context.message","text":"Message command implementation.","title":"message"},{"location":"reference/context/#tanjun.context.message.MessageContext","text":"Bases: base . BaseContext , tanjun . MessageContext Standard implementation of a command context as used within Tanjun.","title":"MessageContext"},{"location":"reference/context/#tanjun.context.message.MessageContext.__init__","text":"__init__ ( client , content , message , register_task , * , triggering_name = '' , triggering_prefix = '' ) Initialise a message command context. PARAMETER DESCRIPTION client The client to use for sending messages. TYPE: tanjun . Client content The content of the message (minus any matched prefix and name). TYPE: str message The message that triggered the command. TYPE: hikari . Message register_task Callback used to register long-running tasks spawned by this context. TYPE: collections . Callable [[ asyncio . Task [ typing . Any ]], None] triggering_name The name of the command that triggered this context. TYPE: str DEFAULT: '' triggering_prefix The prefix that triggered this context. TYPE: str DEFAULT: ''","title":"__init__()"},{"location":"reference/context/#tanjun.context.message.MessageContext.set_triggering_prefix","text":"set_triggering_prefix ( triggering_prefix ) Set the triggering prefix for this context. PARAMETER DESCRIPTION triggering_prefix The triggering prefix to set. TYPE: str RETURNS DESCRIPTION Self This context to allow for chaining.","title":"set_triggering_prefix()"},{"location":"reference/context/#tanjun.context.slash","text":"Slash command implementation.","title":"slash"},{"location":"reference/context/#tanjun.context.slash.AppCommandContext","text":"Bases: base . BaseContext , tanjun . AppCommandContext Base class for interaction-based command contexts.","title":"AppCommandContext"},{"location":"reference/context/#tanjun.context.slash.AppCommandContext.cancel_defer","text":"cancel_defer () Cancel the auto-deferral if its active.","title":"cancel_defer()"},{"location":"reference/context/#tanjun.context.slash.AppCommandContext.start_defer_timer","text":"start_defer_timer ( count_down ) Start the auto-deferral timer. PARAMETER DESCRIPTION count_down The number of seconds to wait before automatically deferring the interaction. TYPE: typing . Union [ int , float ] RETURNS DESCRIPTION Self This context to allow for chaining.","title":"start_defer_timer()"},{"location":"reference/context/#tanjun.context.slash.SlashContext","text":"Bases: AppCommandContext , tanjun . SlashContext Standard implementation of tanjun.abc.SlashContext .","title":"SlashContext"},{"location":"reference/context/#tanjun.context.slash.SlashContext.__init__","text":"__init__ ( client , interaction , register_task , * , default_to_ephemeral = False , future = None , on_not_found = None ) Initialise a slash command context. PARAMETER DESCRIPTION client The Tanjun client this context is bound to. TYPE: tanjun . Client interaction The command interaction this context is for. TYPE: hikari . CommandInteraction register_task Callback used to register long-running tasks spawned by this context. TYPE: collections . Callable [[ asyncio . Task [ typing . Any ]], None] default_to_ephemeral Whether to default to ephemeral responses. TYPE: bool DEFAULT: False future A future used to set the initial response if this is being called through the REST webhook flow. TYPE: typing . Optional [ asyncio . Future [ _ResponseTypeT ]] DEFAULT: None on_not_found Callback used to indicate no matching command was found. TYPE: typing . Optional [ collections . Callable [[ tanjun . SlashContext ], collections . Awaitable [None]]] DEFAULT: None","title":"__init__()"},{"location":"reference/context/#tanjun.context.slash.SlashOption","text":"Bases: tanjun . SlashOption Standard implementation of the SlashOption interface.","title":"SlashOption"},{"location":"reference/context/#tanjun.context.slash.SlashOption.__init__","text":"__init__ ( resolved , option ) Initialise a slash option. PARAMETER DESCRIPTION resolved The resolved option data if applicable. TYPE: typing . Optional [ hikari . ResolvedOptionData ] option The raw interaction option. TYPE: hikari . CommandInteractionOption","title":"__init__()"},{"location":"reference/conversion/","text":"tanjun.conversion # Functions and classes used to enable more Discord oriented argument converters. ChannelConverter module-attribute # ChannelConverter = ToChannel Deprecated alias of tanjun.conversion.ToChannel . EmojiConverter module-attribute # EmojiConverter = ToEmoji Deprecated alias of tanjun.conversion.ToEmoji . GuildConverter module-attribute # GuildConverter = ToGuild Deprecated alias of tanjun.conversion.ToGuild . InviteConverter module-attribute # InviteConverter = ToInvite Deprecated alias of tanjun.conversion.ToInvite . InviteWithMetadataConverter module-attribute # InviteWithMetadataConverter = ToInviteWithMetadata Deprecated alias of tanjun.conversion.ToInviteWithMetadata . MemberConverter module-attribute # MemberConverter = ToMember Deprecated alias of tanjun.conversion.ToMember . PresenceConverter module-attribute # PresenceConverter = ToPresence Deprecated alias of tanjun.conversion.ToPresence . RoleConverter module-attribute # RoleConverter = ToRole Deprecated alias of tanjun.conversion.ToRole . UserConverter module-attribute # UserConverter = ToUser Deprecated alias of tanjun.conversion.ToUser . VoiceStateConverter module-attribute # VoiceStateConverter = ToVoiceState Deprecated alias of tanjun.conversion.ToVoiceState . defragment_url module-attribute # defragment_url : collections . Callable [[ str ], urlparse . DefragResult ] = _build_url_parser ( urlparse . urldefrag ) Convert an argument to a defragmented URL. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str RETURNS DESCRIPTION urllib . parse . DefragResult The parsed URL. RAISES DESCRIPTION ValueError If the argument couldn't be parsed. parse_channel_id module-attribute # parse_channel_id : _IDMatcherSigProto = _make_snowflake_parser ( _CHANNEL_ID_REGEX ) Parse a channel ID from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float message The error message to raise if the value cannot be parsed. TYPE: str RETURNS DESCRIPTION hikari . Snowflake The parsed channel ID. RAISES DESCRIPTION ValueError If the value cannot be parsed. parse_emoji_id module-attribute # parse_emoji_id : _IDMatcherSigProto = _make_snowflake_parser ( _EMOJI_ID_REGEX ) Parse an Emoji ID from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float message The error message to raise if the value cannot be parsed. Defaults to \"No valid mention or ID found\". TYPE: str RETURNS DESCRIPTION hikari . Snowflake The parsed Emoji ID. RAISES DESCRIPTION ValueError If the value cannot be parsed. parse_role_id module-attribute # parse_role_id : _IDMatcherSigProto = _make_snowflake_parser ( _ROLE_ID_REGEX ) Parse a role ID from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float message The error message to raise if the value cannot be parsed. Defaults to \"No valid mention or ID found\". TYPE: str RETURNS DESCRIPTION hikari . Snowflake The parsed role ID. RAISES DESCRIPTION ValueError If the value cannot be parsed. parse_snowflake module-attribute # parse_snowflake : _IDMatcherSigProto = _make_snowflake_parser ( _SNOWFLAKE_REGEX ) Parse a snowflake from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float message The error message to raise if the value cannot be parsed. TYPE: str RETURNS DESCRIPTION hikari . Snowflake The parsed snowflake. RAISES DESCRIPTION ValueError If the value cannot be parsed. parse_url module-attribute # parse_url : collections . Callable [[ str ], urlparse . ParseResult ] = _build_url_parser ( urlparse . urlparse ) Convert an argument to a parsed URL. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str RETURNS DESCRIPTION urllib . parse . ParseResult The parsed URL. RAISES DESCRIPTION ValueError If the argument couldn't be parsed. parse_user_id module-attribute # parse_user_id : _IDMatcherSigProto = _make_snowflake_parser ( _USER_ID_REGEX ) Parse a user ID from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float message The error message to raise if the value cannot be parsed. Defaults to \"No valid mention or ID found\". TYPE: str RETURNS DESCRIPTION hikari . Snowflake The parsed user ID. RAISES DESCRIPTION ValueError If the value cannot be parsed. search_channel_ids module-attribute # search_channel_ids : _IDSearcherSig = _make_snowflake_searcher ( _CHANNEL_ID_REGEX ) Get the channel IDs in a string. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float RETURNS DESCRIPTION list [ hikari . Snowflake ] List of the channel IDs in the string. search_emoji_ids module-attribute # search_emoji_ids : _IDSearcherSig = _make_snowflake_searcher ( _EMOJI_ID_REGEX ) Get the emoji IDs in a string. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float RETURNS DESCRIPTION list [ hikari . Snowflake ] List of the emoji IDs in the string. search_role_ids module-attribute # search_role_ids : _IDSearcherSig = _make_snowflake_searcher ( _ROLE_ID_REGEX ) Get the role IDs in a string. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float RETURNS DESCRIPTION list [ hikari . Snowflake ] List of the role IDs in the string. search_snowflakes module-attribute # search_snowflakes : _IDSearcherSig = _make_snowflake_searcher ( _SNOWFLAKE_REGEX ) Get the snowflakes in a string. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float RETURNS DESCRIPTION list [ hikari . Snowflake ] List of the snowflakes in the string. search_user_ids module-attribute # search_user_ids : _IDSearcherSig = _make_snowflake_searcher ( _USER_ID_REGEX ) Get the user IDs in a string. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float RETURNS DESCRIPTION list [ hikari . Snowflake ] List of the user IDs in the string. split_url module-attribute # split_url : collections . Callable [[ str ], urlparse . SplitResult ] = _build_url_parser ( urlparse . urlsplit ) Convert an argument to a split URL. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str RETURNS DESCRIPTION urllib . parse . SplitResult The split URL. RAISES DESCRIPTION ValueError If the argument couldn't be parsed. to_channel module-attribute # to_channel : typing . Final [ ToChannel ] = ToChannel () Convert user input to a hikari.channels.PartialChannel object. to_colour module-attribute # to_colour : typing . Final [ collections . Callable [[ _ArgumentT ], hikari . Color ]] = to_color Convert user input to a hikari.colors.Color object. to_emoji module-attribute # to_emoji : typing . Final [ ToEmoji ] = ToEmoji () Convert user input to a cached hikari.emojis.KnownCustomEmoji object. Note If you just want to convert inpute to a hikari.emojis.Emoji , hikari.emojis.CustomEmoji or hikari.emojis.UnicodeEmoji without making any cache or REST calls then you can just use the relevant hikari.emojis.Emoji.parse , hikari.emojis.CustomEmoji.parse or hikari.emojis.UnicodeEmoji.parse methods. to_guild module-attribute # to_guild : typing . Final [ ToGuild ] = ToGuild () Convert user input to a hikari.guilds.Guild object. to_invite module-attribute # to_invite : typing . Final [ ToInvite ] = ToInvite () Convert user input to a cached hikari.invites.InviteWithMetadata object. to_invite_with_metadata module-attribute # to_invite_with_metadata : typing . Final [ ToInviteWithMetadata ] = ToInviteWithMetadata () Convert user input to a hikari.invites.Invite object. to_member module-attribute # to_member : typing . Final [ ToMember ] = ToMember () Convert user input to a hikari.guilds.Member object. to_message module-attribute # to_message : typing . Final [ ToMessage ] = ToMessage () Convert user input to a hikari.messages.Message object. to_presence module-attribute # to_presence : typing . Final [ ToPresence ] = ToPresence () Convert user input to a cached hikari.presences.MemberPresence . to_role module-attribute # to_role : typing . Final [ ToRole ] = ToRole () Convert user input to a hikari.guilds.Role object. to_snowflake module-attribute # to_snowflake : typing . Final [ collections . Callable [[ _ArgumentT ], hikari . Snowflake ]] = parse_snowflake Convert user input to a hikari.snowflakes.Snowflake . Note This also range validates the input. to_user module-attribute # to_user : typing . Final [ ToUser ] = ToUser () Convert user input to a hikari.users.User object. to_voice_state module-attribute # to_voice_state : typing . Final [ ToVoiceState ] = ToVoiceState () Convert user input to a cached hikari.voices.VoiceState . BaseConverter # Bases: abc . ABC Base class for the standard converters. Warning Inheriting from this is completely unnecessary and should be avoided for people using the library unless they know what they're doing. This is detail of the standard implementation and isn't guaranteed to work between implementations but will work for implementations which provide the standard dependency injection or special cased support for these. While it isn't necessary to subclass this to implement your own converters since dependency injection can be used to access fields like the current Context, this class introduces some niceties around stuff like state warnings. async_caches abstractmethod property # async_caches () Collection of the asynchronous caches that this converter relies on. This will only be necessary if the suggested intents or cache_components aren't enabled for a converter which requires cache. cache_components abstractmethod property # cache_components () Cache component(s) the converter takes advantage of. Note Unless tanjun.conversion.BaseConverter.requires_cache is True , these cache components aren't necessary but simply avoid the converter from falling back to REST requests. This will be hikari.api.config.CacheComponents.NONE if the converter doesn't make cache calls. check_client # check_client ( client , parent_name ) Check that this converter will work with the given client. This never raises any errors but simply warns the user if the converter is not compatible with the given client. PARAMETER DESCRIPTION client The client to check against. TYPE: tanjun . Client parent_name The name of the converter's parent, used for warning messages. TYPE: str intents abstractmethod property # intents () Gateway intents this converter takes advantage of. Note This field is supplementary to tanjun.conversion.BaseConverter.cache_components and is used to detect when the relevant component might not actually be being kept up to date or filled by gateway events. Unless tanjun.conversion.BaseConverter.requires_cache is True , these intents being disabled won't stop this converter from working as it'll still fall back to REST requests. requires_cache abstractmethod property # requires_cache () Whether this converter relies on the relevant cache stores to work. If this is True then this converter will not function properly in an environment tanjun.conversion.BaseConverter.intents or tanjun.conversion.BaseConverter.cache_components isn't satisfied and will never fallback to REST requests. ToChannel # Bases: BaseConverter Standard converter for channels mentions/IDs. For a standard instance of this see tanjun.conversion.to_channel . __init__ # __init__ ( * , allowed_types = None , include_dms = True ) Initialise a to channel converter. PARAMETER DESCRIPTION allowed_types Collection of channel types and classes to allow. If this is empty or None then all channel types will be allowed. TYPE: typing . Optional [ collections . Collection [ typing . Union [ type [ hikari . PartialChannel ], int ]]] DEFAULT: None include_dms Whether to include DM channels in the results. May lead to a lot of extra fallbacks to REST requests if the client doesn't have a registered async cache for DMs. TYPE: bool DEFAULT: True ToEmoji # Bases: BaseConverter Standard converter for custom emojis. For a standard instance of this see tanjun.conversion.to_emoji . Note If you just want to convert inpute to a hikari.emojis.Emoji , hikari.emojis.CustomEmoji or hikari.emojis.UnicodeEmoji without making any cache or REST calls then you can just use the relevant Emoji.parse , CustomEmoji.parse or UnicodeEmoji.parse methods. ToGuild # Bases: BaseConverter Stanard converter for guilds. For a standard instance of this see tanjun.conversion.to_guild . ToInvite # Bases: BaseConverter Standard converter for invites. ToInviteWithMetadata # Bases: BaseConverter Standard converter for invites with metadata. For a standard instance of this see tanjun.conversion.to_invite_with_metadata . Note Unlike tanjun.conversion.InviteConverter , this converter is cache dependent. ToMember # Bases: BaseConverter Standard converter for guild members. For a standard instance of this see tanjun.conversion.to_member . This converter allows both mentions, raw IDs and partial usernames/nicknames and only works within a guild context. ToMessage # Bases: BaseConverter Standard converter for messages. For a standard instance of this see tanjun.conversion.to_message . ToPresence # Bases: BaseConverter Standard converter for presences. For a standard instance of this see tanjun.conversion.to_presence . This converter is cache dependent and only works in a guild context. ToRole # Bases: BaseConverter Standard converter for guild roles. For a standard instance of this see tanjun.conversion.to_role . ToUser # Bases: BaseConverter Standard converter for users. For a standard instance of this see tanjun.conversion.to_user . ToVoiceState # Bases: BaseConverter Standard converter for voice states. For a standard instance of this see tanjun.conversion.to_voice_state . Note This converter is cache dependent and only works in a guild context. from_datetime # from_datetime ( value , / , * , style = 'f' ) Format a datetime as Discord's datetime format. More information on this format can be found at https://discord.com/developers/docs/reference#message-formatting-timestamp-styles PARAMETER DESCRIPTION value The datetime to format. TYPE: datetime . datetime style The style to use. The valid styles can be found at https://discord.com/developers/docs/reference#message-formatting-formats . TYPE: str DEFAULT: 'f' RETURNS DESCRIPTION str The formatted datetime. RAISES DESCRIPTION ValueError If the provided datetime is timezone naive. If an invalid style is provided. parse_message_id # parse_message_id ( value , / , * , message = 'No valid message link or ID found' ) Parse a user ID from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: _ArgumentT message The error message to raise if the value cannot be parsed. TYPE: str DEFAULT: 'No valid message link or ID found' RETURNS DESCRIPTION tuple [ hikari . Snowflake | None, hikari . Snowflake ] The parsed channel and message IDs. RAISES DESCRIPTION ValueError If the value cannot be parsed. to_bool # to_bool ( value ) Convert user string input into a boolean value. PARAMETER DESCRIPTION value The value to convert. TYPE: str RETURNS DESCRIPTION bool The converted value. RAISES DESCRIPTION ValueError If the value cannot be converted. to_color # to_color ( argument ) Convert user input to a hikari.colors.Color object. to_datetime # to_datetime ( value ) Parse a datetime from Discord's datetime format. More information on this format can be found at https://discord.com/developers/docs/reference#message-formatting-timestamp-styles PARAMETER DESCRIPTION value The value to parse. TYPE: str RETURNS DESCRIPTION datetime . datetime The parsed datetime. RAISES DESCRIPTION ValueError If the value cannot be parsed.","title":"tanjun.conversion"},{"location":"reference/conversion/#tanjunconversion","text":"Functions and classes used to enable more Discord oriented argument converters.","title":"tanjun.conversion"},{"location":"reference/conversion/#tanjun.conversion.ChannelConverter","text":"ChannelConverter = ToChannel Deprecated alias of tanjun.conversion.ToChannel .","title":"ChannelConverter"},{"location":"reference/conversion/#tanjun.conversion.EmojiConverter","text":"EmojiConverter = ToEmoji Deprecated alias of tanjun.conversion.ToEmoji .","title":"EmojiConverter"},{"location":"reference/conversion/#tanjun.conversion.GuildConverter","text":"GuildConverter = ToGuild Deprecated alias of tanjun.conversion.ToGuild .","title":"GuildConverter"},{"location":"reference/conversion/#tanjun.conversion.InviteConverter","text":"InviteConverter = ToInvite Deprecated alias of tanjun.conversion.ToInvite .","title":"InviteConverter"},{"location":"reference/conversion/#tanjun.conversion.InviteWithMetadataConverter","text":"InviteWithMetadataConverter = ToInviteWithMetadata Deprecated alias of tanjun.conversion.ToInviteWithMetadata .","title":"InviteWithMetadataConverter"},{"location":"reference/conversion/#tanjun.conversion.MemberConverter","text":"MemberConverter = ToMember Deprecated alias of tanjun.conversion.ToMember .","title":"MemberConverter"},{"location":"reference/conversion/#tanjun.conversion.PresenceConverter","text":"PresenceConverter = ToPresence Deprecated alias of tanjun.conversion.ToPresence .","title":"PresenceConverter"},{"location":"reference/conversion/#tanjun.conversion.RoleConverter","text":"RoleConverter = ToRole Deprecated alias of tanjun.conversion.ToRole .","title":"RoleConverter"},{"location":"reference/conversion/#tanjun.conversion.UserConverter","text":"UserConverter = ToUser Deprecated alias of tanjun.conversion.ToUser .","title":"UserConverter"},{"location":"reference/conversion/#tanjun.conversion.VoiceStateConverter","text":"VoiceStateConverter = ToVoiceState Deprecated alias of tanjun.conversion.ToVoiceState .","title":"VoiceStateConverter"},{"location":"reference/conversion/#tanjun.conversion.defragment_url","text":"defragment_url : collections . Callable [[ str ], urlparse . DefragResult ] = _build_url_parser ( urlparse . urldefrag ) Convert an argument to a defragmented URL. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str RETURNS DESCRIPTION urllib . parse . DefragResult The parsed URL. RAISES DESCRIPTION ValueError If the argument couldn't be parsed.","title":"defragment_url"},{"location":"reference/conversion/#tanjun.conversion.parse_channel_id","text":"parse_channel_id : _IDMatcherSigProto = _make_snowflake_parser ( _CHANNEL_ID_REGEX ) Parse a channel ID from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float message The error message to raise if the value cannot be parsed. TYPE: str RETURNS DESCRIPTION hikari . Snowflake The parsed channel ID. RAISES DESCRIPTION ValueError If the value cannot be parsed.","title":"parse_channel_id"},{"location":"reference/conversion/#tanjun.conversion.parse_emoji_id","text":"parse_emoji_id : _IDMatcherSigProto = _make_snowflake_parser ( _EMOJI_ID_REGEX ) Parse an Emoji ID from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float message The error message to raise if the value cannot be parsed. Defaults to \"No valid mention or ID found\". TYPE: str RETURNS DESCRIPTION hikari . Snowflake The parsed Emoji ID. RAISES DESCRIPTION ValueError If the value cannot be parsed.","title":"parse_emoji_id"},{"location":"reference/conversion/#tanjun.conversion.parse_role_id","text":"parse_role_id : _IDMatcherSigProto = _make_snowflake_parser ( _ROLE_ID_REGEX ) Parse a role ID from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float message The error message to raise if the value cannot be parsed. Defaults to \"No valid mention or ID found\". TYPE: str RETURNS DESCRIPTION hikari . Snowflake The parsed role ID. RAISES DESCRIPTION ValueError If the value cannot be parsed.","title":"parse_role_id"},{"location":"reference/conversion/#tanjun.conversion.parse_snowflake","text":"parse_snowflake : _IDMatcherSigProto = _make_snowflake_parser ( _SNOWFLAKE_REGEX ) Parse a snowflake from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float message The error message to raise if the value cannot be parsed. TYPE: str RETURNS DESCRIPTION hikari . Snowflake The parsed snowflake. RAISES DESCRIPTION ValueError If the value cannot be parsed.","title":"parse_snowflake"},{"location":"reference/conversion/#tanjun.conversion.parse_url","text":"parse_url : collections . Callable [[ str ], urlparse . ParseResult ] = _build_url_parser ( urlparse . urlparse ) Convert an argument to a parsed URL. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str RETURNS DESCRIPTION urllib . parse . ParseResult The parsed URL. RAISES DESCRIPTION ValueError If the argument couldn't be parsed.","title":"parse_url"},{"location":"reference/conversion/#tanjun.conversion.parse_user_id","text":"parse_user_id : _IDMatcherSigProto = _make_snowflake_parser ( _USER_ID_REGEX ) Parse a user ID from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float message The error message to raise if the value cannot be parsed. Defaults to \"No valid mention or ID found\". TYPE: str RETURNS DESCRIPTION hikari . Snowflake The parsed user ID. RAISES DESCRIPTION ValueError If the value cannot be parsed.","title":"parse_user_id"},{"location":"reference/conversion/#tanjun.conversion.search_channel_ids","text":"search_channel_ids : _IDSearcherSig = _make_snowflake_searcher ( _CHANNEL_ID_REGEX ) Get the channel IDs in a string. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float RETURNS DESCRIPTION list [ hikari . Snowflake ] List of the channel IDs in the string.","title":"search_channel_ids"},{"location":"reference/conversion/#tanjun.conversion.search_emoji_ids","text":"search_emoji_ids : _IDSearcherSig = _make_snowflake_searcher ( _EMOJI_ID_REGEX ) Get the emoji IDs in a string. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float RETURNS DESCRIPTION list [ hikari . Snowflake ] List of the emoji IDs in the string.","title":"search_emoji_ids"},{"location":"reference/conversion/#tanjun.conversion.search_role_ids","text":"search_role_ids : _IDSearcherSig = _make_snowflake_searcher ( _ROLE_ID_REGEX ) Get the role IDs in a string. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float RETURNS DESCRIPTION list [ hikari . Snowflake ] List of the role IDs in the string.","title":"search_role_ids"},{"location":"reference/conversion/#tanjun.conversion.search_snowflakes","text":"search_snowflakes : _IDSearcherSig = _make_snowflake_searcher ( _SNOWFLAKE_REGEX ) Get the snowflakes in a string. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float RETURNS DESCRIPTION list [ hikari . Snowflake ] List of the snowflakes in the string.","title":"search_snowflakes"},{"location":"reference/conversion/#tanjun.conversion.search_user_ids","text":"search_user_ids : _IDSearcherSig = _make_snowflake_searcher ( _USER_ID_REGEX ) Get the user IDs in a string. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str | int | float RETURNS DESCRIPTION list [ hikari . Snowflake ] List of the user IDs in the string.","title":"search_user_ids"},{"location":"reference/conversion/#tanjun.conversion.split_url","text":"split_url : collections . Callable [[ str ], urlparse . SplitResult ] = _build_url_parser ( urlparse . urlsplit ) Convert an argument to a split URL. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: str RETURNS DESCRIPTION urllib . parse . SplitResult The split URL. RAISES DESCRIPTION ValueError If the argument couldn't be parsed.","title":"split_url"},{"location":"reference/conversion/#tanjun.conversion.to_channel","text":"to_channel : typing . Final [ ToChannel ] = ToChannel () Convert user input to a hikari.channels.PartialChannel object.","title":"to_channel"},{"location":"reference/conversion/#tanjun.conversion.to_colour","text":"to_colour : typing . Final [ collections . Callable [[ _ArgumentT ], hikari . Color ]] = to_color Convert user input to a hikari.colors.Color object.","title":"to_colour"},{"location":"reference/conversion/#tanjun.conversion.to_emoji","text":"to_emoji : typing . Final [ ToEmoji ] = ToEmoji () Convert user input to a cached hikari.emojis.KnownCustomEmoji object. Note If you just want to convert inpute to a hikari.emojis.Emoji , hikari.emojis.CustomEmoji or hikari.emojis.UnicodeEmoji without making any cache or REST calls then you can just use the relevant hikari.emojis.Emoji.parse , hikari.emojis.CustomEmoji.parse or hikari.emojis.UnicodeEmoji.parse methods.","title":"to_emoji"},{"location":"reference/conversion/#tanjun.conversion.to_guild","text":"to_guild : typing . Final [ ToGuild ] = ToGuild () Convert user input to a hikari.guilds.Guild object.","title":"to_guild"},{"location":"reference/conversion/#tanjun.conversion.to_invite","text":"to_invite : typing . Final [ ToInvite ] = ToInvite () Convert user input to a cached hikari.invites.InviteWithMetadata object.","title":"to_invite"},{"location":"reference/conversion/#tanjun.conversion.to_invite_with_metadata","text":"to_invite_with_metadata : typing . Final [ ToInviteWithMetadata ] = ToInviteWithMetadata () Convert user input to a hikari.invites.Invite object.","title":"to_invite_with_metadata"},{"location":"reference/conversion/#tanjun.conversion.to_member","text":"to_member : typing . Final [ ToMember ] = ToMember () Convert user input to a hikari.guilds.Member object.","title":"to_member"},{"location":"reference/conversion/#tanjun.conversion.to_message","text":"to_message : typing . Final [ ToMessage ] = ToMessage () Convert user input to a hikari.messages.Message object.","title":"to_message"},{"location":"reference/conversion/#tanjun.conversion.to_presence","text":"to_presence : typing . Final [ ToPresence ] = ToPresence () Convert user input to a cached hikari.presences.MemberPresence .","title":"to_presence"},{"location":"reference/conversion/#tanjun.conversion.to_role","text":"to_role : typing . Final [ ToRole ] = ToRole () Convert user input to a hikari.guilds.Role object.","title":"to_role"},{"location":"reference/conversion/#tanjun.conversion.to_snowflake","text":"to_snowflake : typing . Final [ collections . Callable [[ _ArgumentT ], hikari . Snowflake ]] = parse_snowflake Convert user input to a hikari.snowflakes.Snowflake . Note This also range validates the input.","title":"to_snowflake"},{"location":"reference/conversion/#tanjun.conversion.to_user","text":"to_user : typing . Final [ ToUser ] = ToUser () Convert user input to a hikari.users.User object.","title":"to_user"},{"location":"reference/conversion/#tanjun.conversion.to_voice_state","text":"to_voice_state : typing . Final [ ToVoiceState ] = ToVoiceState () Convert user input to a cached hikari.voices.VoiceState .","title":"to_voice_state"},{"location":"reference/conversion/#tanjun.conversion.BaseConverter","text":"Bases: abc . ABC Base class for the standard converters. Warning Inheriting from this is completely unnecessary and should be avoided for people using the library unless they know what they're doing. This is detail of the standard implementation and isn't guaranteed to work between implementations but will work for implementations which provide the standard dependency injection or special cased support for these. While it isn't necessary to subclass this to implement your own converters since dependency injection can be used to access fields like the current Context, this class introduces some niceties around stuff like state warnings.","title":"BaseConverter"},{"location":"reference/conversion/#tanjun.conversion.BaseConverter.async_caches","text":"async_caches () Collection of the asynchronous caches that this converter relies on. This will only be necessary if the suggested intents or cache_components aren't enabled for a converter which requires cache.","title":"async_caches()"},{"location":"reference/conversion/#tanjun.conversion.BaseConverter.cache_components","text":"cache_components () Cache component(s) the converter takes advantage of. Note Unless tanjun.conversion.BaseConverter.requires_cache is True , these cache components aren't necessary but simply avoid the converter from falling back to REST requests. This will be hikari.api.config.CacheComponents.NONE if the converter doesn't make cache calls.","title":"cache_components()"},{"location":"reference/conversion/#tanjun.conversion.BaseConverter.check_client","text":"check_client ( client , parent_name ) Check that this converter will work with the given client. This never raises any errors but simply warns the user if the converter is not compatible with the given client. PARAMETER DESCRIPTION client The client to check against. TYPE: tanjun . Client parent_name The name of the converter's parent, used for warning messages. TYPE: str","title":"check_client()"},{"location":"reference/conversion/#tanjun.conversion.BaseConverter.intents","text":"intents () Gateway intents this converter takes advantage of. Note This field is supplementary to tanjun.conversion.BaseConverter.cache_components and is used to detect when the relevant component might not actually be being kept up to date or filled by gateway events. Unless tanjun.conversion.BaseConverter.requires_cache is True , these intents being disabled won't stop this converter from working as it'll still fall back to REST requests.","title":"intents()"},{"location":"reference/conversion/#tanjun.conversion.BaseConverter.requires_cache","text":"requires_cache () Whether this converter relies on the relevant cache stores to work. If this is True then this converter will not function properly in an environment tanjun.conversion.BaseConverter.intents or tanjun.conversion.BaseConverter.cache_components isn't satisfied and will never fallback to REST requests.","title":"requires_cache()"},{"location":"reference/conversion/#tanjun.conversion.ToChannel","text":"Bases: BaseConverter Standard converter for channels mentions/IDs. For a standard instance of this see tanjun.conversion.to_channel .","title":"ToChannel"},{"location":"reference/conversion/#tanjun.conversion.ToChannel.__init__","text":"__init__ ( * , allowed_types = None , include_dms = True ) Initialise a to channel converter. PARAMETER DESCRIPTION allowed_types Collection of channel types and classes to allow. If this is empty or None then all channel types will be allowed. TYPE: typing . Optional [ collections . Collection [ typing . Union [ type [ hikari . PartialChannel ], int ]]] DEFAULT: None include_dms Whether to include DM channels in the results. May lead to a lot of extra fallbacks to REST requests if the client doesn't have a registered async cache for DMs. TYPE: bool DEFAULT: True","title":"__init__()"},{"location":"reference/conversion/#tanjun.conversion.ToEmoji","text":"Bases: BaseConverter Standard converter for custom emojis. For a standard instance of this see tanjun.conversion.to_emoji . Note If you just want to convert inpute to a hikari.emojis.Emoji , hikari.emojis.CustomEmoji or hikari.emojis.UnicodeEmoji without making any cache or REST calls then you can just use the relevant Emoji.parse , CustomEmoji.parse or UnicodeEmoji.parse methods.","title":"ToEmoji"},{"location":"reference/conversion/#tanjun.conversion.ToGuild","text":"Bases: BaseConverter Stanard converter for guilds. For a standard instance of this see tanjun.conversion.to_guild .","title":"ToGuild"},{"location":"reference/conversion/#tanjun.conversion.ToInvite","text":"Bases: BaseConverter Standard converter for invites.","title":"ToInvite"},{"location":"reference/conversion/#tanjun.conversion.ToInviteWithMetadata","text":"Bases: BaseConverter Standard converter for invites with metadata. For a standard instance of this see tanjun.conversion.to_invite_with_metadata . Note Unlike tanjun.conversion.InviteConverter , this converter is cache dependent.","title":"ToInviteWithMetadata"},{"location":"reference/conversion/#tanjun.conversion.ToMember","text":"Bases: BaseConverter Standard converter for guild members. For a standard instance of this see tanjun.conversion.to_member . This converter allows both mentions, raw IDs and partial usernames/nicknames and only works within a guild context.","title":"ToMember"},{"location":"reference/conversion/#tanjun.conversion.ToMessage","text":"Bases: BaseConverter Standard converter for messages. For a standard instance of this see tanjun.conversion.to_message .","title":"ToMessage"},{"location":"reference/conversion/#tanjun.conversion.ToPresence","text":"Bases: BaseConverter Standard converter for presences. For a standard instance of this see tanjun.conversion.to_presence . This converter is cache dependent and only works in a guild context.","title":"ToPresence"},{"location":"reference/conversion/#tanjun.conversion.ToRole","text":"Bases: BaseConverter Standard converter for guild roles. For a standard instance of this see tanjun.conversion.to_role .","title":"ToRole"},{"location":"reference/conversion/#tanjun.conversion.ToUser","text":"Bases: BaseConverter Standard converter for users. For a standard instance of this see tanjun.conversion.to_user .","title":"ToUser"},{"location":"reference/conversion/#tanjun.conversion.ToVoiceState","text":"Bases: BaseConverter Standard converter for voice states. For a standard instance of this see tanjun.conversion.to_voice_state . Note This converter is cache dependent and only works in a guild context.","title":"ToVoiceState"},{"location":"reference/conversion/#tanjun.conversion.from_datetime","text":"from_datetime ( value , / , * , style = 'f' ) Format a datetime as Discord's datetime format. More information on this format can be found at https://discord.com/developers/docs/reference#message-formatting-timestamp-styles PARAMETER DESCRIPTION value The datetime to format. TYPE: datetime . datetime style The style to use. The valid styles can be found at https://discord.com/developers/docs/reference#message-formatting-formats . TYPE: str DEFAULT: 'f' RETURNS DESCRIPTION str The formatted datetime. RAISES DESCRIPTION ValueError If the provided datetime is timezone naive. If an invalid style is provided.","title":"from_datetime()"},{"location":"reference/conversion/#tanjun.conversion.parse_message_id","text":"parse_message_id ( value , / , * , message = 'No valid message link or ID found' ) Parse a user ID from a string or int value. PARAMETER DESCRIPTION value The value to parse (this argument can only be passed positionally). TYPE: _ArgumentT message The error message to raise if the value cannot be parsed. TYPE: str DEFAULT: 'No valid message link or ID found' RETURNS DESCRIPTION tuple [ hikari . Snowflake | None, hikari . Snowflake ] The parsed channel and message IDs. RAISES DESCRIPTION ValueError If the value cannot be parsed.","title":"parse_message_id()"},{"location":"reference/conversion/#tanjun.conversion.to_bool","text":"to_bool ( value ) Convert user string input into a boolean value. PARAMETER DESCRIPTION value The value to convert. TYPE: str RETURNS DESCRIPTION bool The converted value. RAISES DESCRIPTION ValueError If the value cannot be converted.","title":"to_bool()"},{"location":"reference/conversion/#tanjun.conversion.to_color","text":"to_color ( argument ) Convert user input to a hikari.colors.Color object.","title":"to_color()"},{"location":"reference/conversion/#tanjun.conversion.to_datetime","text":"to_datetime ( value ) Parse a datetime from Discord's datetime format. More information on this format can be found at https://discord.com/developers/docs/reference#message-formatting-timestamp-styles PARAMETER DESCRIPTION value The value to parse. TYPE: str RETURNS DESCRIPTION datetime . datetime The parsed datetime. RAISES DESCRIPTION ValueError If the value cannot be parsed.","title":"to_datetime()"},{"location":"reference/dependencies/","text":"tanjun.dependencies # Default dependency utilities used within Tanjun and their abstract interfaces. tanjun.dependencies.async_cache # Interface for an optional asynchronous gateway cache dependency. This allows you to share data between instances using something like a redis cache (for example) and will be used by standard Tanjun components as well as extensions if implemented. Note While there aren't any standard implementations for these interfaces, a Redis implementation of this for the types found in Hikari's gateway cache can be found in hikari-sake >=v1.0.1a1 (exposed by sake.redis.ResourceClient.add_to_tanjun ). Tanjun will use the following type dependencies for these interfaces if they are registered with the client: AsyncCache[str, hikari.InviteWithMetadata] SfCache[hikari.PermissibleGuildChannel] SfCache[hikari.GuildThreadChannel] SfCache[hikari.KnownCustomEmoji] SfCache[hikari.Guild] SfCache[hikari.Role] SfCache[hikari.User] SfGuildBound[hikari.Member] SfGuildBound[hikari.MemberPresence] SfGuildBound[hikari.VoiceState] SfGuildBound[hikari.Role] SingleStoreCache[hikari.OwnUser] SingleStoreCache[hikari.Application] SingleStoreCache[hikari.AuthorizationApplication] SfCache module-attribute # SfCache = AsyncCache [ hikari . Snowflakeish , _ValueT ] Alias of tanjun.dependencies.AsyncCache where the key is a snowflake. SfChannelBound module-attribute # SfChannelBound = ChannelBoundCache [ hikari . Snowflakeish , _ValueT ] Alias of tanjun.dependencies.ChannelBoundCache where the key is a snowflake. SfGuildBound module-attribute # SfGuildBound = GuildBoundCache [ hikari . Snowflakeish , _ValueT ] Alias of tanjun.dependencies.GuildBoundCache where the key is a snowflake. AsyncCache # Bases: abc . ABC , typing . Generic [ _KeyT , _ValueT ] Abstract interface of a cache which stores globally identifiable resources. Note This will never be implemented for resources such as hikari.guilds.Member and hikari.presences.MemberPresence which are only unique per-parent resource. get abstractmethod async # get ( key , / , * , default = Ellipsis ) Get an entry from this cache by ID. PARAMETER DESCRIPTION key Unique key of the entry to get; this will often be a snowflake. TYPE: _KeyT default The default value to return if an entry wasn't found. If provided then no errors will be raised when no entry is found. TYPE: _DefaultT DEFAULT: Ellipsis RETURNS DESCRIPTION _ValueT | _DefaultT The found entry or the default if any was provided. RAISES DESCRIPTION CacheMissError If the entry wasn't found. This won't be raised if default is passed. EntryNotFound If the entry wasn't found and the the entry definitely doesn't exist. This won't be raised if default is passed. This is a specialisation of CacheMissError and thus may be caught as CacheMissError and otherwise would need to be before CacheMissError` in a try, multiple catch statement. iter_all abstractmethod # iter_all () Asynchronously iterate over the globally cached entries for this resource. Note For more information on how this is used, see the documentation for hikari.iterators.LazyIterator . RETURNS DESCRIPTION CacheIterator [ _ValueT ] An asynchronous iterator of the entries cached globally for this resource. CacheIterator # Bases: hikari . LazyIterator [ _ValueT ] Abstract interface of a cache resource asynchronous iterator. For more information on how this is used, see the documentation for hikari.iterators.LazyIterator . len abstractmethod async # len () Get the length of the target resource. Note Unlike tanjun.dependencies.CacheIterator.count , this method will not deplete the iterator. RETURNS DESCRIPTION int The length of the targeted resource. CacheMissError # Bases: errors . TanjunError Raised when an entry isn't found in the cache. Note EntryNotFound inherits from this error and will only be raised if the cache knows that the entry doesn't exist. ChannelBoundCache # Bases: abc . ABC , typing . Generic [ _KeyT , _ValueT ] Abstract interface of a cache which stores channel-bound resources. get_from_channel abstractmethod async # get_from_channel ( channel_id , key , / , * , default = Ellipsis ) Get an entry from this cache for a specific channel by ID. PARAMETER DESCRIPTION channel_id ID of the channel to get an entry for. TYPE: hikari . Snowflakeish key Unique key of the entry to get; this will usually be a snowflake. TYPE: _KeyT default The default value to return if an entry wasn't found. If provided then no errors will be raised when no entry is found. TYPE: _DefaultT DEFAULT: Ellipsis RETURNS DESCRIPTION _ValueT | _DefaultT The found entry or the default if any was provided. RAISES DESCRIPTION CacheMissError If the entry wasn't found. This won't be raised if default is passed. EntryNotFound If the entry wasn't found and the the entry definitely doesn't exist. This won't be raised if default is passed. This is a specialisation of CacheMissError and thus may be caught as CacheMissError and otherwise would need to be before CacheMissError` in a try, multiple catch statement. iter_all abstractmethod # iter_all () Asynchronously iterate over the globally cached entries for this resource. Note For more information on how this is used, see the documentation for hikari.iterators.LazyIterator . RETURNS DESCRIPTION CacheIterator [ _ValueT ] An asynchronous iterator of the entries cached globally for this resource. iter_for_channel abstractmethod # iter_for_channel ( channel_id ) Asynchronously iterate over the entries entries cached for a channel. PARAMETER DESCRIPTION channel_id ID of the channel to iterate over the entries cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ _ValueT ] An asynchronous iterator of the entries cached for the specified channel. EntryNotFound # Bases: CacheMissError Raised when an entry does not exist. Note This is a specialisation of CacheMissError which indicates that the cache is sure that the entry doesn't exist. GuildBoundCache # Bases: abc . ABC , typing . Generic [ _KeyT , _ValueT ] Abstract interface of a cache which stores guild-bound resources. get_from_guild abstractmethod async # get_from_guild ( guild_id , key , / , * , default = Ellipsis ) Get an entry from this cache for a specific guild by ID. PARAMETER DESCRIPTION guild_id ID of the guild to get an entry for. TYPE: hikari . Snowflakeish key Unique key of the entry to get; this will usually be a snowflake. TYPE: _KeyT default The default value to return if an entry wasn't found. If provided then no errors will be raised when no entry is found. TYPE: _DefaultT DEFAULT: Ellipsis RETURNS DESCRIPTION _ValueT | _DefaultT The found entry or the default if any was provided. RAISES DESCRIPTION CacheMissError If the entry wasn't found. This won't be raised if default is passed. EntryNotFound If the entry wasn't found and the the entry definitely doesn't exist. This won't be raised if default is passed. This is a specialisation of CacheMissError and thus may be caught as CacheMissError and otherwise would need to be before CacheMissError` in a try, multiple catch statement. iter_all abstractmethod # iter_all () Asynchronously iterate over the globally cached entries for this resource. Note For more information on how this is used, see the documentation for hikari.iterators.LazyIterator . RETURNS DESCRIPTION CacheIterator [ _ValueT ] An asynchronous iterator of the entries cached globally for this resource. iter_for_guild abstractmethod # iter_for_guild ( guild_id ) Asynchronously iterate over the entries entries cached for a guild. Note For more information on how this is used, see the documentation for hikari.iterators.LazyIterator . PARAMETER DESCRIPTION guild_id ID of the guild to iterate over the entries cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ _ValueT ] An asynchronous iterator of the entries cached for the specified guild. SingleStoreCache # Bases: abc . ABC , typing . Generic [ _ValueT ] Abstract interface of a cache which stores one resource. Note This is mostly just for the hikari.users.OwnUser cache store. get abstractmethod async # get ( * , default = Ellipsis ) Get the entry. PARAMETER DESCRIPTION default The default value to return if an entry wasn't found. If provided then no errors will be raised when no entry is found. TYPE: _DefaultT DEFAULT: Ellipsis RETURNS DESCRIPTION _ValueT | _DefaultT The found entry or the default if any was provided. RAISES DESCRIPTION CacheMissError If the entry wasn't found. This won't be raised if default is passed. EntryNotFound If the entry wasn't found and the the entry definitely doesn't exist. This won't be raised if default is passed. This is a specialisation of CacheMissError and thus may be caught as CacheMissError and otherwise would need to be before CacheMissError` in a try, multiple catch statement. tanjun.dependencies.callbacks # Callback dependencies used for getting context and client based data. fetch_my_user async # fetch_my_user ( client , * , me_cache = None ) Fetch the current user from the client's cache or rest client. Note This is used in the standard LazyConstant[hikari.users.OwnUser] dependency. PARAMETER DESCRIPTION client The client to use to fetch the user. TYPE: alluka . Injected [ tanjun . Client ] RETURNS DESCRIPTION hikari . OwnUser The current user. RAISES DESCRIPTION RuntimeError If the cache couldn't be used to get the current user and the REST client is not bound to a Bot token. tanjun.dependencies.data # Dependency utilities used for managing data. LazyConstant # Bases: typing . Generic [ _T ] Injected type used to hold and generate lazy constants. Note To easily resolve this type use inject_lc . __init__ # __init__ ( callback ) Initiate a new lazy constant. PARAMETER DESCRIPTION callback Callback used to resolve this to a constant value. This supports dependency injection and may either be sync or asynchronous. TYPE: alluka . abc . CallbackSig [ _T ] acquire # acquire () Acquire this lazy constant as an asynchronous lock. This is used to ensure that the value is only generated once and should be kept acquired until LazyConstant.set_value has been called. RETURNS DESCRIPTION contextlib . AbstractAsyncContextManager [ typing . Any ] Context manager that can be used to acquire the lock. callback property # callback () Descriptor of the callback used to get this constant's initial value. get_value # get_value () Get the value of this constant if set, else None . reset # reset () Clear the internally stored value. set_value # set_value ( value ) Set the constant value. PARAMETER DESCRIPTION value The value to set. TYPE: _T RAISES DESCRIPTION RuntimeError If the constant has already been set. cache_callback # cache_callback ( callback , / , * , expire_after = None ) Cache the result of a callback within a dependency injection context. Note This is internally used by cached_inject . PARAMETER DESCRIPTION callback The callback to cache the result of. TYPE: alluka . abc . CallbackSig [ _T ] expire_after The amount of time to cache the result for in seconds. Leave this as None to cache for the runtime of the application. TYPE: typing . Union [ int , float , datetime . timedelta , None] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [..., collections . abc . Corouting [ typing . Any , typing . Any , _T ]] A callback which will cache the result of the given callback after the first call. RAISES DESCRIPTION ValueError If expire_after is not a valid value. If expire_after is not less than or equal to 0 seconds. cached_inject # cached_inject ( callback , / , * , expire_after = None ) Inject a callback with caching. This acts like alluka.inject and the result of it should also be assigned to a parameter's default to be used. Example # async def resolve_database ( client : tanjun . abc . Client = tanjun . inject ( type = tanjun . abc . Client ) ) -> Database : raise NotImplementedError @tanjun . as_message_command ( \"command name\" ) async def command ( ctx : tanjun . abc . Context , db : Database = tanjun . cached_inject ( resolve_database ) ) -> None : raise NotImplementedError PARAMETER DESCRIPTION callback The callback to inject. TYPE: alluka . abc . CallbackSig [ _T ] expire_after The amount of time to cache the result for in seconds. Leave this as None to cache for the runtime of the application. TYPE: typing . Union [ float , int , datetime . timedelta , None] DEFAULT: None RETURNS DESCRIPTION alluka . InjectedDescriptor [ _T ] Injector used to resolve the cached callback. RAISES DESCRIPTION ValueError If expire_after is not a valid value. If expire_after is not less than or equal to 0 seconds. inject_lc # inject_lc ( type_ ) Make a LazyConstant injector. This acts like alluka.inject and the result of it should also be assigned to a parameter's default to be used. Note For this to work, a LazyConstant must've been set as a type dependency for the passed type_ . PARAMETER DESCRIPTION type_ The type of the constant to resolve. TYPE: type [ _T ] RETURNS DESCRIPTION alluka . InjectedDescriptor [ _T ] Injector used to resolve the LazyConstant. Example # @component . with_command @tanjun . as_message_command async def command ( ctx : tanjun . abc . MessageCommand , application : hikari . Application = tanjun . inject_lc ( hikari . Application ) ) -> None : raise NotImplementedError ... async def resolve_app ( client : tanjun . abc . Client = tanjun . inject ( type = tanjun . abc . Client ) ) -> hikari . Application : raise NotImplementedError tanjun . Client . from_gateway_bot ( ... ) . set_type_dependency ( tanjun . LazyConstant [ hikari . Application ] = tanjun . LazyConstant ( resolve_app ) ) make_lc_resolver # make_lc_resolver ( type_ ) Make an injected callback which resolves a LazyConstant. Note This is internally used by inject_lc . Note For this to work, a LazyConstant must've been set as a type dependency for the passed type_ . PARAMETER DESCRIPTION type_ The type of the constant to resolve. TYPE: type [ _T ] RETURNS DESCRIPTION collections . abc . Callable [..., collections . abc . Coroutine [ typing . Any , typing . Any , _T ]] An injected callback used to resolve the LazyConstant. tanjun.dependencies.limiters # Command cooldown and concurrency limiters. AbstractConcurrencyLimiter # Bases: abc . ABC Interface used for limiting command concurrent usage. release abstractmethod async # release ( bucket_id , ctx ) Release a concurrency lock on a bucket. try_acquire abstractmethod async # try_acquire ( bucket_id , ctx ) Try to acquire a concurrency lock on a bucket. PARAMETER DESCRIPTION bucket_id The concurrency bucket to acquire. TYPE: str ctx The context to acquire this resource lock with. TYPE: tanjun . Context RETURNS DESCRIPTION bool Whether the lock was acquired. AbstractCooldownManager # Bases: abc . ABC Interface used for managing command calldowns. check_cooldown abstractmethod async # check_cooldown ( bucket_id , ctx , / , * , increment = False ) Check if a bucket is on cooldown for the provided context. PARAMETER DESCRIPTION bucket_id The cooldown bucket to check. TYPE: str ctx The context of the command. TYPE: tanjun . Context increment Whether this call should increment the bucket's use counter if it isn't depleted. TYPE: bool DEFAULT: False RETURNS DESCRIPTION datetime . datetime | None When this command will next be usable for the provided context if it's in cooldown else None . increment_cooldown abstractmethod async # increment_cooldown ( bucket_id , ctx ) Increment the cooldown of a cooldown bucket. PARAMETER DESCRIPTION bucket_id The cooldown bucket's ID. TYPE: str ctx The context of the command. TYPE: tanjun . Context BucketResource # Bases: int , enum . Enum Resource target types used within command calldowns and concurrency limiters. CHANNEL class-attribute # CHANNEL = 2 A per-channel resource bucket. GLOBAL class-attribute # GLOBAL = 7 A global resource bucket. GUILD class-attribute # GUILD = 6 A per-guild resource bucket. When executed in a DM this will be per-DM. MEMBER class-attribute # MEMBER = 1 A per-guild member resource bucket. When executed in a DM this will be per-DM. PARENT_CHANNEL class-attribute # PARENT_CHANNEL = 3 A per-parent channel resource bucket. For DM channels this will be per-DM, for guild channels with no parents this'll be per-guild. TOP_ROLE class-attribute # TOP_ROLE = 5 A per-highest role resource bucket. When executed in a DM this will be per-DM, with this defaulting to targeting the @everyone role if they have no real roles. USER class-attribute # USER = 0 A per-user resource bucket. ConcurrencyPostExecution # Post-execution hook used to release a bucket concurrency limiter. Note For a concurrency limiter to work properly, both ConcurrencyPreExecution and ConcurrencyPostExecution hooks must be registered for a command scope. __init__ # __init__ ( bucket_id ) Initialise a concurrency post-execution hook. PARAMETER DESCRIPTION bucket_id The concurrency limit bucket's ID. TYPE: str ConcurrencyPreExecution # Pre-execution hook used to acquire a bucket concurrency limiter. Note For a concurrency limiter to work properly, both ConcurrencyPreExecution and ConcurrencyPostExecution hooks must be registered for a command scope. __init__ # __init__ ( bucket_id , / , * , error = None , error_message = 'This resource is currently busy; please try again later.' ) Initialise a concurrency pre-execution hook. PARAMETER DESCRIPTION bucket_id The concurrency limit bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two one str argument which is the limiting bucket's ID. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if this fails to acquire the concurrency limit. This supports localisation and uses the check name \"tanjun.concurrency\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This resource is currently busy; please try again later.' CooldownPreExecution # Pre-execution hook used to manage a command's cooldowns. To avoid race-conditions this handles both erroring when the bucket is hit instead and incrementing the bucket's use counter. __init__ # __init__ ( bucket_id , / , * , error = None , error_message = 'This command is currently in cooldown. Try again {cooldown} .' , owners_exempt = True ) Initialise a pre-execution cooldown command hook. PARAMETER DESCRIPTION bucket_id The cooldown bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two arguments one of type str and datetime.datetime where the first is the limiting bucket's ID and the second is when said bucket can be used again. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str , datetime . datetime ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.cooldown\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This command is currently in cooldown. Try again {cooldown}.' owners_exempt Whether owners should be exempt from the cooldown. TYPE: bool DEFAULT: True InMemoryConcurrencyLimiter # Bases: AbstractConcurrencyLimiter In-memory standard implementation of AbstractConcurrencyLimiter . Examples: InMemoryConcurrencyLimiter.set_bucket may be used to set the concurrency limits for a specific bucket: ( InMemoryConcurrencyLimiter () # Set the default bucket template to 10 concurrent uses of the command per-user. . set_bucket ( \"default\" , tanjun . BucketResource . USER , 10 ) # Set the \"moderation\" bucket with a limit of 5 concurrent uses per-guild. . set_bucket ( \"moderation\" , tanjun . BucketResource . GUILD , 5 ) . set_bucket () # add_to_client will setup the concurrency manager (setting it as an # injected dependency and registering callbacks to manage it). . add_to_client ( client ) ) add_to_client # add_to_client ( client ) Add this concurrency manager to a tanjun client. Note This registers the manager as a type dependency and manages opening and closing the manager based on the client's life cycle. PARAMETER DESCRIPTION client The client to add this concurrency manager to. TYPE: tanjun . Client close # close () Stop the concurrency manager. RAISES DESCRIPTION RuntimeError If the concurrency manager is not running. disable_bucket # disable_bucket ( bucket_id ) Disable a concurrency limit bucket. This will stop the bucket from ever hitting a concurrency limit and also prevents the bucket from defaulting. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The bucket to disable. TYPE: str RETURNS DESCRIPTION Self This concurrency manager to allow for chaining. open # open ( * , _loop = None ) Start the concurrency manager. RAISES DESCRIPTION RuntimeError If the concurrency manager is already running. If called in a thread with no running event loop. set_bucket # set_bucket ( bucket_id , resource , limit ) Set the concurrency limit for a specific bucket. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The ID of the bucket to set the concurrency limit for. TYPE: str resource The type of resource to target for the concurrency limit. TYPE: BucketResource limit The maximum number of concurrent uses to allow. TYPE: int RETURNS DESCRIPTION Self The concurrency manager to allow call chaining. RAISES DESCRIPTION ValueError If an invalid resource type is given. if limit is less 0 or negative. InMemoryCooldownManager # Bases: AbstractCooldownManager In-memory standard implementation of AbstractCooldownManager . Examples: InMemoryCooldownManager.set_bucket may be used to set the cooldown for a specific bucket: ( InMemoryCooldownManager () # Set the default bucket template to a per-user 10 uses per-60 seconds cooldown. . set_bucket ( \"default\" , tanjun . BucketResource . USER , 10 , 60 ) # Set the \"moderation\" bucket to a per-guild 100 uses per-5 minutes cooldown. . set_bucket ( \"moderation\" , tanjun . BucketResource . GUILD , 100 , datetime . timedelta ( minutes = 5 )) . set_bucket () # add_to_client will setup the cooldown manager (setting it as an # injected dependency and registering callbacks to manage it). . add_to_client ( client ) ) add_to_client # add_to_client ( client ) Add this cooldown manager to a tanjun client. Note This registers the manager as a type dependency and manages opening and closing the manager based on the client's life cycle. PARAMETER DESCRIPTION client The client to add this cooldown manager to. TYPE: tanjun . Client close # close () Stop the cooldown manager. RAISES DESCRIPTION RuntimeError If the cooldown manager is not running. disable_bucket # disable_bucket ( bucket_id ) Disable a cooldown bucket. This will stop the bucket from ever hitting a cooldown and also prevents the bucket from defaulting. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The bucket to disable. TYPE: str RETURNS DESCRIPTION Self This cooldown manager to allow for chaining. open # open ( * , _loop = None ) Start the cooldown manager. RAISES DESCRIPTION RuntimeError If the cooldown manager is already running. If called in a thread with no running event loop. set_bucket # set_bucket ( bucket_id , resource , limit , reset_after ) Set the cooldown for a specific bucket. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The ID of the bucket to set the cooldown for. TYPE: str resource The type of resource to target for the cooldown. TYPE: BucketResource limit The number of uses per cooldown period. TYPE: int reset_after The cooldown period. TYPE: typing . Union [ int , float , datetime . timedelta ] RETURNS DESCRIPTION Self The cooldown manager to allow call chaining. RAISES DESCRIPTION ValueError If an invalid resource type is given. If reset_after or limit are negative, 0 or invalid. if limit is less 0 or negative. with_concurrency_limit # with_concurrency_limit ( bucket_id , / , * , error = None , error_message = 'This resource is currently busy; please try again later.' , follow_wrapped = False ) Add the hooks used to manage a command's concurrency limit through a decorator call. Warning Concurrency limiters will only work if there's a setup injected AbstractConcurrencyLimiter dependency with InMemoryConcurrencyLimiter being usable as a standard in-memory concurrency manager. PARAMETER DESCRIPTION bucket_id The concurrency limit bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two one str argument which is the limiting bucket's ID. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if this fails to acquire the concurrency limit. This supports localisation and uses the check name \"tanjun.concurrency\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This resource is currently busy; please try again later.' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator that adds the concurrency limiter hooks to a command. with_cooldown # with_cooldown ( bucket_id , / , * , error = None , error_message = 'This command is currently in cooldown. Try again {cooldown} .' , follow_wrapped = False , owners_exempt = True ) Add a pre-execution hook used to manage a command's cooldown through a decorator call. Warning Cooldowns will only work if there's a setup injected AbstractCooldownManager dependency with InMemoryCooldownManager being usable as a standard in-memory cooldown manager. PARAMETER DESCRIPTION bucket_id The cooldown bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two arguments one of type str and datetime.datetime where the first is the limiting bucket's ID and the second is when said bucket can be used again. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str , datetime . datetime ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.cooldown\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This command is currently in cooldown. Try again {cooldown}.' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False owners_exempt Whether owners should be exempt from the cooldown. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator that adds a CooldownPreExecution hook to the command. tanjun.dependencies.locales # Dependency used for managing localising strings around interactions commands. AbstractLocalizer module-attribute # AbstractLocalizer = AbstractLocaliser Alias of AbstractLocaliser . BasicLocalizer module-attribute # BasicLocalizer = BasicLocaliser Alias of BasicLocaliser . AbstractLocaliser # Bases: abc . ABC Abstract class of a string localiser. get_all_variants abstractmethod # get_all_variants ( identifier , / , ** kwargs ) Get all the localisation variants for an identifier. localise abstractmethod # localise ( identifier , tag , / , ** kwargs ) Localise a string with the given identifier and arguments. PARAMETER DESCRIPTION identifier The unique identifier of the string to localise. This may be in any format but the formats used by the standard implementations can be found at client-localiser . TYPE: str tag The \"IETF lang tag\" to localise the string to. This should usually be a hikari.locales.Locale . TYPE: str **kwargs Key-word arguments to pass to the string as format args. TYPE: typing . Any DEFAULT: {} RETURNS DESCRIPTION str The localised string. localize # localize ( identifier , tag , / , ** kwargs ) Alias for AbstractLocaliser.localise . BasicLocaliser # Bases: AbstractLocaliser Standard implementation of AbstractLocaliser with only basic text mapping support. __init__ # __init__ () Initialise a new BasicLocaliser . add_to_client # add_to_client ( client ) Add this global localiser to a tanjun client. Note This registers the manager as a type dependency to let Tanjun use it. PARAMETER DESCRIPTION client The client to add this global localiser to. TYPE: tanjun . Client set_variants # set_variants ( identifier , variants = None , / , ** other_variants ) Set the variants for a localised field. PARAMETER DESCRIPTION identifier Identifier of the field to set the localised variants for. This may be in any format but the formats used by the standard implementations can be found at client-localiser . TYPE: str variants Mapping of hikari.locales.Locale s to the localised values. TYPE: typing . Optional [ collections . Mapping [ str , str ]] DEFAULT: None RETURNS DESCRIPTION Self The localiser object to enable chained calls. tanjun.dependencies.owners # Dependency used for managing owner checks. AbstractOwners # Bases: abc . ABC Interface used to check if a user is deemed to be the bot's \"owner\". check_ownership abstractmethod async # check_ownership ( client , user ) Check whether this object is owned by the given object. PARAMETER DESCRIPTION client The Tanjun client this check is being called by. TYPE: tanjun . Client user The user to check ownership for. TYPE: hikari . User RETURNS DESCRIPTION bool Whether the bot is owned by the provided user. Owners # Bases: AbstractOwners Default implementation of the owner check interface. Warning fallback_to_application is only possible when the REST client is bound to a Bot token or if a type dependency is registered for tanjun.dependencies.SingleStoreCache[hikari.Application] . __init__ # __init__ ( * , expire_after = datetime . timedelta ( minutes = 5 ), fallback_to_application = True , owners = None ) Initiate a new owner check dependency. PARAMETER DESCRIPTION expire_after The amount of time to cache application owner data for in seconds. This is only applicable if rest is also passed. TYPE: typing . Union [ datetime . timedelta , int , float ] DEFAULT: datetime.timedelta(minutes=5) fallback_to_application Whether this check should fallback to checking the application's owners if the user isn't in owners . This only works when the bot's rest client is bound to a Bot token or if tanjun.dependencies.SingleStoreCache[hikari.Application] is available. TYPE: bool DEFAULT: True owners Sequence of objects and IDs of the users that are allowed to use the bot's owners-only commands. TYPE: typing . Optional [ hikari . SnowflakeishSequence [ hikari . User ]] DEFAULT: None tanjun.dependencies.reloaders # Implementation of a hot reloader for Tanjun. HotReloader # Manages hot reloading modules for a Tanjun client.. Warning An instance of this can only be linked to 1 client. Examples: client = tanjun . Client . from_gateway_bot ( bot ) ( tanjun . dependencies . HotReloader () . add_modules ( \"python.module.path\" , pathlib . Path ( \"./module.py\" )) . add_directory ( \"./modules/\" ) . add_to_client ( client ) ) __init__ # __init__ ( * , commands_guild = None , interval = datetime . timedelta ( microseconds = 500000 ), redeclare_cmds_after = datetime . timedelta ( seconds = 10 ), unload_on_delete = True ) Initialise a hot reloader. Warning redeclare_cmds_after is not aware of commands declared outside of the reloader and will lead to commands being redeclared on startup when mixed with tanjun.clients.Client. init 's declare_global_commands argument when it is not None . PARAMETER DESCRIPTION commands_guild Object or ID of the guild to declare commands in if redeclare_cmds_after is not None . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: None interval How often this should scan files and directories for changes in seconds. TYPE: typing . Union [ int , float , datetime . timedelta ] DEFAULT: datetime.timedelta(microseconds=500000) redeclare_cmds_after How often to redeclare application commands after a change to the commands is detected. If None is passed here then this will not redeclare the application's commands. TYPE: typing . Union [ int , float , datetime . timedelta , None] DEFAULT: datetime.timedelta(seconds=10) unload_on_delete Whether this should unload modules when their relevant file is deleted. TYPE: bool DEFAULT: True add_directory # add_directory ( directory , / , * , namespace = None ) Add a directory for this hot reloader to track. Note This will only reload modules directly in the target directory and will not scan sub-directories. PARAMETER DESCRIPTION directory Path of the directory to hot reload. TYPE: typing . Union [ str , pathlib . Path ] namespace The python namespace this directory's modules should be imported from, if applicable. This work as {namespace}.{file.name.removesuffix(\".py\")} and will have the same behaviour as when a str is passed to tanjun.abc.Client.load_modules if passed. If left as None then this will have the same behaviour as when a pathlib.Path is passed to tanjun.abc.Client.load_modules . TYPE: typing . Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Self The hot reloader to enable chained calls. RAISES DESCRIPTION FileNotFoundError If the directory cannot be found add_directory_async async # add_directory_async ( directory , / , * , namespace = None ) Asynchronous variant of tanjun.dependencies.reloaders.HotReloader.add_directory . Unlike tanjun.dependencies.reloaders.HotReloader.add_directory , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.dependencies.reloaders.HotReloader.add_directory . add_modules # add_modules ( * paths ) Add modules for this hot reloader to track. PARAMETER DESCRIPTION *paths Module paths for this hot reloader to track. This has the same behaviour as [tanjun.abc.Client.load_modules][ for how [pathlib.Path][] and str are treated. TYPE: typing . Union [ str , pathlib . Path ] DEFAULT: () RAISES DESCRIPTION FileNotFoundError If the module's file doesn't exist anymore. ModuleNotFoundError If the str module path cannot be imported. add_modules_async async # add_modules_async ( * paths ) Asynchronous variant of tanjun.dependencies.reloaders.HotReloader.add_modules . Unlike tanjun.dependencies.reloaders.HotReloader.add_modules , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.abc.Client.load_modules . add_to_client # add_to_client ( client ) Add this to a tanjun.abc.Client instance. This registers start and closing callbacks which handle the lifetime of this and adds this as a type dependency. PARAMETER DESCRIPTION client The client to link this hot reloader to. TYPE: tanjun . Client scan async # scan ( client ) Manually scan this hot reloader's tracked modules for changes. PARAMETER DESCRIPTION client The client to reload and unload modules in. TYPE: tanjun . Client start # start ( client ) Start the hot reloader. RAISES DESCRIPTION RuntimeError If the hot reloader is already running. stop # stop () Stop the hot reloader. RAISES DESCRIPTION RuntimeError If the hot reloader isn't running.","title":"tanjun.dependencies"},{"location":"reference/dependencies/#tanjundependencies","text":"Default dependency utilities used within Tanjun and their abstract interfaces.","title":"tanjun.dependencies"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache","text":"Interface for an optional asynchronous gateway cache dependency. This allows you to share data between instances using something like a redis cache (for example) and will be used by standard Tanjun components as well as extensions if implemented. Note While there aren't any standard implementations for these interfaces, a Redis implementation of this for the types found in Hikari's gateway cache can be found in hikari-sake >=v1.0.1a1 (exposed by sake.redis.ResourceClient.add_to_tanjun ). Tanjun will use the following type dependencies for these interfaces if they are registered with the client: AsyncCache[str, hikari.InviteWithMetadata] SfCache[hikari.PermissibleGuildChannel] SfCache[hikari.GuildThreadChannel] SfCache[hikari.KnownCustomEmoji] SfCache[hikari.Guild] SfCache[hikari.Role] SfCache[hikari.User] SfGuildBound[hikari.Member] SfGuildBound[hikari.MemberPresence] SfGuildBound[hikari.VoiceState] SfGuildBound[hikari.Role] SingleStoreCache[hikari.OwnUser] SingleStoreCache[hikari.Application] SingleStoreCache[hikari.AuthorizationApplication]","title":"async_cache"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.SfCache","text":"SfCache = AsyncCache [ hikari . Snowflakeish , _ValueT ] Alias of tanjun.dependencies.AsyncCache where the key is a snowflake.","title":"SfCache"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.SfChannelBound","text":"SfChannelBound = ChannelBoundCache [ hikari . Snowflakeish , _ValueT ] Alias of tanjun.dependencies.ChannelBoundCache where the key is a snowflake.","title":"SfChannelBound"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.SfGuildBound","text":"SfGuildBound = GuildBoundCache [ hikari . Snowflakeish , _ValueT ] Alias of tanjun.dependencies.GuildBoundCache where the key is a snowflake.","title":"SfGuildBound"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.AsyncCache","text":"Bases: abc . ABC , typing . Generic [ _KeyT , _ValueT ] Abstract interface of a cache which stores globally identifiable resources. Note This will never be implemented for resources such as hikari.guilds.Member and hikari.presences.MemberPresence which are only unique per-parent resource.","title":"AsyncCache"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.AsyncCache.get","text":"get ( key , / , * , default = Ellipsis ) Get an entry from this cache by ID. PARAMETER DESCRIPTION key Unique key of the entry to get; this will often be a snowflake. TYPE: _KeyT default The default value to return if an entry wasn't found. If provided then no errors will be raised when no entry is found. TYPE: _DefaultT DEFAULT: Ellipsis RETURNS DESCRIPTION _ValueT | _DefaultT The found entry or the default if any was provided. RAISES DESCRIPTION CacheMissError If the entry wasn't found. This won't be raised if default is passed. EntryNotFound If the entry wasn't found and the the entry definitely doesn't exist. This won't be raised if default is passed. This is a specialisation of CacheMissError and thus may be caught as CacheMissError and otherwise would need to be before CacheMissError` in a try, multiple catch statement.","title":"get()"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.AsyncCache.iter_all","text":"iter_all () Asynchronously iterate over the globally cached entries for this resource. Note For more information on how this is used, see the documentation for hikari.iterators.LazyIterator . RETURNS DESCRIPTION CacheIterator [ _ValueT ] An asynchronous iterator of the entries cached globally for this resource.","title":"iter_all()"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.CacheIterator","text":"Bases: hikari . LazyIterator [ _ValueT ] Abstract interface of a cache resource asynchronous iterator. For more information on how this is used, see the documentation for hikari.iterators.LazyIterator .","title":"CacheIterator"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.CacheIterator.len","text":"len () Get the length of the target resource. Note Unlike tanjun.dependencies.CacheIterator.count , this method will not deplete the iterator. RETURNS DESCRIPTION int The length of the targeted resource.","title":"len()"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.CacheMissError","text":"Bases: errors . TanjunError Raised when an entry isn't found in the cache. Note EntryNotFound inherits from this error and will only be raised if the cache knows that the entry doesn't exist.","title":"CacheMissError"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.ChannelBoundCache","text":"Bases: abc . ABC , typing . Generic [ _KeyT , _ValueT ] Abstract interface of a cache which stores channel-bound resources.","title":"ChannelBoundCache"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.ChannelBoundCache.get_from_channel","text":"get_from_channel ( channel_id , key , / , * , default = Ellipsis ) Get an entry from this cache for a specific channel by ID. PARAMETER DESCRIPTION channel_id ID of the channel to get an entry for. TYPE: hikari . Snowflakeish key Unique key of the entry to get; this will usually be a snowflake. TYPE: _KeyT default The default value to return if an entry wasn't found. If provided then no errors will be raised when no entry is found. TYPE: _DefaultT DEFAULT: Ellipsis RETURNS DESCRIPTION _ValueT | _DefaultT The found entry or the default if any was provided. RAISES DESCRIPTION CacheMissError If the entry wasn't found. This won't be raised if default is passed. EntryNotFound If the entry wasn't found and the the entry definitely doesn't exist. This won't be raised if default is passed. This is a specialisation of CacheMissError and thus may be caught as CacheMissError and otherwise would need to be before CacheMissError` in a try, multiple catch statement.","title":"get_from_channel()"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.ChannelBoundCache.iter_all","text":"iter_all () Asynchronously iterate over the globally cached entries for this resource. Note For more information on how this is used, see the documentation for hikari.iterators.LazyIterator . RETURNS DESCRIPTION CacheIterator [ _ValueT ] An asynchronous iterator of the entries cached globally for this resource.","title":"iter_all()"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.ChannelBoundCache.iter_for_channel","text":"iter_for_channel ( channel_id ) Asynchronously iterate over the entries entries cached for a channel. PARAMETER DESCRIPTION channel_id ID of the channel to iterate over the entries cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ _ValueT ] An asynchronous iterator of the entries cached for the specified channel.","title":"iter_for_channel()"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.EntryNotFound","text":"Bases: CacheMissError Raised when an entry does not exist. Note This is a specialisation of CacheMissError which indicates that the cache is sure that the entry doesn't exist.","title":"EntryNotFound"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.GuildBoundCache","text":"Bases: abc . ABC , typing . Generic [ _KeyT , _ValueT ] Abstract interface of a cache which stores guild-bound resources.","title":"GuildBoundCache"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.GuildBoundCache.get_from_guild","text":"get_from_guild ( guild_id , key , / , * , default = Ellipsis ) Get an entry from this cache for a specific guild by ID. PARAMETER DESCRIPTION guild_id ID of the guild to get an entry for. TYPE: hikari . Snowflakeish key Unique key of the entry to get; this will usually be a snowflake. TYPE: _KeyT default The default value to return if an entry wasn't found. If provided then no errors will be raised when no entry is found. TYPE: _DefaultT DEFAULT: Ellipsis RETURNS DESCRIPTION _ValueT | _DefaultT The found entry or the default if any was provided. RAISES DESCRIPTION CacheMissError If the entry wasn't found. This won't be raised if default is passed. EntryNotFound If the entry wasn't found and the the entry definitely doesn't exist. This won't be raised if default is passed. This is a specialisation of CacheMissError and thus may be caught as CacheMissError and otherwise would need to be before CacheMissError` in a try, multiple catch statement.","title":"get_from_guild()"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.GuildBoundCache.iter_all","text":"iter_all () Asynchronously iterate over the globally cached entries for this resource. Note For more information on how this is used, see the documentation for hikari.iterators.LazyIterator . RETURNS DESCRIPTION CacheIterator [ _ValueT ] An asynchronous iterator of the entries cached globally for this resource.","title":"iter_all()"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.GuildBoundCache.iter_for_guild","text":"iter_for_guild ( guild_id ) Asynchronously iterate over the entries entries cached for a guild. Note For more information on how this is used, see the documentation for hikari.iterators.LazyIterator . PARAMETER DESCRIPTION guild_id ID of the guild to iterate over the entries cached for. TYPE: hikari . Snowflakeish RETURNS DESCRIPTION CacheIterator [ _ValueT ] An asynchronous iterator of the entries cached for the specified guild.","title":"iter_for_guild()"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.SingleStoreCache","text":"Bases: abc . ABC , typing . Generic [ _ValueT ] Abstract interface of a cache which stores one resource. Note This is mostly just for the hikari.users.OwnUser cache store.","title":"SingleStoreCache"},{"location":"reference/dependencies/#tanjun.dependencies.async_cache.SingleStoreCache.get","text":"get ( * , default = Ellipsis ) Get the entry. PARAMETER DESCRIPTION default The default value to return if an entry wasn't found. If provided then no errors will be raised when no entry is found. TYPE: _DefaultT DEFAULT: Ellipsis RETURNS DESCRIPTION _ValueT | _DefaultT The found entry or the default if any was provided. RAISES DESCRIPTION CacheMissError If the entry wasn't found. This won't be raised if default is passed. EntryNotFound If the entry wasn't found and the the entry definitely doesn't exist. This won't be raised if default is passed. This is a specialisation of CacheMissError and thus may be caught as CacheMissError and otherwise would need to be before CacheMissError` in a try, multiple catch statement.","title":"get()"},{"location":"reference/dependencies/#tanjun.dependencies.callbacks","text":"Callback dependencies used for getting context and client based data.","title":"callbacks"},{"location":"reference/dependencies/#tanjun.dependencies.callbacks.fetch_my_user","text":"fetch_my_user ( client , * , me_cache = None ) Fetch the current user from the client's cache or rest client. Note This is used in the standard LazyConstant[hikari.users.OwnUser] dependency. PARAMETER DESCRIPTION client The client to use to fetch the user. TYPE: alluka . Injected [ tanjun . Client ] RETURNS DESCRIPTION hikari . OwnUser The current user. RAISES DESCRIPTION RuntimeError If the cache couldn't be used to get the current user and the REST client is not bound to a Bot token.","title":"fetch_my_user()"},{"location":"reference/dependencies/#tanjun.dependencies.data","text":"Dependency utilities used for managing data.","title":"data"},{"location":"reference/dependencies/#tanjun.dependencies.data.LazyConstant","text":"Bases: typing . Generic [ _T ] Injected type used to hold and generate lazy constants. Note To easily resolve this type use inject_lc .","title":"LazyConstant"},{"location":"reference/dependencies/#tanjun.dependencies.data.LazyConstant.__init__","text":"__init__ ( callback ) Initiate a new lazy constant. PARAMETER DESCRIPTION callback Callback used to resolve this to a constant value. This supports dependency injection and may either be sync or asynchronous. TYPE: alluka . abc . CallbackSig [ _T ]","title":"__init__()"},{"location":"reference/dependencies/#tanjun.dependencies.data.LazyConstant.acquire","text":"acquire () Acquire this lazy constant as an asynchronous lock. This is used to ensure that the value is only generated once and should be kept acquired until LazyConstant.set_value has been called. RETURNS DESCRIPTION contextlib . AbstractAsyncContextManager [ typing . Any ] Context manager that can be used to acquire the lock.","title":"acquire()"},{"location":"reference/dependencies/#tanjun.dependencies.data.LazyConstant.callback","text":"callback () Descriptor of the callback used to get this constant's initial value.","title":"callback()"},{"location":"reference/dependencies/#tanjun.dependencies.data.LazyConstant.get_value","text":"get_value () Get the value of this constant if set, else None .","title":"get_value()"},{"location":"reference/dependencies/#tanjun.dependencies.data.LazyConstant.reset","text":"reset () Clear the internally stored value.","title":"reset()"},{"location":"reference/dependencies/#tanjun.dependencies.data.LazyConstant.set_value","text":"set_value ( value ) Set the constant value. PARAMETER DESCRIPTION value The value to set. TYPE: _T RAISES DESCRIPTION RuntimeError If the constant has already been set.","title":"set_value()"},{"location":"reference/dependencies/#tanjun.dependencies.data.cache_callback","text":"cache_callback ( callback , / , * , expire_after = None ) Cache the result of a callback within a dependency injection context. Note This is internally used by cached_inject . PARAMETER DESCRIPTION callback The callback to cache the result of. TYPE: alluka . abc . CallbackSig [ _T ] expire_after The amount of time to cache the result for in seconds. Leave this as None to cache for the runtime of the application. TYPE: typing . Union [ int , float , datetime . timedelta , None] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [..., collections . abc . Corouting [ typing . Any , typing . Any , _T ]] A callback which will cache the result of the given callback after the first call. RAISES DESCRIPTION ValueError If expire_after is not a valid value. If expire_after is not less than or equal to 0 seconds.","title":"cache_callback()"},{"location":"reference/dependencies/#tanjun.dependencies.data.cached_inject","text":"cached_inject ( callback , / , * , expire_after = None ) Inject a callback with caching. This acts like alluka.inject and the result of it should also be assigned to a parameter's default to be used.","title":"cached_inject()"},{"location":"reference/dependencies/#tanjun.dependencies.data.cached_inject--example","text":"async def resolve_database ( client : tanjun . abc . Client = tanjun . inject ( type = tanjun . abc . Client ) ) -> Database : raise NotImplementedError @tanjun . as_message_command ( \"command name\" ) async def command ( ctx : tanjun . abc . Context , db : Database = tanjun . cached_inject ( resolve_database ) ) -> None : raise NotImplementedError PARAMETER DESCRIPTION callback The callback to inject. TYPE: alluka . abc . CallbackSig [ _T ] expire_after The amount of time to cache the result for in seconds. Leave this as None to cache for the runtime of the application. TYPE: typing . Union [ float , int , datetime . timedelta , None] DEFAULT: None RETURNS DESCRIPTION alluka . InjectedDescriptor [ _T ] Injector used to resolve the cached callback. RAISES DESCRIPTION ValueError If expire_after is not a valid value. If expire_after is not less than or equal to 0 seconds.","title":"Example"},{"location":"reference/dependencies/#tanjun.dependencies.data.inject_lc","text":"inject_lc ( type_ ) Make a LazyConstant injector. This acts like alluka.inject and the result of it should also be assigned to a parameter's default to be used. Note For this to work, a LazyConstant must've been set as a type dependency for the passed type_ . PARAMETER DESCRIPTION type_ The type of the constant to resolve. TYPE: type [ _T ] RETURNS DESCRIPTION alluka . InjectedDescriptor [ _T ] Injector used to resolve the LazyConstant.","title":"inject_lc()"},{"location":"reference/dependencies/#tanjun.dependencies.data.inject_lc--example","text":"@component . with_command @tanjun . as_message_command async def command ( ctx : tanjun . abc . MessageCommand , application : hikari . Application = tanjun . inject_lc ( hikari . Application ) ) -> None : raise NotImplementedError ... async def resolve_app ( client : tanjun . abc . Client = tanjun . inject ( type = tanjun . abc . Client ) ) -> hikari . Application : raise NotImplementedError tanjun . Client . from_gateway_bot ( ... ) . set_type_dependency ( tanjun . LazyConstant [ hikari . Application ] = tanjun . LazyConstant ( resolve_app ) )","title":"Example"},{"location":"reference/dependencies/#tanjun.dependencies.data.make_lc_resolver","text":"make_lc_resolver ( type_ ) Make an injected callback which resolves a LazyConstant. Note This is internally used by inject_lc . Note For this to work, a LazyConstant must've been set as a type dependency for the passed type_ . PARAMETER DESCRIPTION type_ The type of the constant to resolve. TYPE: type [ _T ] RETURNS DESCRIPTION collections . abc . Callable [..., collections . abc . Coroutine [ typing . Any , typing . Any , _T ]] An injected callback used to resolve the LazyConstant.","title":"make_lc_resolver()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters","text":"Command cooldown and concurrency limiters.","title":"limiters"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.AbstractConcurrencyLimiter","text":"Bases: abc . ABC Interface used for limiting command concurrent usage.","title":"AbstractConcurrencyLimiter"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.AbstractConcurrencyLimiter.release","text":"release ( bucket_id , ctx ) Release a concurrency lock on a bucket.","title":"release()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.AbstractConcurrencyLimiter.try_acquire","text":"try_acquire ( bucket_id , ctx ) Try to acquire a concurrency lock on a bucket. PARAMETER DESCRIPTION bucket_id The concurrency bucket to acquire. TYPE: str ctx The context to acquire this resource lock with. TYPE: tanjun . Context RETURNS DESCRIPTION bool Whether the lock was acquired.","title":"try_acquire()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.AbstractCooldownManager","text":"Bases: abc . ABC Interface used for managing command calldowns.","title":"AbstractCooldownManager"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.AbstractCooldownManager.check_cooldown","text":"check_cooldown ( bucket_id , ctx , / , * , increment = False ) Check if a bucket is on cooldown for the provided context. PARAMETER DESCRIPTION bucket_id The cooldown bucket to check. TYPE: str ctx The context of the command. TYPE: tanjun . Context increment Whether this call should increment the bucket's use counter if it isn't depleted. TYPE: bool DEFAULT: False RETURNS DESCRIPTION datetime . datetime | None When this command will next be usable for the provided context if it's in cooldown else None .","title":"check_cooldown()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.AbstractCooldownManager.increment_cooldown","text":"increment_cooldown ( bucket_id , ctx ) Increment the cooldown of a cooldown bucket. PARAMETER DESCRIPTION bucket_id The cooldown bucket's ID. TYPE: str ctx The context of the command. TYPE: tanjun . Context","title":"increment_cooldown()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.BucketResource","text":"Bases: int , enum . Enum Resource target types used within command calldowns and concurrency limiters.","title":"BucketResource"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.BucketResource.CHANNEL","text":"CHANNEL = 2 A per-channel resource bucket.","title":"CHANNEL"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.BucketResource.GLOBAL","text":"GLOBAL = 7 A global resource bucket.","title":"GLOBAL"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.BucketResource.GUILD","text":"GUILD = 6 A per-guild resource bucket. When executed in a DM this will be per-DM.","title":"GUILD"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.BucketResource.MEMBER","text":"MEMBER = 1 A per-guild member resource bucket. When executed in a DM this will be per-DM.","title":"MEMBER"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.BucketResource.PARENT_CHANNEL","text":"PARENT_CHANNEL = 3 A per-parent channel resource bucket. For DM channels this will be per-DM, for guild channels with no parents this'll be per-guild.","title":"PARENT_CHANNEL"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.BucketResource.TOP_ROLE","text":"TOP_ROLE = 5 A per-highest role resource bucket. When executed in a DM this will be per-DM, with this defaulting to targeting the @everyone role if they have no real roles.","title":"TOP_ROLE"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.BucketResource.USER","text":"USER = 0 A per-user resource bucket.","title":"USER"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.ConcurrencyPostExecution","text":"Post-execution hook used to release a bucket concurrency limiter. Note For a concurrency limiter to work properly, both ConcurrencyPreExecution and ConcurrencyPostExecution hooks must be registered for a command scope.","title":"ConcurrencyPostExecution"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.ConcurrencyPostExecution.__init__","text":"__init__ ( bucket_id ) Initialise a concurrency post-execution hook. PARAMETER DESCRIPTION bucket_id The concurrency limit bucket's ID. TYPE: str","title":"__init__()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.ConcurrencyPreExecution","text":"Pre-execution hook used to acquire a bucket concurrency limiter. Note For a concurrency limiter to work properly, both ConcurrencyPreExecution and ConcurrencyPostExecution hooks must be registered for a command scope.","title":"ConcurrencyPreExecution"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.ConcurrencyPreExecution.__init__","text":"__init__ ( bucket_id , / , * , error = None , error_message = 'This resource is currently busy; please try again later.' ) Initialise a concurrency pre-execution hook. PARAMETER DESCRIPTION bucket_id The concurrency limit bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two one str argument which is the limiting bucket's ID. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if this fails to acquire the concurrency limit. This supports localisation and uses the check name \"tanjun.concurrency\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This resource is currently busy; please try again later.'","title":"__init__()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.CooldownPreExecution","text":"Pre-execution hook used to manage a command's cooldowns. To avoid race-conditions this handles both erroring when the bucket is hit instead and incrementing the bucket's use counter.","title":"CooldownPreExecution"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.CooldownPreExecution.__init__","text":"__init__ ( bucket_id , / , * , error = None , error_message = 'This command is currently in cooldown. Try again {cooldown} .' , owners_exempt = True ) Initialise a pre-execution cooldown command hook. PARAMETER DESCRIPTION bucket_id The cooldown bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two arguments one of type str and datetime.datetime where the first is the limiting bucket's ID and the second is when said bucket can be used again. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str , datetime . datetime ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.cooldown\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This command is currently in cooldown. Try again {cooldown}.' owners_exempt Whether owners should be exempt from the cooldown. TYPE: bool DEFAULT: True","title":"__init__()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter","text":"Bases: AbstractConcurrencyLimiter In-memory standard implementation of AbstractConcurrencyLimiter . Examples: InMemoryConcurrencyLimiter.set_bucket may be used to set the concurrency limits for a specific bucket: ( InMemoryConcurrencyLimiter () # Set the default bucket template to 10 concurrent uses of the command per-user. . set_bucket ( \"default\" , tanjun . BucketResource . USER , 10 ) # Set the \"moderation\" bucket with a limit of 5 concurrent uses per-guild. . set_bucket ( \"moderation\" , tanjun . BucketResource . GUILD , 5 ) . set_bucket () # add_to_client will setup the concurrency manager (setting it as an # injected dependency and registering callbacks to manage it). . add_to_client ( client ) )","title":"InMemoryConcurrencyLimiter"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter.add_to_client","text":"add_to_client ( client ) Add this concurrency manager to a tanjun client. Note This registers the manager as a type dependency and manages opening and closing the manager based on the client's life cycle. PARAMETER DESCRIPTION client The client to add this concurrency manager to. TYPE: tanjun . Client","title":"add_to_client()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter.close","text":"close () Stop the concurrency manager. RAISES DESCRIPTION RuntimeError If the concurrency manager is not running.","title":"close()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter.disable_bucket","text":"disable_bucket ( bucket_id ) Disable a concurrency limit bucket. This will stop the bucket from ever hitting a concurrency limit and also prevents the bucket from defaulting. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The bucket to disable. TYPE: str RETURNS DESCRIPTION Self This concurrency manager to allow for chaining.","title":"disable_bucket()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter.open","text":"open ( * , _loop = None ) Start the concurrency manager. RAISES DESCRIPTION RuntimeError If the concurrency manager is already running. If called in a thread with no running event loop.","title":"open()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryConcurrencyLimiter.set_bucket","text":"set_bucket ( bucket_id , resource , limit ) Set the concurrency limit for a specific bucket. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The ID of the bucket to set the concurrency limit for. TYPE: str resource The type of resource to target for the concurrency limit. TYPE: BucketResource limit The maximum number of concurrent uses to allow. TYPE: int RETURNS DESCRIPTION Self The concurrency manager to allow call chaining. RAISES DESCRIPTION ValueError If an invalid resource type is given. if limit is less 0 or negative.","title":"set_bucket()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryCooldownManager","text":"Bases: AbstractCooldownManager In-memory standard implementation of AbstractCooldownManager . Examples: InMemoryCooldownManager.set_bucket may be used to set the cooldown for a specific bucket: ( InMemoryCooldownManager () # Set the default bucket template to a per-user 10 uses per-60 seconds cooldown. . set_bucket ( \"default\" , tanjun . BucketResource . USER , 10 , 60 ) # Set the \"moderation\" bucket to a per-guild 100 uses per-5 minutes cooldown. . set_bucket ( \"moderation\" , tanjun . BucketResource . GUILD , 100 , datetime . timedelta ( minutes = 5 )) . set_bucket () # add_to_client will setup the cooldown manager (setting it as an # injected dependency and registering callbacks to manage it). . add_to_client ( client ) )","title":"InMemoryCooldownManager"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryCooldownManager.add_to_client","text":"add_to_client ( client ) Add this cooldown manager to a tanjun client. Note This registers the manager as a type dependency and manages opening and closing the manager based on the client's life cycle. PARAMETER DESCRIPTION client The client to add this cooldown manager to. TYPE: tanjun . Client","title":"add_to_client()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryCooldownManager.close","text":"close () Stop the cooldown manager. RAISES DESCRIPTION RuntimeError If the cooldown manager is not running.","title":"close()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryCooldownManager.disable_bucket","text":"disable_bucket ( bucket_id ) Disable a cooldown bucket. This will stop the bucket from ever hitting a cooldown and also prevents the bucket from defaulting. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The bucket to disable. TYPE: str RETURNS DESCRIPTION Self This cooldown manager to allow for chaining.","title":"disable_bucket()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryCooldownManager.open","text":"open ( * , _loop = None ) Start the cooldown manager. RAISES DESCRIPTION RuntimeError If the cooldown manager is already running. If called in a thread with no running event loop.","title":"open()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.InMemoryCooldownManager.set_bucket","text":"set_bucket ( bucket_id , resource , limit , reset_after ) Set the cooldown for a specific bucket. Note \"default\" is a special bucket_id which is used as a template for unknown bucket IDs. PARAMETER DESCRIPTION bucket_id The ID of the bucket to set the cooldown for. TYPE: str resource The type of resource to target for the cooldown. TYPE: BucketResource limit The number of uses per cooldown period. TYPE: int reset_after The cooldown period. TYPE: typing . Union [ int , float , datetime . timedelta ] RETURNS DESCRIPTION Self The cooldown manager to allow call chaining. RAISES DESCRIPTION ValueError If an invalid resource type is given. If reset_after or limit are negative, 0 or invalid. if limit is less 0 or negative.","title":"set_bucket()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.with_concurrency_limit","text":"with_concurrency_limit ( bucket_id , / , * , error = None , error_message = 'This resource is currently busy; please try again later.' , follow_wrapped = False ) Add the hooks used to manage a command's concurrency limit through a decorator call. Warning Concurrency limiters will only work if there's a setup injected AbstractConcurrencyLimiter dependency with InMemoryConcurrencyLimiter being usable as a standard in-memory concurrency manager. PARAMETER DESCRIPTION bucket_id The concurrency limit bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two one str argument which is the limiting bucket's ID. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if this fails to acquire the concurrency limit. This supports localisation and uses the check name \"tanjun.concurrency\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This resource is currently busy; please try again later.' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator that adds the concurrency limiter hooks to a command.","title":"with_concurrency_limit()"},{"location":"reference/dependencies/#tanjun.dependencies.limiters.with_cooldown","text":"with_cooldown ( bucket_id , / , * , error = None , error_message = 'This command is currently in cooldown. Try again {cooldown} .' , follow_wrapped = False , owners_exempt = True ) Add a pre-execution hook used to manage a command's cooldown through a decorator call. Warning Cooldowns will only work if there's a setup injected AbstractCooldownManager dependency with InMemoryCooldownManager being usable as a standard in-memory cooldown manager. PARAMETER DESCRIPTION bucket_id The cooldown bucket's ID. TYPE: str error Callback used to create a custom error to raise if the check fails. This should two arguments one of type str and datetime.datetime where the first is the limiting bucket's ID and the second is when said bucket can be used again. This takes priority over error_message . TYPE: typing . Optional [ collections . Callable [[ str , datetime . datetime ], Exception ]] DEFAULT: None error_message The error message to send in response as a command error if the check fails. This supports localisation and uses the check name \"tanjun.cooldown\" for global overrides. TYPE: typing . Union [ str , collections . Mapping [ str , str ]] DEFAULT: 'This command is currently in cooldown. Try again {cooldown}.' follow_wrapped Whether to also add this check to any other command objects this command wraps in a decorator call chain. TYPE: bool DEFAULT: False owners_exempt Whether owners should be exempt from the cooldown. TYPE: bool DEFAULT: True RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . ExecutableCommand ], tanjun . abc . ExecutableCommand ] A decorator that adds a CooldownPreExecution hook to the command.","title":"with_cooldown()"},{"location":"reference/dependencies/#tanjun.dependencies.locales","text":"Dependency used for managing localising strings around interactions commands.","title":"locales"},{"location":"reference/dependencies/#tanjun.dependencies.locales.AbstractLocalizer","text":"AbstractLocalizer = AbstractLocaliser Alias of AbstractLocaliser .","title":"AbstractLocalizer"},{"location":"reference/dependencies/#tanjun.dependencies.locales.BasicLocalizer","text":"BasicLocalizer = BasicLocaliser Alias of BasicLocaliser .","title":"BasicLocalizer"},{"location":"reference/dependencies/#tanjun.dependencies.locales.AbstractLocaliser","text":"Bases: abc . ABC Abstract class of a string localiser.","title":"AbstractLocaliser"},{"location":"reference/dependencies/#tanjun.dependencies.locales.AbstractLocaliser.get_all_variants","text":"get_all_variants ( identifier , / , ** kwargs ) Get all the localisation variants for an identifier.","title":"get_all_variants()"},{"location":"reference/dependencies/#tanjun.dependencies.locales.AbstractLocaliser.localise","text":"localise ( identifier , tag , / , ** kwargs ) Localise a string with the given identifier and arguments. PARAMETER DESCRIPTION identifier The unique identifier of the string to localise. This may be in any format but the formats used by the standard implementations can be found at client-localiser . TYPE: str tag The \"IETF lang tag\" to localise the string to. This should usually be a hikari.locales.Locale . TYPE: str **kwargs Key-word arguments to pass to the string as format args. TYPE: typing . Any DEFAULT: {} RETURNS DESCRIPTION str The localised string.","title":"localise()"},{"location":"reference/dependencies/#tanjun.dependencies.locales.AbstractLocaliser.localize","text":"localize ( identifier , tag , / , ** kwargs ) Alias for AbstractLocaliser.localise .","title":"localize()"},{"location":"reference/dependencies/#tanjun.dependencies.locales.BasicLocaliser","text":"Bases: AbstractLocaliser Standard implementation of AbstractLocaliser with only basic text mapping support.","title":"BasicLocaliser"},{"location":"reference/dependencies/#tanjun.dependencies.locales.BasicLocaliser.__init__","text":"__init__ () Initialise a new BasicLocaliser .","title":"__init__()"},{"location":"reference/dependencies/#tanjun.dependencies.locales.BasicLocaliser.add_to_client","text":"add_to_client ( client ) Add this global localiser to a tanjun client. Note This registers the manager as a type dependency to let Tanjun use it. PARAMETER DESCRIPTION client The client to add this global localiser to. TYPE: tanjun . Client","title":"add_to_client()"},{"location":"reference/dependencies/#tanjun.dependencies.locales.BasicLocaliser.set_variants","text":"set_variants ( identifier , variants = None , / , ** other_variants ) Set the variants for a localised field. PARAMETER DESCRIPTION identifier Identifier of the field to set the localised variants for. This may be in any format but the formats used by the standard implementations can be found at client-localiser . TYPE: str variants Mapping of hikari.locales.Locale s to the localised values. TYPE: typing . Optional [ collections . Mapping [ str , str ]] DEFAULT: None RETURNS DESCRIPTION Self The localiser object to enable chained calls.","title":"set_variants()"},{"location":"reference/dependencies/#tanjun.dependencies.owners","text":"Dependency used for managing owner checks.","title":"owners"},{"location":"reference/dependencies/#tanjun.dependencies.owners.AbstractOwners","text":"Bases: abc . ABC Interface used to check if a user is deemed to be the bot's \"owner\".","title":"AbstractOwners"},{"location":"reference/dependencies/#tanjun.dependencies.owners.AbstractOwners.check_ownership","text":"check_ownership ( client , user ) Check whether this object is owned by the given object. PARAMETER DESCRIPTION client The Tanjun client this check is being called by. TYPE: tanjun . Client user The user to check ownership for. TYPE: hikari . User RETURNS DESCRIPTION bool Whether the bot is owned by the provided user.","title":"check_ownership()"},{"location":"reference/dependencies/#tanjun.dependencies.owners.Owners","text":"Bases: AbstractOwners Default implementation of the owner check interface. Warning fallback_to_application is only possible when the REST client is bound to a Bot token or if a type dependency is registered for tanjun.dependencies.SingleStoreCache[hikari.Application] .","title":"Owners"},{"location":"reference/dependencies/#tanjun.dependencies.owners.Owners.__init__","text":"__init__ ( * , expire_after = datetime . timedelta ( minutes = 5 ), fallback_to_application = True , owners = None ) Initiate a new owner check dependency. PARAMETER DESCRIPTION expire_after The amount of time to cache application owner data for in seconds. This is only applicable if rest is also passed. TYPE: typing . Union [ datetime . timedelta , int , float ] DEFAULT: datetime.timedelta(minutes=5) fallback_to_application Whether this check should fallback to checking the application's owners if the user isn't in owners . This only works when the bot's rest client is bound to a Bot token or if tanjun.dependencies.SingleStoreCache[hikari.Application] is available. TYPE: bool DEFAULT: True owners Sequence of objects and IDs of the users that are allowed to use the bot's owners-only commands. TYPE: typing . Optional [ hikari . SnowflakeishSequence [ hikari . User ]] DEFAULT: None","title":"__init__()"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders","text":"Implementation of a hot reloader for Tanjun.","title":"reloaders"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders.HotReloader","text":"Manages hot reloading modules for a Tanjun client.. Warning An instance of this can only be linked to 1 client. Examples: client = tanjun . Client . from_gateway_bot ( bot ) ( tanjun . dependencies . HotReloader () . add_modules ( \"python.module.path\" , pathlib . Path ( \"./module.py\" )) . add_directory ( \"./modules/\" ) . add_to_client ( client ) )","title":"HotReloader"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders.HotReloader.__init__","text":"__init__ ( * , commands_guild = None , interval = datetime . timedelta ( microseconds = 500000 ), redeclare_cmds_after = datetime . timedelta ( seconds = 10 ), unload_on_delete = True ) Initialise a hot reloader. Warning redeclare_cmds_after is not aware of commands declared outside of the reloader and will lead to commands being redeclared on startup when mixed with tanjun.clients.Client. init 's declare_global_commands argument when it is not None . PARAMETER DESCRIPTION commands_guild Object or ID of the guild to declare commands in if redeclare_cmds_after is not None . TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . PartialGuild ]] DEFAULT: None interval How often this should scan files and directories for changes in seconds. TYPE: typing . Union [ int , float , datetime . timedelta ] DEFAULT: datetime.timedelta(microseconds=500000) redeclare_cmds_after How often to redeclare application commands after a change to the commands is detected. If None is passed here then this will not redeclare the application's commands. TYPE: typing . Union [ int , float , datetime . timedelta , None] DEFAULT: datetime.timedelta(seconds=10) unload_on_delete Whether this should unload modules when their relevant file is deleted. TYPE: bool DEFAULT: True","title":"__init__()"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders.HotReloader.add_directory","text":"add_directory ( directory , / , * , namespace = None ) Add a directory for this hot reloader to track. Note This will only reload modules directly in the target directory and will not scan sub-directories. PARAMETER DESCRIPTION directory Path of the directory to hot reload. TYPE: typing . Union [ str , pathlib . Path ] namespace The python namespace this directory's modules should be imported from, if applicable. This work as {namespace}.{file.name.removesuffix(\".py\")} and will have the same behaviour as when a str is passed to tanjun.abc.Client.load_modules if passed. If left as None then this will have the same behaviour as when a pathlib.Path is passed to tanjun.abc.Client.load_modules . TYPE: typing . Optional [ str ] DEFAULT: None RETURNS DESCRIPTION Self The hot reloader to enable chained calls. RAISES DESCRIPTION FileNotFoundError If the directory cannot be found","title":"add_directory()"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders.HotReloader.add_directory_async","text":"add_directory_async ( directory , / , * , namespace = None ) Asynchronous variant of tanjun.dependencies.reloaders.HotReloader.add_directory . Unlike tanjun.dependencies.reloaders.HotReloader.add_directory , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.dependencies.reloaders.HotReloader.add_directory .","title":"add_directory_async()"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders.HotReloader.add_modules","text":"add_modules ( * paths ) Add modules for this hot reloader to track. PARAMETER DESCRIPTION *paths Module paths for this hot reloader to track. This has the same behaviour as [tanjun.abc.Client.load_modules][ for how [pathlib.Path][] and str are treated. TYPE: typing . Union [ str , pathlib . Path ] DEFAULT: () RAISES DESCRIPTION FileNotFoundError If the module's file doesn't exist anymore. ModuleNotFoundError If the str module path cannot be imported.","title":"add_modules()"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders.HotReloader.add_modules_async","text":"add_modules_async ( * paths ) Asynchronous variant of tanjun.dependencies.reloaders.HotReloader.add_modules . Unlike tanjun.dependencies.reloaders.HotReloader.add_modules , this method will run blocking code in a background thread. For more information on the behaviour of this method see the documentation for tanjun.abc.Client.load_modules .","title":"add_modules_async()"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders.HotReloader.add_to_client","text":"add_to_client ( client ) Add this to a tanjun.abc.Client instance. This registers start and closing callbacks which handle the lifetime of this and adds this as a type dependency. PARAMETER DESCRIPTION client The client to link this hot reloader to. TYPE: tanjun . Client","title":"add_to_client()"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders.HotReloader.scan","text":"scan ( client ) Manually scan this hot reloader's tracked modules for changes. PARAMETER DESCRIPTION client The client to reload and unload modules in. TYPE: tanjun . Client","title":"scan()"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders.HotReloader.start","text":"start ( client ) Start the hot reloader. RAISES DESCRIPTION RuntimeError If the hot reloader is already running.","title":"start()"},{"location":"reference/dependencies/#tanjun.dependencies.reloaders.HotReloader.stop","text":"stop () Stop the hot reloader. RAISES DESCRIPTION RuntimeError If the hot reloader isn't running.","title":"stop()"},{"location":"reference/errors/","text":"tanjun.errors # The errors and warnings raised within and by Tanjun. MissingDependencyError module-attribute # MissingDependencyError = alluka . MissingDependencyError Type alias of alluka.MissingDependencyError . CommandError # Bases: TanjunError An error which is sent as a response to the command call. __init__ # __init__ ( content = hikari . UNDEFINED , * , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Initialise a command error. PARAMETER DESCRIPTION content The content to respond with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None attachment A singular attachment to respond with. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments A sequence of attachments to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this response. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this response. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to respond with. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RAISES DESCRIPTION ValueError Raised for any of the following reasons: When both attachment and attachments are provided. When both component and components are passed. When both embed and embeds are passed. If more than 100 entries are passed for role_mentions . If more than 100 entries are passed for user_mentions . send async # send ( ctx , / , * , ensure_result = False ) Send this error as a command response. PARAMETER DESCRIPTION ctx The command call context to respond to. TYPE: tanjun . Context ensure_result Ensure that this call will always return a message object. If True then this will always return hikari.messages.Message , otherwise this will return hikari.Message | None . It's worth noting that, under certain scenarios within the slash command flow, this may lead to an extre request being made. TYPE: bool DEFAULT: False RAISES DESCRIPTION ValueError If delete_after would be more than 15 minutes after the slash command was called. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request. ConversionError # Bases: ParserError Error raised by a parser parameter when it failed to converter a value. parameter class-attribute # parameter : str Name of the parameter this error was raised for. __init__ # __init__ ( message , parameter , / , errors = ()) Initialise a conversion error. PARAMETER DESCRIPTION parameter The parameter this was raised by. TYPE: str errors An iterable of the source value errors which were raised during conversion. TYPE: collections . Iterable [ ValueError ] DEFAULT: () FailedCheck # Bases: TanjunError , RuntimeError Error raised as an alternative to returning False in a check. FailedModuleImport # Bases: FailedModuleLoad Error raised when a module failed to import. This is a specialisation of tanjun.errors.FailedModuleLoad . FailedModuleLoad # Bases: TanjunError Error raised when a module fails to load. This may be raised by the module failing to import or by one of its loaders erroring. This source error can be accessed at FailedModuleLoad. cause . __cause__ class-attribute # __cause__ : Exception The root error. path property # path () The path of the module which caused the error. FailedModuleUnload # Bases: TanjunError Error raised when a module fails to unload. This may be raised by the module failing to import or by one of its unloaders erroring. The source error can be accessed at FailedModuleUnload. cause . __cause__ class-attribute # __cause__ : Exception The root error. path property # path () The path of the module which caused the error. HaltExecution # Bases: TanjunError Error raised while looking for a command in-order to end-execution early. For the most part, this will be raised during checks in-order to prevent other commands from being tried. InvalidCheck # Bases: TanjunError , RuntimeError Error raised as an assertion that a check will never pass in the current environment. ModuleMissingLoaders # Bases: RuntimeError , TanjunError Error raised when a module is missing loaders. message property # message () The error message. path property # path () The path of the module which is missing loaders. ModuleMissingUnloaders # Bases: RuntimeError , TanjunError Error raised when a module is missing unloaders. message property # message () The error message. path property # path () The path of the module which is missing unloaders. ModuleStateConflict # Bases: ValueError , TanjunError Error raised when a module cannot be (un)loaded due to a state conflict. message property # message () The error message. path property # path () The path of the module which caused the error. NotEnoughArgumentsError # Bases: ParserError Error raised by the parser when not enough arguments are found for a parameter. parameter class-attribute # parameter : str Name of the parameter this error was raised for. __init__ # __init__ ( message , parameter ) Initialise a not enough arguments error. PARAMETER DESCRIPTION message The error message. TYPE: str parameter The parameter this error was raised for. TYPE: str ParserError # Bases: TanjunError , ValueError Base error raised by a parser or parameter during parsing. Note Expected errors raised by the parser will subclass this error. __init__ # __init__ ( message , parameter ) Initialise a parser error. PARAMETER DESCRIPTION message String message for this error. TYPE: str parameter Name of the parameter which caused this error, should be None if not applicable. TYPE: typing . Optional [ str ] TanjunError # Bases: Exception The base class for all errors raised by Tanjun. TooManyArgumentsError # Bases: ParserError Error raised by the parser when too many arguments are found for a parameter. parameter class-attribute # parameter : str Name of the parameter this error was raised for. __init__ # __init__ ( message , parameter ) Initialise a too many arguments error. PARAMETER DESCRIPTION message The error message. TYPE: str parameter The parameter this error was raised for. TYPE: str","title":"tanjun.errors"},{"location":"reference/errors/#tanjunerrors","text":"The errors and warnings raised within and by Tanjun.","title":"tanjun.errors"},{"location":"reference/errors/#tanjun.errors.MissingDependencyError","text":"MissingDependencyError = alluka . MissingDependencyError Type alias of alluka.MissingDependencyError .","title":"MissingDependencyError"},{"location":"reference/errors/#tanjun.errors.CommandError","text":"Bases: TanjunError An error which is sent as a response to the command call.","title":"CommandError"},{"location":"reference/errors/#tanjun.errors.CommandError.__init__","text":"__init__ ( content = hikari . UNDEFINED , * , delete_after = None , attachment = hikari . UNDEFINED , attachments = hikari . UNDEFINED , component = hikari . UNDEFINED , components = hikari . UNDEFINED , embed = hikari . UNDEFINED , embeds = hikari . UNDEFINED , mentions_everyone = hikari . UNDEFINED , user_mentions = hikari . UNDEFINED , role_mentions = hikari . UNDEFINED ) Initialise a command error. PARAMETER DESCRIPTION content The content to respond with. If provided, the message contents. If hikari.undefined.UNDEFINED , then nothing will be sent in the content. TYPE: hikari . UndefinedOr [ typing . Any ] DEFAULT: hikari.UNDEFINED delete_after If provided, the seconds after which the response message should be deleted. Slash command responses can only be deleted within 15 minutes of the command being received. TYPE: typing . Union [ datetime . timedelta , float , int , None] DEFAULT: None attachment A singular attachment to respond with. TYPE: hikari . UndefinedOr [ hikari . Resourceish ] DEFAULT: hikari.UNDEFINED attachments A sequence of attachments to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Resourceish ]] DEFAULT: hikari.UNDEFINED component If provided, builder object of the component to include in this response. TYPE: hikari . UndefinedOr [ hikari . api . ComponentBuilder ] DEFAULT: hikari.UNDEFINED components If provided, a sequence of the component builder objects to include in this response. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . api . ComponentBuilder ]] DEFAULT: hikari.UNDEFINED embed An embed to respond with. TYPE: hikari . UndefinedOr [ hikari . Embed ] DEFAULT: hikari.UNDEFINED embeds A sequence of embeds to respond with. TYPE: hikari . UndefinedOr [ collections . Sequence [ hikari . Embed ]] DEFAULT: hikari.UNDEFINED mentions_everyone If provided, whether the message should parse @everyone/@here mentions. TYPE: hikari . UndefinedOr [ bool ] DEFAULT: hikari.UNDEFINED user_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.users.PartialUser derivatives to enforce mentioning specific users. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialUser ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED role_mentions If provided, and True , all mentions will be parsed. If provided, and False , no mentions will be parsed. Alternatively this may be a collection of hikari.snowflakes.Snowflake , or hikari.guilds.PartialRole derivatives to enforce mentioning specific roles. TYPE: typing . Union [ hikari . SnowflakeishSequence [ hikari . PartialRole ], bool , hikari . UndefinedType ] DEFAULT: hikari.UNDEFINED RAISES DESCRIPTION ValueError Raised for any of the following reasons: When both attachment and attachments are provided. When both component and components are passed. When both embed and embeds are passed. If more than 100 entries are passed for role_mentions . If more than 100 entries are passed for user_mentions .","title":"__init__()"},{"location":"reference/errors/#tanjun.errors.CommandError.send","text":"send ( ctx , / , * , ensure_result = False ) Send this error as a command response. PARAMETER DESCRIPTION ctx The command call context to respond to. TYPE: tanjun . Context ensure_result Ensure that this call will always return a message object. If True then this will always return hikari.messages.Message , otherwise this will return hikari.Message | None . It's worth noting that, under certain scenarios within the slash command flow, this may lead to an extre request being made. TYPE: bool DEFAULT: False RAISES DESCRIPTION ValueError If delete_after would be more than 15 minutes after the slash command was called. hikari . BadRequestError This may be raised in several discrete situations, such as messages being empty with no attachments or embeds; messages with more than 2000 characters in them, embeds that exceed one of the many embed limits; too many attachments; attachments that are too large; invalid image URLs in embeds; too many components. hikari . UnauthorizedError If you are unauthorized to make the request (invalid/missing token). hikari . ForbiddenError If you are missing the SEND_MESSAGES in the channel or the person you are trying to message has the DM's disabled. hikari . NotFoundError If the channel is not found. hikari . RateLimitTooLongError Raised in the event that a rate limit occurs that is longer than max_rate_limit when making a request. hikari . RateLimitedError Usually, Hikari will handle and retry on hitting rate-limits automatically. This includes most bucket-specific rate-limits and global rate-limits. In some rare edge cases, however, Discord implements other undocumented rules for rate-limiting, such as limits per attribute. These cannot be detected or handled normally by Hikari due to their undocumented nature, and will trigger this exception if they occur. hikari . InternalServerError If an internal error occurs on Discord while handling the request.","title":"send()"},{"location":"reference/errors/#tanjun.errors.ConversionError","text":"Bases: ParserError Error raised by a parser parameter when it failed to converter a value.","title":"ConversionError"},{"location":"reference/errors/#tanjun.errors.ConversionError.parameter","text":"parameter : str Name of the parameter this error was raised for.","title":"parameter"},{"location":"reference/errors/#tanjun.errors.ConversionError.__init__","text":"__init__ ( message , parameter , / , errors = ()) Initialise a conversion error. PARAMETER DESCRIPTION parameter The parameter this was raised by. TYPE: str errors An iterable of the source value errors which were raised during conversion. TYPE: collections . Iterable [ ValueError ] DEFAULT: ()","title":"__init__()"},{"location":"reference/errors/#tanjun.errors.FailedCheck","text":"Bases: TanjunError , RuntimeError Error raised as an alternative to returning False in a check.","title":"FailedCheck"},{"location":"reference/errors/#tanjun.errors.FailedModuleImport","text":"Bases: FailedModuleLoad Error raised when a module failed to import. This is a specialisation of tanjun.errors.FailedModuleLoad .","title":"FailedModuleImport"},{"location":"reference/errors/#tanjun.errors.FailedModuleLoad","text":"Bases: TanjunError Error raised when a module fails to load. This may be raised by the module failing to import or by one of its loaders erroring. This source error can be accessed at FailedModuleLoad. cause .","title":"FailedModuleLoad"},{"location":"reference/errors/#tanjun.errors.FailedModuleLoad.__cause__","text":"__cause__ : Exception The root error.","title":"__cause__"},{"location":"reference/errors/#tanjun.errors.FailedModuleLoad.path","text":"path () The path of the module which caused the error.","title":"path()"},{"location":"reference/errors/#tanjun.errors.FailedModuleUnload","text":"Bases: TanjunError Error raised when a module fails to unload. This may be raised by the module failing to import or by one of its unloaders erroring. The source error can be accessed at FailedModuleUnload. cause .","title":"FailedModuleUnload"},{"location":"reference/errors/#tanjun.errors.FailedModuleUnload.__cause__","text":"__cause__ : Exception The root error.","title":"__cause__"},{"location":"reference/errors/#tanjun.errors.FailedModuleUnload.path","text":"path () The path of the module which caused the error.","title":"path()"},{"location":"reference/errors/#tanjun.errors.HaltExecution","text":"Bases: TanjunError Error raised while looking for a command in-order to end-execution early. For the most part, this will be raised during checks in-order to prevent other commands from being tried.","title":"HaltExecution"},{"location":"reference/errors/#tanjun.errors.InvalidCheck","text":"Bases: TanjunError , RuntimeError Error raised as an assertion that a check will never pass in the current environment.","title":"InvalidCheck"},{"location":"reference/errors/#tanjun.errors.ModuleMissingLoaders","text":"Bases: RuntimeError , TanjunError Error raised when a module is missing loaders.","title":"ModuleMissingLoaders"},{"location":"reference/errors/#tanjun.errors.ModuleMissingLoaders.message","text":"message () The error message.","title":"message()"},{"location":"reference/errors/#tanjun.errors.ModuleMissingLoaders.path","text":"path () The path of the module which is missing loaders.","title":"path()"},{"location":"reference/errors/#tanjun.errors.ModuleMissingUnloaders","text":"Bases: RuntimeError , TanjunError Error raised when a module is missing unloaders.","title":"ModuleMissingUnloaders"},{"location":"reference/errors/#tanjun.errors.ModuleMissingUnloaders.message","text":"message () The error message.","title":"message()"},{"location":"reference/errors/#tanjun.errors.ModuleMissingUnloaders.path","text":"path () The path of the module which is missing unloaders.","title":"path()"},{"location":"reference/errors/#tanjun.errors.ModuleStateConflict","text":"Bases: ValueError , TanjunError Error raised when a module cannot be (un)loaded due to a state conflict.","title":"ModuleStateConflict"},{"location":"reference/errors/#tanjun.errors.ModuleStateConflict.message","text":"message () The error message.","title":"message()"},{"location":"reference/errors/#tanjun.errors.ModuleStateConflict.path","text":"path () The path of the module which caused the error.","title":"path()"},{"location":"reference/errors/#tanjun.errors.NotEnoughArgumentsError","text":"Bases: ParserError Error raised by the parser when not enough arguments are found for a parameter.","title":"NotEnoughArgumentsError"},{"location":"reference/errors/#tanjun.errors.NotEnoughArgumentsError.parameter","text":"parameter : str Name of the parameter this error was raised for.","title":"parameter"},{"location":"reference/errors/#tanjun.errors.NotEnoughArgumentsError.__init__","text":"__init__ ( message , parameter ) Initialise a not enough arguments error. PARAMETER DESCRIPTION message The error message. TYPE: str parameter The parameter this error was raised for. TYPE: str","title":"__init__()"},{"location":"reference/errors/#tanjun.errors.ParserError","text":"Bases: TanjunError , ValueError Base error raised by a parser or parameter during parsing. Note Expected errors raised by the parser will subclass this error.","title":"ParserError"},{"location":"reference/errors/#tanjun.errors.ParserError.__init__","text":"__init__ ( message , parameter ) Initialise a parser error. PARAMETER DESCRIPTION message String message for this error. TYPE: str parameter Name of the parameter which caused this error, should be None if not applicable. TYPE: typing . Optional [ str ]","title":"__init__()"},{"location":"reference/errors/#tanjun.errors.TanjunError","text":"Bases: Exception The base class for all errors raised by Tanjun.","title":"TanjunError"},{"location":"reference/errors/#tanjun.errors.TooManyArgumentsError","text":"Bases: ParserError Error raised by the parser when too many arguments are found for a parameter.","title":"TooManyArgumentsError"},{"location":"reference/errors/#tanjun.errors.TooManyArgumentsError.parameter","text":"parameter : str Name of the parameter this error was raised for.","title":"parameter"},{"location":"reference/errors/#tanjun.errors.TooManyArgumentsError.__init__","text":"__init__ ( message , parameter ) Initialise a too many arguments error. PARAMETER DESCRIPTION message The error message. TYPE: str parameter The parameter this error was raised for. TYPE: str","title":"__init__()"},{"location":"reference/hooks/","text":"tanjun.hooks # Standard implementation of Tanjun's command execution hook models. AnyHooks module-attribute # AnyHooks = Hooks [ tanjun . Context ] Hooks that can be used with any context. Note This is shorthand for Hooks[tanjun.abc.Context] . MenuHooks module-attribute # MenuHooks = Hooks [ tanjun . MenuContext ] Hooks that can be used with a menu context. Note This is shorthand for Hooks[tanjun.abc.MenuContext] . MessageHooks module-attribute # MessageHooks = Hooks [ tanjun . MessageContext ] Hooks that can be used with a message context. Note This is shorthand for Hooks[tanjun.abc.MessageContext] . SlashHooks module-attribute # SlashHooks = Hooks [ tanjun . SlashContext ] Hooks that can be used with a slash context. Note This is shorthand for Hooks[tanjun.abc.SlashContext] . Hooks # Bases: tanjun . Hooks [ _ContextT_contra ] Standard implementation of tanjun.abc.Hooks used for command execution. This will take either tanjun.abc.Context , tanjun.abc.MessageContext or tanjun.abc.SlashContext dependent on what its bound by (generic wise). Note This implementation adds a concept of parser errors which won't be dispatched to general \"error\" hooks and do not share the error suppression semantics as they favour to always suppress the error if a registered handler is found. __init__ # __init__ () Initialise a command hook object. add_to_command # add_to_command ( command ) Add this hook object to a command. Note This will likely override any previously added hooks. Examples: This method may be used as a command decorator: @standard_hooks . add_to_command @as_message_command ( \"command\" ) async def command_command ( ctx : tanjun . abc . Context ) -> None : await ctx . respond ( \"You've called a command!\" ) PARAMETER DESCRIPTION command The command to add the hooks to. TYPE: tanjun . abc . ExecutableCommand RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command with the hooks added. copy # copy () Copy this hook object. set_on_error # set_on_error ( callback ) Set the error callback for this hook object. Note This will not be called for tanjun.ParserError s as these are generally speaking expected. To handle those see Hooks.set_on_parser_error . PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take two positional arguments (of type tanjun.abc.Context and Exception ) and may be either synchronous or asynchronous. Returning True indicates that the error should be suppressed, False that it should be re-raised and None that no decision has been made. This will be accounted for along with the decisions other error hooks make by majority rule. TYPE: typing . Optional [ tanjun . ErrorHookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining. set_on_parser_error # set_on_parser_error ( callback ) Set the parser error callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take two positional arguments (of type tanjun.abc.Context and tanjun.ParserError ), return None and may be either synchronous or asynchronous. It's worth noting that, unlike general error handlers, this will always suppress the error. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining. set_on_success # set_on_success ( callback ) Set the success callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining. set_post_execution # set_post_execution ( callback ) Set the post-execution callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining. set_pre_execution # set_pre_execution ( callback ) Set the pre-execution callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"tanjun.hooks"},{"location":"reference/hooks/#tanjunhooks","text":"Standard implementation of Tanjun's command execution hook models.","title":"tanjun.hooks"},{"location":"reference/hooks/#tanjun.hooks.AnyHooks","text":"AnyHooks = Hooks [ tanjun . Context ] Hooks that can be used with any context. Note This is shorthand for Hooks[tanjun.abc.Context] .","title":"AnyHooks"},{"location":"reference/hooks/#tanjun.hooks.MenuHooks","text":"MenuHooks = Hooks [ tanjun . MenuContext ] Hooks that can be used with a menu context. Note This is shorthand for Hooks[tanjun.abc.MenuContext] .","title":"MenuHooks"},{"location":"reference/hooks/#tanjun.hooks.MessageHooks","text":"MessageHooks = Hooks [ tanjun . MessageContext ] Hooks that can be used with a message context. Note This is shorthand for Hooks[tanjun.abc.MessageContext] .","title":"MessageHooks"},{"location":"reference/hooks/#tanjun.hooks.SlashHooks","text":"SlashHooks = Hooks [ tanjun . SlashContext ] Hooks that can be used with a slash context. Note This is shorthand for Hooks[tanjun.abc.SlashContext] .","title":"SlashHooks"},{"location":"reference/hooks/#tanjun.hooks.Hooks","text":"Bases: tanjun . Hooks [ _ContextT_contra ] Standard implementation of tanjun.abc.Hooks used for command execution. This will take either tanjun.abc.Context , tanjun.abc.MessageContext or tanjun.abc.SlashContext dependent on what its bound by (generic wise). Note This implementation adds a concept of parser errors which won't be dispatched to general \"error\" hooks and do not share the error suppression semantics as they favour to always suppress the error if a registered handler is found.","title":"Hooks"},{"location":"reference/hooks/#tanjun.hooks.Hooks.__init__","text":"__init__ () Initialise a command hook object.","title":"__init__()"},{"location":"reference/hooks/#tanjun.hooks.Hooks.add_to_command","text":"add_to_command ( command ) Add this hook object to a command. Note This will likely override any previously added hooks. Examples: This method may be used as a command decorator: @standard_hooks . add_to_command @as_message_command ( \"command\" ) async def command_command ( ctx : tanjun . abc . Context ) -> None : await ctx . respond ( \"You've called a command!\" ) PARAMETER DESCRIPTION command The command to add the hooks to. TYPE: tanjun . abc . ExecutableCommand RETURNS DESCRIPTION tanjun . abc . ExecutableCommand The command with the hooks added.","title":"add_to_command()"},{"location":"reference/hooks/#tanjun.hooks.Hooks.copy","text":"copy () Copy this hook object.","title":"copy()"},{"location":"reference/hooks/#tanjun.hooks.Hooks.set_on_error","text":"set_on_error ( callback ) Set the error callback for this hook object. Note This will not be called for tanjun.ParserError s as these are generally speaking expected. To handle those see Hooks.set_on_parser_error . PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take two positional arguments (of type tanjun.abc.Context and Exception ) and may be either synchronous or asynchronous. Returning True indicates that the error should be suppressed, False that it should be re-raised and None that no decision has been made. This will be accounted for along with the decisions other error hooks make by majority rule. TYPE: typing . Optional [ tanjun . ErrorHookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"set_on_error()"},{"location":"reference/hooks/#tanjun.hooks.Hooks.set_on_parser_error","text":"set_on_parser_error ( callback ) Set the parser error callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take two positional arguments (of type tanjun.abc.Context and tanjun.ParserError ), return None and may be either synchronous or asynchronous. It's worth noting that, unlike general error handlers, this will always suppress the error. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"set_on_parser_error()"},{"location":"reference/hooks/#tanjun.hooks.Hooks.set_on_success","text":"set_on_success ( callback ) Set the success callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"set_on_success()"},{"location":"reference/hooks/#tanjun.hooks.Hooks.set_post_execution","text":"set_post_execution ( callback ) Set the post-execution callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"set_post_execution()"},{"location":"reference/hooks/#tanjun.hooks.Hooks.set_pre_execution","text":"set_pre_execution ( callback ) Set the pre-execution callback for this hook object. PARAMETER DESCRIPTION callback The callback to set for this hook. This will remove any previously set callbacks. This callback should take one positional argument (of type tanjun.abc.Context ), return None and may be either synchronous or asynchronous. TYPE: typing . Optional [ tanjun . HookSig ] RETURNS DESCRIPTION Self The hook object to enable method chaining.","title":"set_pre_execution()"},{"location":"reference/parsing/","text":"tanjun.parsing # Standard implementation of message command argument parsing. AbstractParser module-attribute # AbstractParser = AbstractOptionParser Deprecated alias of AbstractOptionParser . ConverterSig module-attribute # ConverterSig = typing . Union [ collections . Callable [ Ellipsis , collections . Coroutine [ typing . Any , typing . Any , _T ]], collections . Callable [ Ellipsis , _T ]] Type hint of a converter used within a parser instance. This must be a callable or asynchronous callable which takes one position str , argument and returns the resultant value. UNDEFINED module-attribute # UNDEFINED = UndefinedT () A singleton used to represent an undefined value within parsing logic. UNDEFINED_DEFAULT module-attribute # UNDEFINED_DEFAULT = UNDEFINED Deprecated alias of UNDEFINED . UndefinedDefaultT module-attribute # UndefinedDefaultT = UndefinedT Deprecated alias of Undefined . AbstractOptionParser # Bases: tanjun . MessageParser , abc . ABC Abstract interface of a message content parser. add_argument abstractmethod # add_argument ( key , / , converters = (), * , default = UNDEFINED , greedy = False , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add a positional argument type to the parser.. Note Order matters for positional arguments. PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED greedy Whether or not this argument should be greedy (meaning that it takes in the remaining argument values). TYPE: bool DEFAULT: False min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi Whether this argument can be passed multiple times. TYPE: bool DEFAULT: False RETURNS DESCRIPTION Self This parser to enable chained calls. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this parser is linked to where validate_arg_keys is True . add_option abstractmethod # add_option ( key , name , / , * names , converters = (), default , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add an named option to this parser. PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this option to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this option, unlike arguments this is required for options. TYPE: typing . Any converters The converter(s) this option should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi If this option can be provided multiple times. TYPE: bool DEFAULT: False RETURNS DESCRIPTION Self This parser to enable chained calls. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this parser is linked to where validate_arg_keys is True . arguments abstractmethod property # arguments () Sequence of the positional arguments registered with this parser. options abstractmethod property # options () Sequence of the named options registered with this parser. Argument # Bases: Parameter Representation of a positional argument used by the standard parser. __init__ # __init__ ( key , / , * , converters = (), default = UNDEFINED , greedy = False , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Initialise a positional argument. PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED greedy Whether or not this argument should be greedy (meaning that it takes in the remaining argument values). TYPE: bool DEFAULT: False min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi Whether this argument can be passed multiple times. is_greedy property # is_greedy () Whether this parameter is greedy. Greedy parameters will consume the remaining message content as one string (with converters also being passed the whole string). Note Greedy and multi parameters cannot be used together. Option # Bases: Parameter Representation of a named optional parameter used by the standard parser. __init__ # __init__ ( key , name , / , * names , converters = (), default = UNDEFINED , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None , multi = True ) Initialise a named optional parameter. PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this argument to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this argument, unlike arguments this is required for options. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi If this option can be provided multiple times. empty_value property # empty_value () The value to return if the option is empty. If this is UNDEFINED then a value will be required for the option. names property # names () Sequence of the CLI names of this option. Parameter # Base class for parameters for the standard parser(s). __init__ # __init__ ( key , / , * , converters = (), default = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Initialise a parameter. convert async # convert ( ctx , value ) Convert the given value to the type of this parameter. converters property # converters () Sequence of the converters registered for this parameter. copy # copy () Copy the parameter. RETURNS DESCRIPTION Self A copy of the parameter. default property # default () The parameter's default. If this is UNDEFINED then this parameter is required. is_multi property # is_multi () Whether this parameter is \"multi\". Multi parameters will be passed a list of all the values provided for this parameter (with each entry being converted separately.) key property # key () The key of this parameter used to pass the result to the command's callback. max_length property # max_length () If set, this parameters's parsed values will have to have lengths less than or equal to this. If any converters are provided then this should be compatible with the result of them. max_value property # max_value () If set, this parameters's parsed values will have to be less than or equal to this. If any converters are provided then this should be compatible with the result of them. min_length property # min_length () If set, this parameters's parsed values will have to have lengths greater than or equal to this. If any converters are provided then this should be compatible with the result of them. min_value property # min_value () If set, this parameters's parsed values will have to be greater than or equal to this. If any converters are provided then this should be compatible with the result of them. ShlexParser # Bases: AbstractOptionParser A shlex based AbstractOptionParser implementation. __init__ # __init__ () Initialise a shlex parser. UndefinedT # Singleton used to indicate an undefined value within parsing logic. with_argument # with_argument ( key , / , converters = (), * , default = UNDEFINED , greedy = False , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add an argument to a message command through a decorator call. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_argument ( \"command\" , converters = int , default = 42 ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : int ): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED greedy Whether or not this argument should be greedy (meaning that it takes in the remaining argument values). TYPE: bool DEFAULT: False min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi Whether this argument can be passed multiple times. RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True . with_greedy_argument # with_greedy_argument ( key , / , converters = (), * , default = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add a greedy argument to a message command through a decorator call. A greedy argument will consume the remaining positional arguments and pass them through to the converters as one joined string while also requiring that at least one more positional argument is remaining unless a default is set. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_greedy_argument ( \"command\" , converters = StringView ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : StringView ): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True . with_multi_argument # with_multi_argument ( key , / , converters = (), * , default = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add a multi-argument to a message command through a decorator call. A multi argument will consume the remaining positional arguments and pass them to the converters through multiple calls while also requiring that at least one more positional argument is remaining unless a default is set and passing through the results to the command's callback as a sequence. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_multi_argument ( \"command\" , converters = int ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : collections . abc . Sequence [ int ]): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True . with_multi_option # with_multi_option ( key , name , / , * names , converters = (), default , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add an multi-option to a command's parser through a decorator call. A multi option will consume all the values provided for an option and pass them through to the converters as an array of strings while also requiring that at least one value is provided for the option unless a default is set. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_multi_option ( \"command\" , converters = int , default = ()) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : collections . abc . Sequence [ int ]): ... PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this argument to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this argument, unlike arguments this is required for options. TYPE: typing . Any converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this option is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True . with_option # with_option ( key , name , / , * names , converters = (), default , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add an option to a message command through a decorator call. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_option ( \"command\" , converters = int , default = 42 ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : int ): ... PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this argument to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this argument, unlike arguments this is required for options. TYPE: typing . Any converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi If this option can be provided multiple times. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this option is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True . with_parser # with_parser ( command ) Add a shlex parser command parser to a supported command. Example # @tanjun . with_argument ( \"arg\" , converters = int ) @tanjun . with_parser @tanjun . as_message_command ( \"hi\" ) async def hi ( ctx : tanjun . MessageContext , arg : int ) -> None : ... PARAMETER DESCRIPTION command The message command to set the parser on. TYPE: _CommandT RETURNS DESCRIPTION tanjun . abc . MessageCommand The command with the parser set. RAISES DESCRIPTION ValueError If the command already has a parser set.","title":"tanjun.parsing"},{"location":"reference/parsing/#tanjunparsing","text":"Standard implementation of message command argument parsing.","title":"tanjun.parsing"},{"location":"reference/parsing/#tanjun.parsing.AbstractParser","text":"AbstractParser = AbstractOptionParser Deprecated alias of AbstractOptionParser .","title":"AbstractParser"},{"location":"reference/parsing/#tanjun.parsing.ConverterSig","text":"ConverterSig = typing . Union [ collections . Callable [ Ellipsis , collections . Coroutine [ typing . Any , typing . Any , _T ]], collections . Callable [ Ellipsis , _T ]] Type hint of a converter used within a parser instance. This must be a callable or asynchronous callable which takes one position str , argument and returns the resultant value.","title":"ConverterSig"},{"location":"reference/parsing/#tanjun.parsing.UNDEFINED","text":"UNDEFINED = UndefinedT () A singleton used to represent an undefined value within parsing logic.","title":"UNDEFINED"},{"location":"reference/parsing/#tanjun.parsing.UNDEFINED_DEFAULT","text":"UNDEFINED_DEFAULT = UNDEFINED Deprecated alias of UNDEFINED .","title":"UNDEFINED_DEFAULT"},{"location":"reference/parsing/#tanjun.parsing.UndefinedDefaultT","text":"UndefinedDefaultT = UndefinedT Deprecated alias of Undefined .","title":"UndefinedDefaultT"},{"location":"reference/parsing/#tanjun.parsing.AbstractOptionParser","text":"Bases: tanjun . MessageParser , abc . ABC Abstract interface of a message content parser.","title":"AbstractOptionParser"},{"location":"reference/parsing/#tanjun.parsing.AbstractOptionParser.add_argument","text":"add_argument ( key , / , converters = (), * , default = UNDEFINED , greedy = False , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add a positional argument type to the parser.. Note Order matters for positional arguments. PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED greedy Whether or not this argument should be greedy (meaning that it takes in the remaining argument values). TYPE: bool DEFAULT: False min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi Whether this argument can be passed multiple times. TYPE: bool DEFAULT: False RETURNS DESCRIPTION Self This parser to enable chained calls. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this parser is linked to where validate_arg_keys is True .","title":"add_argument()"},{"location":"reference/parsing/#tanjun.parsing.AbstractOptionParser.add_option","text":"add_option ( key , name , / , * names , converters = (), default , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add an named option to this parser. PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this option to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this option, unlike arguments this is required for options. TYPE: typing . Any converters The converter(s) this option should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi If this option can be provided multiple times. TYPE: bool DEFAULT: False RETURNS DESCRIPTION Self This parser to enable chained calls. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this parser is linked to where validate_arg_keys is True .","title":"add_option()"},{"location":"reference/parsing/#tanjun.parsing.AbstractOptionParser.arguments","text":"arguments () Sequence of the positional arguments registered with this parser.","title":"arguments()"},{"location":"reference/parsing/#tanjun.parsing.AbstractOptionParser.options","text":"options () Sequence of the named options registered with this parser.","title":"options()"},{"location":"reference/parsing/#tanjun.parsing.Argument","text":"Bases: Parameter Representation of a positional argument used by the standard parser.","title":"Argument"},{"location":"reference/parsing/#tanjun.parsing.Argument.__init__","text":"__init__ ( key , / , * , converters = (), default = UNDEFINED , greedy = False , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Initialise a positional argument. PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED greedy Whether or not this argument should be greedy (meaning that it takes in the remaining argument values). TYPE: bool DEFAULT: False min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi Whether this argument can be passed multiple times.","title":"__init__()"},{"location":"reference/parsing/#tanjun.parsing.Argument.is_greedy","text":"is_greedy () Whether this parameter is greedy. Greedy parameters will consume the remaining message content as one string (with converters also being passed the whole string). Note Greedy and multi parameters cannot be used together.","title":"is_greedy()"},{"location":"reference/parsing/#tanjun.parsing.Option","text":"Bases: Parameter Representation of a named optional parameter used by the standard parser.","title":"Option"},{"location":"reference/parsing/#tanjun.parsing.Option.__init__","text":"__init__ ( key , name , / , * names , converters = (), default = UNDEFINED , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None , multi = True ) Initialise a named optional parameter. PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this argument to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this argument, unlike arguments this is required for options. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi If this option can be provided multiple times.","title":"__init__()"},{"location":"reference/parsing/#tanjun.parsing.Option.empty_value","text":"empty_value () The value to return if the option is empty. If this is UNDEFINED then a value will be required for the option.","title":"empty_value()"},{"location":"reference/parsing/#tanjun.parsing.Option.names","text":"names () Sequence of the CLI names of this option.","title":"names()"},{"location":"reference/parsing/#tanjun.parsing.Parameter","text":"Base class for parameters for the standard parser(s).","title":"Parameter"},{"location":"reference/parsing/#tanjun.parsing.Parameter.__init__","text":"__init__ ( key , / , * , converters = (), default = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Initialise a parameter.","title":"__init__()"},{"location":"reference/parsing/#tanjun.parsing.Parameter.convert","text":"convert ( ctx , value ) Convert the given value to the type of this parameter.","title":"convert()"},{"location":"reference/parsing/#tanjun.parsing.Parameter.converters","text":"converters () Sequence of the converters registered for this parameter.","title":"converters()"},{"location":"reference/parsing/#tanjun.parsing.Parameter.copy","text":"copy () Copy the parameter. RETURNS DESCRIPTION Self A copy of the parameter.","title":"copy()"},{"location":"reference/parsing/#tanjun.parsing.Parameter.default","text":"default () The parameter's default. If this is UNDEFINED then this parameter is required.","title":"default()"},{"location":"reference/parsing/#tanjun.parsing.Parameter.is_multi","text":"is_multi () Whether this parameter is \"multi\". Multi parameters will be passed a list of all the values provided for this parameter (with each entry being converted separately.)","title":"is_multi()"},{"location":"reference/parsing/#tanjun.parsing.Parameter.key","text":"key () The key of this parameter used to pass the result to the command's callback.","title":"key()"},{"location":"reference/parsing/#tanjun.parsing.Parameter.max_length","text":"max_length () If set, this parameters's parsed values will have to have lengths less than or equal to this. If any converters are provided then this should be compatible with the result of them.","title":"max_length()"},{"location":"reference/parsing/#tanjun.parsing.Parameter.max_value","text":"max_value () If set, this parameters's parsed values will have to be less than or equal to this. If any converters are provided then this should be compatible with the result of them.","title":"max_value()"},{"location":"reference/parsing/#tanjun.parsing.Parameter.min_length","text":"min_length () If set, this parameters's parsed values will have to have lengths greater than or equal to this. If any converters are provided then this should be compatible with the result of them.","title":"min_length()"},{"location":"reference/parsing/#tanjun.parsing.Parameter.min_value","text":"min_value () If set, this parameters's parsed values will have to be greater than or equal to this. If any converters are provided then this should be compatible with the result of them.","title":"min_value()"},{"location":"reference/parsing/#tanjun.parsing.ShlexParser","text":"Bases: AbstractOptionParser A shlex based AbstractOptionParser implementation.","title":"ShlexParser"},{"location":"reference/parsing/#tanjun.parsing.ShlexParser.__init__","text":"__init__ () Initialise a shlex parser.","title":"__init__()"},{"location":"reference/parsing/#tanjun.parsing.UndefinedT","text":"Singleton used to indicate an undefined value within parsing logic.","title":"UndefinedT"},{"location":"reference/parsing/#tanjun.parsing.with_argument","text":"with_argument ( key , / , converters = (), * , default = UNDEFINED , greedy = False , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add an argument to a message command through a decorator call. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_argument ( \"command\" , converters = int , default = 42 ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : int ): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED greedy Whether or not this argument should be greedy (meaning that it takes in the remaining argument values). TYPE: bool DEFAULT: False min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi Whether this argument can be passed multiple times. RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True .","title":"with_argument()"},{"location":"reference/parsing/#tanjun.parsing.with_greedy_argument","text":"with_greedy_argument ( key , / , converters = (), * , default = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add a greedy argument to a message command through a decorator call. A greedy argument will consume the remaining positional arguments and pass them through to the converters as one joined string while also requiring that at least one more positional argument is remaining unless a default is set. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_greedy_argument ( \"command\" , converters = StringView ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : StringView ): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True .","title":"with_greedy_argument()"},{"location":"reference/parsing/#tanjun.parsing.with_multi_argument","text":"with_multi_argument ( key , / , converters = (), * , default = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add a multi-argument to a message command through a decorator call. A multi argument will consume the remaining positional arguments and pass them to the converters through multiple calls while also requiring that at least one more positional argument is remaining unless a default is set and passing through the results to the command's callback as a sequence. Warning Since order matters for positional arguments, you'll want to keep in mind that decorator execution starts at the decorator closest to the command and goes upwards with this deciding where a positional argument is located in a command's signature. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_multi_argument ( \"command\" , converters = int ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : collections . abc . Sequence [ int ]): ... PARAMETER DESCRIPTION key The string identifier of this argument (may be used to pass the result of this argument to the command's callback during execution). TYPE: str converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () default The default value of this argument, if left as UNDEFINED then this will have no default. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this argument are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this argument are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this argument is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True .","title":"with_multi_argument()"},{"location":"reference/parsing/#tanjun.parsing.with_multi_option","text":"with_multi_option ( key , name , / , * names , converters = (), default , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None ) Add an multi-option to a command's parser through a decorator call. A multi option will consume all the values provided for an option and pass them through to the converters as an array of strings while also requiring that at least one value is provided for the option unless a default is set. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_multi_option ( \"command\" , converters = int , default = ()) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : collections . abc . Sequence [ int ]): ... PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this argument to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this argument, unlike arguments this is required for options. TYPE: typing . Any converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this option is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True .","title":"with_multi_option()"},{"location":"reference/parsing/#tanjun.parsing.with_option","text":"with_option ( key , name , / , * names , converters = (), default , empty_value = UNDEFINED , min_length = None , max_length = None , min_value = None , max_value = None , multi = False ) Add an option to a message command through a decorator call. Note If no parser is explicitly set on the command this is decorating before this decorator call then this will set ShlexParser as the parser. Examples: import tanjun @tanjun . parsing . with_option ( \"command\" , converters = int , default = 42 ) @tanjun . parsing . with_parser @tanjun . component . as_message_command ( \"command\" ) async def command ( self , ctx : tanjun . abc . Context , / , argument : int ): ... PARAMETER DESCRIPTION key The string identifier of this option which will be used to pass the result of this argument to the command's callback during execution as a keyword argument. TYPE: str name The name of this option used for identifying it in the parsed content. TYPE: str *names Other names of this option used for identifying it in the parsed content. TYPE: str DEFAULT: () default The default value of this argument, unlike arguments this is required for options. TYPE: typing . Any converters The converter(s) this argument should use to handle values passed to it during parsing. If no converters are provided then the raw string value will be passed. Only the first converter to pass will be used. TYPE: _MaybeIterable [ ConverterSig [ typing . Any ]] DEFAULT: () empty_value The value to use if this option is provided without a value. If left as UNDEFINED then this option will error if it's provided without a value. TYPE: _UndefinedOr [ typing . Any ] DEFAULT: UNDEFINED min_length Assert that a string argument's length is greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None max_length Assert that a string argument's length is less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ int ] DEFAULT: None min_value Assert that the parsed value(s) for this option are greater than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None max_value Assert that the parsed value(s) for this option are less than or equal to this. If any converters are provided then this should be compatible with the result of them. TYPE: typing . Optional [ _CmpProto [ typing . Any ]] DEFAULT: None multi If this option can be provided multiple times. TYPE: bool DEFAULT: False RETURNS DESCRIPTION collections . abc . Callable [[ tanjun . abc . MessageCommand ], tanjun . abc . MessageCommand ] Decorator function for the message command this option is being added to. RAISES DESCRIPTION ValueError If key isn't valid for any of the commands this command's parser is linked to where validate_arg_keys is True .","title":"with_option()"},{"location":"reference/parsing/#tanjun.parsing.with_parser","text":"with_parser ( command ) Add a shlex parser command parser to a supported command.","title":"with_parser()"},{"location":"reference/parsing/#tanjun.parsing.with_parser--example","text":"@tanjun . with_argument ( \"arg\" , converters = int ) @tanjun . with_parser @tanjun . as_message_command ( \"hi\" ) async def hi ( ctx : tanjun . MessageContext , arg : int ) -> None : ... PARAMETER DESCRIPTION command The message command to set the parser on. TYPE: _CommandT RETURNS DESCRIPTION tanjun . abc . MessageCommand The command with the parser set. RAISES DESCRIPTION ValueError If the command already has a parser set.","title":"Example"},{"location":"reference/permissions/","text":"tanjun.permissions # Functions used to calculate permissions in Tanjun. ALL_PERMISSIONS module-attribute # ALL_PERMISSIONS : typing . Final [ hikari . Permissions ] = hikari . Permissions . all_permissions () All of all the known permissions based on the linked version of Hikari. DM_PERMISSIONS module-attribute # DM_PERMISSIONS : typing . Final [ hikari . Permissions ] = hikari . Permissions . ADD_REACTIONS | hikari . Permissions . VIEW_CHANNEL | hikari . Permissions . SEND_MESSAGES | hikari . Permissions . EMBED_LINKS | hikari . Permissions . ATTACH_FILES | hikari . Permissions . READ_MESSAGE_HISTORY | hikari . Permissions . USE_EXTERNAL_EMOJIS | hikari . Permissions . USE_EXTERNAL_STICKERS | hikari . Permissions . USE_APPLICATION_COMMANDS Bitfield of the permissions which are accessibly within DM channels. calculate_everyone_permissions # calculate_everyone_permissions ( everyone_role , / , * , channel = None ) Calculate a guild's default permissions within the guild or for a specific channel. PARAMETER DESCRIPTION everyone_role The guild's default @everyone role. TYPE: hikari . Role channel The channel to calculate the permissions for. If this is left as None then this will just calculate the default permissions on a guild level. TYPE: typing . Optional [ hikari . PermissibleGuildChannel ] DEFAULT: None RETURNS DESCRIPTION hikari . Permissions The calculated permissions. calculate_permissions # calculate_permissions ( member , guild , roles , * , channel = None ) Calculate the permissions a member has within a guild. PARAMETER DESCRIPTION member Object of the member to calculate the permissions for. TYPE: hikari . Member guild Object of the guild to calculate their permissions within. TYPE: hikari . Guild roles Mapping of snowflake IDs to objects of the roles within the target guild. TYPE: collections . Mapping [ hikari . Snowflake , hikari . Role ] channel Object of the channel to calculate the member's permissions in. If this is left as None then this will just calculate their permissions on a guild level. TYPE: typing . Optional [ hikari . PermissibleGuildChannel ] DEFAULT: None RETURNS DESCRIPTION hikari . Permission Value of the member's permissions either within the guild or specified guild channel. fetch_everyone_permissions async # fetch_everyone_permissions ( client , guild_id , / , * , channel = None ) Calculate the permissions a guild's default @everyone role has within a guild or for a specific channel. Note This callback will fallback to REST requests if cache lookups fail or are not possible. PARAMETER DESCRIPTION client The Tanjun client to use for lookups. TYPE: tanjun . Client guild_id ID of the guild to calculate the default permissions for. TYPE: hikari . Snowflake channel The channel to calculate the permissions for. If this is left as None then this will just calculate the default permissions on a guild level. TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . GuildChannel ]] DEFAULT: None RETURNS DESCRIPTION hikari . Permissions The calculated permissions. fetch_permissions async # fetch_permissions ( client , member , / , * , channel = None ) Calculate the permissions a member has within a guild. Note This callback will fallback to REST requests if cache lookups fail or are not possible. PARAMETER DESCRIPTION client The Tanjun client to use for lookups. TYPE: tanjun . Client member The object of the member to calculate the permissions for. TYPE: hikari . Member channel The object or ID of the channel to get their permissions in. If left as None then this will return their base guild permissions. TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . GuildChannel ]] DEFAULT: None RETURNS DESCRIPTION hikari . Permissions The calculated permissions.","title":"tanjun.permissions"},{"location":"reference/permissions/#tanjunpermissions","text":"Functions used to calculate permissions in Tanjun.","title":"tanjun.permissions"},{"location":"reference/permissions/#tanjun.permissions.ALL_PERMISSIONS","text":"ALL_PERMISSIONS : typing . Final [ hikari . Permissions ] = hikari . Permissions . all_permissions () All of all the known permissions based on the linked version of Hikari.","title":"ALL_PERMISSIONS"},{"location":"reference/permissions/#tanjun.permissions.DM_PERMISSIONS","text":"DM_PERMISSIONS : typing . Final [ hikari . Permissions ] = hikari . Permissions . ADD_REACTIONS | hikari . Permissions . VIEW_CHANNEL | hikari . Permissions . SEND_MESSAGES | hikari . Permissions . EMBED_LINKS | hikari . Permissions . ATTACH_FILES | hikari . Permissions . READ_MESSAGE_HISTORY | hikari . Permissions . USE_EXTERNAL_EMOJIS | hikari . Permissions . USE_EXTERNAL_STICKERS | hikari . Permissions . USE_APPLICATION_COMMANDS Bitfield of the permissions which are accessibly within DM channels.","title":"DM_PERMISSIONS"},{"location":"reference/permissions/#tanjun.permissions.calculate_everyone_permissions","text":"calculate_everyone_permissions ( everyone_role , / , * , channel = None ) Calculate a guild's default permissions within the guild or for a specific channel. PARAMETER DESCRIPTION everyone_role The guild's default @everyone role. TYPE: hikari . Role channel The channel to calculate the permissions for. If this is left as None then this will just calculate the default permissions on a guild level. TYPE: typing . Optional [ hikari . PermissibleGuildChannel ] DEFAULT: None RETURNS DESCRIPTION hikari . Permissions The calculated permissions.","title":"calculate_everyone_permissions()"},{"location":"reference/permissions/#tanjun.permissions.calculate_permissions","text":"calculate_permissions ( member , guild , roles , * , channel = None ) Calculate the permissions a member has within a guild. PARAMETER DESCRIPTION member Object of the member to calculate the permissions for. TYPE: hikari . Member guild Object of the guild to calculate their permissions within. TYPE: hikari . Guild roles Mapping of snowflake IDs to objects of the roles within the target guild. TYPE: collections . Mapping [ hikari . Snowflake , hikari . Role ] channel Object of the channel to calculate the member's permissions in. If this is left as None then this will just calculate their permissions on a guild level. TYPE: typing . Optional [ hikari . PermissibleGuildChannel ] DEFAULT: None RETURNS DESCRIPTION hikari . Permission Value of the member's permissions either within the guild or specified guild channel.","title":"calculate_permissions()"},{"location":"reference/permissions/#tanjun.permissions.fetch_everyone_permissions","text":"fetch_everyone_permissions ( client , guild_id , / , * , channel = None ) Calculate the permissions a guild's default @everyone role has within a guild or for a specific channel. Note This callback will fallback to REST requests if cache lookups fail or are not possible. PARAMETER DESCRIPTION client The Tanjun client to use for lookups. TYPE: tanjun . Client guild_id ID of the guild to calculate the default permissions for. TYPE: hikari . Snowflake channel The channel to calculate the permissions for. If this is left as None then this will just calculate the default permissions on a guild level. TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . GuildChannel ]] DEFAULT: None RETURNS DESCRIPTION hikari . Permissions The calculated permissions.","title":"fetch_everyone_permissions()"},{"location":"reference/permissions/#tanjun.permissions.fetch_permissions","text":"fetch_permissions ( client , member , / , * , channel = None ) Calculate the permissions a member has within a guild. Note This callback will fallback to REST requests if cache lookups fail or are not possible. PARAMETER DESCRIPTION client The Tanjun client to use for lookups. TYPE: tanjun . Client member The object of the member to calculate the permissions for. TYPE: hikari . Member channel The object or ID of the channel to get their permissions in. If left as None then this will return their base guild permissions. TYPE: typing . Optional [ hikari . SnowflakeishOr [ hikari . GuildChannel ]] DEFAULT: None RETURNS DESCRIPTION hikari . Permissions The calculated permissions.","title":"fetch_permissions()"},{"location":"reference/schedules/","text":"tanjun.schedules # Interface and interval implementation for a Tanjun based callback scheduler. AbstractSchedule # Bases: abc . ABC Abstract callback schedule class. callback abstractmethod property # callback () Return the callback attached to the schedule. This will be an asynchronous function which takes zero positional arguments, returns None and may be relying on dependency injection. copy abstractmethod # copy () Copy the schedule. RETURNS DESCRIPTION Self The copied schedule. RAISES DESCRIPTION RuntimeError If the schedule is active. force_stop abstractmethod # force_stop () Stop the schedule while cancelling any active tasks. RAISES DESCRIPTION RuntimeError If the schedule is not active. is_alive abstractmethod property # is_alive () Whether the schedule is alive. start abstractmethod # start ( client , / , * , loop = None ) Start the schedule. PARAMETER DESCRIPTION client The injector client calls should be resolved with. TYPE: alluka . Client loop The event loop to use. If not provided, the current event loop will be used. TYPE: typing . Optional [ asyncio . AbstractEventLoop ] DEFAULT: None RAISES DESCRIPTION RuntimeError If the scheduled callback is already running. If the current or provided event loop isn't running. stop abstractmethod async # stop () Stop the schedule after waiting for any existing tasks to finish. RAISES DESCRIPTION RuntimeError If the scheduled callback isn't running. IntervalSchedule # Bases: typing . Generic [ _CallbackSigT ] , components . AbstractComponentLoader , AbstractSchedule A callback schedule with an interval between calls. This should be loaded into a component using either Component.load_from_scope , Component.add_schedule or Component.with_schedule , and will be started and stopped with the linked tanjun client. __init__ # __init__ ( callback , interval , / , * , fatal_exceptions = (), ignored_exceptions = (), max_runs = None ) Initialise an interval schedule. PARAMETER DESCRIPTION callback The callback for the schedule. This should be an asynchronous function which takes no positional arguments, returns None and may use dependency injection. TYPE: collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] interval The interval between calls. Passed as a timedelta, or a number of seconds. TYPE: typing . Union [ datetime . timedelta , int , float ] fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () max_runs The maximum amount of times the schedule runs. TYPE: typing . Optional [ int ] DEFAULT: None interval property # interval () The interval between scheduled callback calls. set_fatal_exceptions # set_fatal_exceptions ( * exceptions ) Set the exceptions that will stop a schedule. If any of these exceptions are encountered, the task will stop. PARAMETER DESCRIPTION *exceptions Types of the exceptions to stop the task on. TYPE: type [ Exception ] DEFAULT: () RETURNS DESCRIPTION Self The schedule object to enable chianed calls. set_ignored_exceptions # set_ignored_exceptions ( * exceptions ) Set the exceptions that a schedule will ignore. If any of these exceptions are encountered, there will be nothing printed to console. PARAMETER DESCRIPTION *exceptions Types of the exceptions to ignore. TYPE: type [ Exception ] DEFAULT: () RETURNS DESCRIPTION Self The schedule object to enable chained calls. set_start_callback # set_start_callback ( callback ) Set the callback executed before the schedule starts to run. PARAMETER DESCRIPTION callback The callback to set. TYPE: _CallbackSig RETURNS DESCRIPTION Self The schedule instance to enable chained calls. set_stop_callback # set_stop_callback ( callback ) Set the callback executed after the schedule is finished. PARAMETER DESCRIPTION callback The callback to set. TYPE: _CallbackSig RETURNS DESCRIPTION Self The schedule instance to enable chained calls. with_start_callback # with_start_callback ( callback ) Set the callback executed before the schedule is finished/stopped. PARAMETER DESCRIPTION callback The callback to set. TYPE: collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] RETURNS DESCRIPTION collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] The added callback. Examples: @component . with_schedule () @tanjun . as_interval ( 1 , max_runs = 20 ) async def interval (): global counter counter += 1 print ( f \"Run # { counter } \" ) @interval . with_start_callback async def pre (): print ( \"pre callback\" ) with_stop_callback # with_stop_callback ( callback ) Set the callback executed after the schedule is finished. PARAMETER DESCRIPTION callback The callback to set. TYPE: collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] RETURNS DESCRIPTION collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] The added callback. Examples: @component . with_schedule () @tanjun . as_interval ( 1 , max_runs = 20 ) async def interval (): global counter counter += 1 print ( f \"Run # { counter } \" ) @interval . with_stop_callback async def post (): print ( \"pre callback\" ) TimeSchedule # Bases: typing . Generic [ _CallbackSigT ] , components . AbstractComponentLoader , AbstractSchedule A schedule that runs at specific times. This should be loaded into a component using either Component.load_from_scope , Component.add_schedule or Component.with_schedule and will be started and stopped with the linked tanjun client. __init__ # __init__ ( callback , / , * , months = (), weekly = False , days = (), hours = (), minutes = (), seconds = 0 , fatal_exceptions = (), ignored_exceptions = (), timezone = None ) Initialise the time schedule. PARAMETER DESCRIPTION callback The callback for the schedule. This should be an asynchronous function which takes no positional arguments, returns None and may use dependency injection. TYPE: collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] months Either one or multiple months the schedule shouldrun on. If this is not specified or an empty sequence then the schedule will run on all months. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () weekly Whether the schedule should run on a weekly basis. TYPE: bool DEFAULT: False days Either one or multiple days the schedule should run on. When weekly is True , days will refer to the days of the week ( range(7) ). Otherwise this will refer to the days of the month ( range(32) ). For months where less than 31 days exist, numbers which are too large will be ignored. If this is not specified or an empty sequence, then the schedule will on all days. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () hours Either one or multiple hours the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all hours. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () minutes Either one or multiple minutes the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all minutes. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () seconds Either one or multiple seconds the schedule should run on. Defaults to the start of the minute if not specified or an empty sequence. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: 0 fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () timezone The timezone to use for the schedule. If this is not specified then the system's local timezone will be used. TYPE: typing . Optional [ datetime . timezone ] DEFAULT: None RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If months has any values outside the range of range(1, 13) . If days has any values outside the range of range(1, 32) when weekly is False or outside the range of range(1, 8) when weekly is True . If hours has any values outside the range of range(0, 24) . If minutes has any values outside the range of range(0, 60) . If seconds has any values outside the range of range(0, 60) . set_fatal_exceptions # set_fatal_exceptions ( * exceptions ) Set the exceptions that will stop a schedule. If any of these exceptions are encountered, the task will stop. PARAMETER DESCRIPTION *exceptions Types of the exceptions to stop the task on. TYPE: type [ Exception ] DEFAULT: () RETURNS DESCRIPTION Self The schedule object to enable chianed calls. set_ignored_exceptions # set_ignored_exceptions ( * exceptions ) Set the exceptions that a schedule will ignore. If any of these exceptions are encountered, there will be nothing printed to console. PARAMETER DESCRIPTION *exceptions Types of the exceptions to ignore. TYPE: type [ Exception ] DEFAULT: () RETURNS DESCRIPTION Self The schedule object to enable chained calls. as_interval # as_interval ( interval , / , * , fatal_exceptions = (), ignored_exceptions = (), max_runs = None ) Decorator to create an schedule. Examples: @component . with_schedule @tanjun . as_interval ( datetime . timedelta ( minutes = 5 )) # This will run every 5 minutes async def interval ( client : alluka . Injected [ tanjun . abc . Client ]) -> None : ... This should be loaded into a component using either Component.with_schedule or Component.load_from_scope , and will be started and stopped with the linked tanjun client. PARAMETER DESCRIPTION interval The interval between calls. Passed as a timedelta, or a number of seconds. TYPE: typing . Union [ int , float , datetime . timedelta ] fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () max_runs The maximum amount of times the schedule runs. TYPE: typing . Optional [ int ] DEFAULT: None RETURNS DESCRIPTION collections . Callable [[ _CallbackSigT ], tanjun . scheduling . IntervalSchedule [ _CallbackSigT ]] The decorator used to create the schedule. This should be decorating an asynchronous function which takes no positional arguments, returns None and may use dependency injection. as_time_schedule # as_time_schedule ( * , months = (), weekly = False , days = (), hours = (), minutes = (), seconds = 0 , fatal_exceptions = (), ignored_exceptions = (), timezone = None ) Create a time schedule through a decorator call. Examples: @component . with_schedule @tanjun . as_time_schedule ( # This will run every week day at 8:00 and 16:00 UTC. minutes = 0 , hours = [ 8 , 16 ], days = range ( 0 , 5 ), weekly = True , timezone = datetime . timezone . utc ) async def interval ( client : alluka . Injected [ tanjun . abc . Client ]) -> None : ... This should be loaded into a component using either Component.with_schedule or Component.load_from_scope , and will be started and stopped with the linked tanjun client. PARAMETER DESCRIPTION months Either one or multiple months the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all months. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () weekly Whether the schedule should run on a weekly basis. TYPE: bool DEFAULT: False days Either one or multiple days the schedule should run on. When weekly is True , days will refer to the days of the week ( range(7) ). Otherwise this will refer to the days of the month ( range(32) ). For months where less than 31 days exist, numbers which are too large will be ignored. If this is not specified or an empty sequence, then the schedule will on all days. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () hours Either one or multiple hours the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all hours. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () minutes Either one or multiple minutes the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all minutes. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () seconds Either one or multiple seconds the schedule should run on. Defaults to the start of the minute if not specified or an empty sequence. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: 0 fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () timezone The timezone to use for the schedule. If this is not specified then the system's local timezone will be used. TYPE: typing . Optional [ datetime . timezone ] DEFAULT: None RETURNS DESCRIPTION collections . Callable [[ _CallbackSigT ], tanjun . scheduling . TimeSchedule [ _CallbackSigT ]] The decorator used to create the schedule. This should be decorating an asynchronous function which takes no positional arguments, returns None and may use dependency injection. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If months has any values outside the range of range(1, 13) . If days has any values outside the range of range(1, 32) when weekly is False or outside the range of range(1, 7) when weekly is True . If hours has any values outside the range of range(0, 24) . If minutes has any values outside the range of range(0, 60) . If seconds has any values outside the range of range(0, 60) .","title":"tanjun.schedules"},{"location":"reference/schedules/#tanjunschedules","text":"Interface and interval implementation for a Tanjun based callback scheduler.","title":"tanjun.schedules"},{"location":"reference/schedules/#tanjun.schedules.AbstractSchedule","text":"Bases: abc . ABC Abstract callback schedule class.","title":"AbstractSchedule"},{"location":"reference/schedules/#tanjun.schedules.AbstractSchedule.callback","text":"callback () Return the callback attached to the schedule. This will be an asynchronous function which takes zero positional arguments, returns None and may be relying on dependency injection.","title":"callback()"},{"location":"reference/schedules/#tanjun.schedules.AbstractSchedule.copy","text":"copy () Copy the schedule. RETURNS DESCRIPTION Self The copied schedule. RAISES DESCRIPTION RuntimeError If the schedule is active.","title":"copy()"},{"location":"reference/schedules/#tanjun.schedules.AbstractSchedule.force_stop","text":"force_stop () Stop the schedule while cancelling any active tasks. RAISES DESCRIPTION RuntimeError If the schedule is not active.","title":"force_stop()"},{"location":"reference/schedules/#tanjun.schedules.AbstractSchedule.is_alive","text":"is_alive () Whether the schedule is alive.","title":"is_alive()"},{"location":"reference/schedules/#tanjun.schedules.AbstractSchedule.start","text":"start ( client , / , * , loop = None ) Start the schedule. PARAMETER DESCRIPTION client The injector client calls should be resolved with. TYPE: alluka . Client loop The event loop to use. If not provided, the current event loop will be used. TYPE: typing . Optional [ asyncio . AbstractEventLoop ] DEFAULT: None RAISES DESCRIPTION RuntimeError If the scheduled callback is already running. If the current or provided event loop isn't running.","title":"start()"},{"location":"reference/schedules/#tanjun.schedules.AbstractSchedule.stop","text":"stop () Stop the schedule after waiting for any existing tasks to finish. RAISES DESCRIPTION RuntimeError If the scheduled callback isn't running.","title":"stop()"},{"location":"reference/schedules/#tanjun.schedules.IntervalSchedule","text":"Bases: typing . Generic [ _CallbackSigT ] , components . AbstractComponentLoader , AbstractSchedule A callback schedule with an interval between calls. This should be loaded into a component using either Component.load_from_scope , Component.add_schedule or Component.with_schedule , and will be started and stopped with the linked tanjun client.","title":"IntervalSchedule"},{"location":"reference/schedules/#tanjun.schedules.IntervalSchedule.__init__","text":"__init__ ( callback , interval , / , * , fatal_exceptions = (), ignored_exceptions = (), max_runs = None ) Initialise an interval schedule. PARAMETER DESCRIPTION callback The callback for the schedule. This should be an asynchronous function which takes no positional arguments, returns None and may use dependency injection. TYPE: collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] interval The interval between calls. Passed as a timedelta, or a number of seconds. TYPE: typing . Union [ datetime . timedelta , int , float ] fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () max_runs The maximum amount of times the schedule runs. TYPE: typing . Optional [ int ] DEFAULT: None","title":"__init__()"},{"location":"reference/schedules/#tanjun.schedules.IntervalSchedule.interval","text":"interval () The interval between scheduled callback calls.","title":"interval()"},{"location":"reference/schedules/#tanjun.schedules.IntervalSchedule.set_fatal_exceptions","text":"set_fatal_exceptions ( * exceptions ) Set the exceptions that will stop a schedule. If any of these exceptions are encountered, the task will stop. PARAMETER DESCRIPTION *exceptions Types of the exceptions to stop the task on. TYPE: type [ Exception ] DEFAULT: () RETURNS DESCRIPTION Self The schedule object to enable chianed calls.","title":"set_fatal_exceptions()"},{"location":"reference/schedules/#tanjun.schedules.IntervalSchedule.set_ignored_exceptions","text":"set_ignored_exceptions ( * exceptions ) Set the exceptions that a schedule will ignore. If any of these exceptions are encountered, there will be nothing printed to console. PARAMETER DESCRIPTION *exceptions Types of the exceptions to ignore. TYPE: type [ Exception ] DEFAULT: () RETURNS DESCRIPTION Self The schedule object to enable chained calls.","title":"set_ignored_exceptions()"},{"location":"reference/schedules/#tanjun.schedules.IntervalSchedule.set_start_callback","text":"set_start_callback ( callback ) Set the callback executed before the schedule starts to run. PARAMETER DESCRIPTION callback The callback to set. TYPE: _CallbackSig RETURNS DESCRIPTION Self The schedule instance to enable chained calls.","title":"set_start_callback()"},{"location":"reference/schedules/#tanjun.schedules.IntervalSchedule.set_stop_callback","text":"set_stop_callback ( callback ) Set the callback executed after the schedule is finished. PARAMETER DESCRIPTION callback The callback to set. TYPE: _CallbackSig RETURNS DESCRIPTION Self The schedule instance to enable chained calls.","title":"set_stop_callback()"},{"location":"reference/schedules/#tanjun.schedules.IntervalSchedule.with_start_callback","text":"with_start_callback ( callback ) Set the callback executed before the schedule is finished/stopped. PARAMETER DESCRIPTION callback The callback to set. TYPE: collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] RETURNS DESCRIPTION collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] The added callback. Examples: @component . with_schedule () @tanjun . as_interval ( 1 , max_runs = 20 ) async def interval (): global counter counter += 1 print ( f \"Run # { counter } \" ) @interval . with_start_callback async def pre (): print ( \"pre callback\" )","title":"with_start_callback()"},{"location":"reference/schedules/#tanjun.schedules.IntervalSchedule.with_stop_callback","text":"with_stop_callback ( callback ) Set the callback executed after the schedule is finished. PARAMETER DESCRIPTION callback The callback to set. TYPE: collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] RETURNS DESCRIPTION collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] The added callback. Examples: @component . with_schedule () @tanjun . as_interval ( 1 , max_runs = 20 ) async def interval (): global counter counter += 1 print ( f \"Run # { counter } \" ) @interval . with_stop_callback async def post (): print ( \"pre callback\" )","title":"with_stop_callback()"},{"location":"reference/schedules/#tanjun.schedules.TimeSchedule","text":"Bases: typing . Generic [ _CallbackSigT ] , components . AbstractComponentLoader , AbstractSchedule A schedule that runs at specific times. This should be loaded into a component using either Component.load_from_scope , Component.add_schedule or Component.with_schedule and will be started and stopped with the linked tanjun client.","title":"TimeSchedule"},{"location":"reference/schedules/#tanjun.schedules.TimeSchedule.__init__","text":"__init__ ( callback , / , * , months = (), weekly = False , days = (), hours = (), minutes = (), seconds = 0 , fatal_exceptions = (), ignored_exceptions = (), timezone = None ) Initialise the time schedule. PARAMETER DESCRIPTION callback The callback for the schedule. This should be an asynchronous function which takes no positional arguments, returns None and may use dependency injection. TYPE: collections . abc . Callable [..., collections . abc . Coroutine [ Any , Any , None]] months Either one or multiple months the schedule shouldrun on. If this is not specified or an empty sequence then the schedule will run on all months. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () weekly Whether the schedule should run on a weekly basis. TYPE: bool DEFAULT: False days Either one or multiple days the schedule should run on. When weekly is True , days will refer to the days of the week ( range(7) ). Otherwise this will refer to the days of the month ( range(32) ). For months where less than 31 days exist, numbers which are too large will be ignored. If this is not specified or an empty sequence, then the schedule will on all days. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () hours Either one or multiple hours the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all hours. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () minutes Either one or multiple minutes the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all minutes. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () seconds Either one or multiple seconds the schedule should run on. Defaults to the start of the minute if not specified or an empty sequence. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: 0 fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () timezone The timezone to use for the schedule. If this is not specified then the system's local timezone will be used. TYPE: typing . Optional [ datetime . timezone ] DEFAULT: None RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If months has any values outside the range of range(1, 13) . If days has any values outside the range of range(1, 32) when weekly is False or outside the range of range(1, 8) when weekly is True . If hours has any values outside the range of range(0, 24) . If minutes has any values outside the range of range(0, 60) . If seconds has any values outside the range of range(0, 60) .","title":"__init__()"},{"location":"reference/schedules/#tanjun.schedules.TimeSchedule.set_fatal_exceptions","text":"set_fatal_exceptions ( * exceptions ) Set the exceptions that will stop a schedule. If any of these exceptions are encountered, the task will stop. PARAMETER DESCRIPTION *exceptions Types of the exceptions to stop the task on. TYPE: type [ Exception ] DEFAULT: () RETURNS DESCRIPTION Self The schedule object to enable chianed calls.","title":"set_fatal_exceptions()"},{"location":"reference/schedules/#tanjun.schedules.TimeSchedule.set_ignored_exceptions","text":"set_ignored_exceptions ( * exceptions ) Set the exceptions that a schedule will ignore. If any of these exceptions are encountered, there will be nothing printed to console. PARAMETER DESCRIPTION *exceptions Types of the exceptions to ignore. TYPE: type [ Exception ] DEFAULT: () RETURNS DESCRIPTION Self The schedule object to enable chained calls.","title":"set_ignored_exceptions()"},{"location":"reference/schedules/#tanjun.schedules.as_interval","text":"as_interval ( interval , / , * , fatal_exceptions = (), ignored_exceptions = (), max_runs = None ) Decorator to create an schedule. Examples: @component . with_schedule @tanjun . as_interval ( datetime . timedelta ( minutes = 5 )) # This will run every 5 minutes async def interval ( client : alluka . Injected [ tanjun . abc . Client ]) -> None : ... This should be loaded into a component using either Component.with_schedule or Component.load_from_scope , and will be started and stopped with the linked tanjun client. PARAMETER DESCRIPTION interval The interval between calls. Passed as a timedelta, or a number of seconds. TYPE: typing . Union [ int , float , datetime . timedelta ] fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () max_runs The maximum amount of times the schedule runs. TYPE: typing . Optional [ int ] DEFAULT: None RETURNS DESCRIPTION collections . Callable [[ _CallbackSigT ], tanjun . scheduling . IntervalSchedule [ _CallbackSigT ]] The decorator used to create the schedule. This should be decorating an asynchronous function which takes no positional arguments, returns None and may use dependency injection.","title":"as_interval()"},{"location":"reference/schedules/#tanjun.schedules.as_time_schedule","text":"as_time_schedule ( * , months = (), weekly = False , days = (), hours = (), minutes = (), seconds = 0 , fatal_exceptions = (), ignored_exceptions = (), timezone = None ) Create a time schedule through a decorator call. Examples: @component . with_schedule @tanjun . as_time_schedule ( # This will run every week day at 8:00 and 16:00 UTC. minutes = 0 , hours = [ 8 , 16 ], days = range ( 0 , 5 ), weekly = True , timezone = datetime . timezone . utc ) async def interval ( client : alluka . Injected [ tanjun . abc . Client ]) -> None : ... This should be loaded into a component using either Component.with_schedule or Component.load_from_scope , and will be started and stopped with the linked tanjun client. PARAMETER DESCRIPTION months Either one or multiple months the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all months. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () weekly Whether the schedule should run on a weekly basis. TYPE: bool DEFAULT: False days Either one or multiple days the schedule should run on. When weekly is True , days will refer to the days of the week ( range(7) ). Otherwise this will refer to the days of the month ( range(32) ). For months where less than 31 days exist, numbers which are too large will be ignored. If this is not specified or an empty sequence, then the schedule will on all days. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () hours Either one or multiple hours the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all hours. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () minutes Either one or multiple minutes the schedule should run on. If this is not specified or an empty sequence then the schedule will run on all minutes. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: () seconds Either one or multiple seconds the schedule should run on. Defaults to the start of the minute if not specified or an empty sequence. TYPE: typing . Union [ int , collections . Sequence [ int ]] DEFAULT: 0 fatal_exceptions A sequence of exceptions that will cause the schedule to stop if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () ignored_exceptions A sequence of exceptions that should be ignored if raised by the callback, start callback or stop callback. TYPE: collections . Sequence [ type [ Exception ]] DEFAULT: () timezone The timezone to use for the schedule. If this is not specified then the system's local timezone will be used. TYPE: typing . Optional [ datetime . timezone ] DEFAULT: None RETURNS DESCRIPTION collections . Callable [[ _CallbackSigT ], tanjun . scheduling . TimeSchedule [ _CallbackSigT ]] The decorator used to create the schedule. This should be decorating an asynchronous function which takes no positional arguments, returns None and may use dependency injection. RAISES DESCRIPTION ValueError Raises a value error for any of the following reasons: If months has any values outside the range of range(1, 13) . If days has any values outside the range of range(1, 32) when weekly is False or outside the range of range(1, 7) when weekly is True . If hours has any values outside the range of range(0, 24) . If minutes has any values outside the range of range(0, 60) . If seconds has any values outside the range of range(0, 60) .","title":"as_time_schedule()"},{"location":"reference/utilities/","text":"tanjun.utilities # tanjun.utilities has been deprecated in favour of tanjun.permissions .","title":"tanjun.utilities"},{"location":"reference/utilities/#tanjunutilities","text":"tanjun.utilities has been deprecated in favour of tanjun.permissions .","title":"tanjun.utilities"}]}